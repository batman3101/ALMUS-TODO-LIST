[
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\App.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is assigned a value but never used.",
        "line": 28,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'t' is assigned a value but never used.",
        "line": 28,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Toaster } from 'react-hot-toast';\r\nimport { StagewiseToolbar } from '@stagewise/toolbar-react';\r\nimport ReactPlugin from '@stagewise-plugins/react';\r\nimport { QueryProvider } from './providers/QueryProvider';\r\nimport { ThemeProvider } from './contexts/ThemeContext';\r\nimport { NotificationProvider } from './contexts/NotificationContext';\r\nimport { useAuth } from './hooks/useAuth';\r\nimport { useTaskAuth } from './hooks/useTaskAuth';\r\nimport { useTeams } from './hooks/useTeams';\r\nimport { initializeSampleTasks } from './utils/initializeData';\r\nimport TaskList from './components/TaskList';\r\nimport CreateTaskForm from './components/CreateTaskForm';\r\nimport CalendarView from './components/CalendarView';\r\nimport KanbanView from './components/KanbanView';\r\nimport GanttView from './components/GanttView';\r\nimport { TeamManagement } from './components/TeamManagement';\r\nimport ViewSelector, { ViewType } from './components/ViewSelector';\r\nimport LanguageSelector from './components/LanguageSelector';\r\nimport ThemeToggle from './components/ThemeToggle';\r\nimport LoginForm from './components/LoginForm';\r\nimport { TeamRole } from './types/team';\r\n\r\nfunction App() {\r\n  const [currentView, setCurrentView] = useState<ViewType>('list');\r\n  const [showCreateTask, setShowCreateTask] = useState(false);\r\n  const { t } = useTranslation();\r\n  const { loading, isAuthenticated, user } = useAuth();\r\n\r\n  // 사용자가 로그인했을 때 샘플 데이터 초기화\r\n  useEffect(() => {\r\n    if (user && user.teamId) {\r\n      initializeSampleTasks(user.teamId, user.uid);\r\n    }\r\n  }, [user]);\r\n\r\n  const renderCurrentView = () => {\r\n    switch (currentView) {\r\n      case 'calendar':\r\n        return <CalendarView />;\r\n      case 'kanban':\r\n        return <KanbanView />;\r\n      case 'gantt':\r\n        return <GanttView />;\r\n      case 'team':\r\n        return <TeamManagement />;\r\n      case 'list':\r\n      default:\r\n        return <TaskList />;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <ThemeProvider>\r\n        <div className=\"min-h-screen bg-gray-50 dark:bg-dark-50 flex items-center justify-center transition-colors duration-200\">\r\n          <div className=\"text-center\">\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto\"></div>\r\n            <p className=\"mt-4 text-gray-600 dark:text-dark-600\">로딩 중...</p>\r\n          </div>\r\n        </div>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <ThemeProvider>\r\n        <StagewiseToolbar config={{ plugins: [ReactPlugin] }} />\r\n        <NotificationProvider>\r\n          <LoginForm />\r\n        </NotificationProvider>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider>\r\n      <StagewiseToolbar config={{ plugins: [ReactPlugin] }} />\r\n      <NotificationProvider>\r\n        <QueryProvider>\r\n          <MainApp\r\n            currentView={currentView}\r\n            setCurrentView={setCurrentView}\r\n            showCreateTask={showCreateTask}\r\n            setShowCreateTask={setShowCreateTask}\r\n            renderCurrentView={renderCurrentView}\r\n          />\r\n        </QueryProvider>\r\n      </NotificationProvider>\r\n      <Toaster\r\n        position=\"top-center\"\r\n        reverseOrder={false}\r\n        gutter={8}\r\n        containerClassName=\"\"\r\n        containerStyle={{}}\r\n        toastOptions={{\r\n          // Default options for all toasts\r\n          className: '',\r\n          duration: 4000,\r\n          style: {\r\n            background: 'white',\r\n            color: '#363636',\r\n          },\r\n          // Dark mode support\r\n          success: {\r\n            duration: 3000,\r\n            style: {\r\n              background: '#10b981',\r\n              color: 'white',\r\n            },\r\n          },\r\n          error: {\r\n            duration: 5000,\r\n            style: {\r\n              background: '#ef4444',\r\n              color: 'white',\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\n// 내부 컴포넌트 - QueryProvider 내부에서 useTeams 사용 가능\r\nfunction MainApp({\r\n  currentView,\r\n  setCurrentView,\r\n  showCreateTask,\r\n  setShowCreateTask,\r\n  renderCurrentView,\r\n}: {\r\n  currentView: ViewType;\r\n  setCurrentView: (view: ViewType) => void;\r\n  showCreateTask: boolean;\r\n  setShowCreateTask: (show: boolean) => void;\r\n  renderCurrentView: () => React.ReactNode;\r\n}) {\r\n  const { t } = useTranslation();\r\n  const { canCreateTask } = useTaskAuth();\r\n  const { currentTeam, getUserRole } = useTeams();\r\n\r\n  const getRoleLabel = (role: TeamRole | null) => {\r\n    switch (role) {\r\n      case TeamRole.OWNER:\r\n        return '소유자';\r\n      case TeamRole.ADMIN:\r\n        return '관리자';\r\n      case TeamRole.EDITOR:\r\n        return '편집자';\r\n      case TeamRole.VIEWER:\r\n        return '보기 전용';\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-dark-50 transition-colors duration-200\">\r\n      <div className=\"container mx-auto px-4 py-8\">\r\n        <header className=\"mb-8\">\r\n          <div className=\"flex justify-between items-start mb-4\">\r\n            <div>\r\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-dark-900\">\r\n                {t('app.title')}\r\n              </h1>\r\n              <p className=\"text-gray-600 dark:text-dark-600 mt-2\">\r\n                {currentTeam ? (\r\n                  <span>\r\n                    현재 팀: <strong>{currentTeam.name}</strong>\r\n                    {currentTeam && (\r\n                      <span className=\"ml-2 text-sm\">\r\n                        ({getRoleLabel(getUserRole(currentTeam.id))})\r\n                      </span>\r\n                    )}\r\n                  </span>\r\n                ) : (\r\n                  t('app.subtitle')\r\n                )}\r\n              </p>\r\n            </div>\r\n            <div className=\"flex items-center gap-3\">\r\n              {canCreateTask() && (\r\n                <button\r\n                  onClick={() => setShowCreateTask(true)}\r\n                  className=\"px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-dark-100 transition-colors duration-200\"\r\n                >\r\n                  태스크 추가\r\n                </button>\r\n              )}\r\n              <ThemeToggle />\r\n              <LanguageSelector />\r\n            </div>\r\n          </div>\r\n        </header>\r\n\r\n        <main className=\"space-y-8\">\r\n          {showCreateTask && (\r\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n              <div className=\"bg-white dark:bg-dark-100 rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\r\n                <div className=\"flex justify-between items-center p-6 border-b border-gray-200 dark:border-dark-300\">\r\n                  <h2 className=\"text-xl font-semibold text-gray-900 dark:text-dark-900\">\r\n                    태스크 생성\r\n                  </h2>\r\n                  <button\r\n                    onClick={() => setShowCreateTask(false)}\r\n                    className=\"text-gray-400 hover:text-gray-600 dark:text-dark-400 dark:hover:text-dark-600 transition-colors\"\r\n                  >\r\n                    <svg\r\n                      className=\"w-6 h-6\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      viewBox=\"0 0 24 24\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth={2}\r\n                        d=\"M6 18L18 6M6 6l12 12\"\r\n                      />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n                <div className=\"p-6\">\r\n                  <CreateTaskForm\r\n                    onTaskCreated={() => setShowCreateTask(false)}\r\n                    isModal={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          <ViewSelector\r\n            currentView={currentView}\r\n            onViewChange={setCurrentView}\r\n            className=\"mb-6\"\r\n          />\r\n          {renderCurrentView()}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\CalendarView.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used.",
        "line": 14,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 15
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used.",
        "line": 14,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 15
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 71,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 71,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [1956, 1993], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 211,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 211,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6692, 6732], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 282,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 282,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8638, 8641], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8638, 8641], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTasks, useUpdateTask } from '../hooks/useTasks';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useTeams } from '../hooks/useTeams';\r\nimport { Task, TaskPriority, UpdateTaskInput } from '@almus/shared-types';\r\nimport EditTaskModal from './EditTaskModal';\r\n\r\ninterface CalendarViewProps {\r\n  className?: string;\r\n}\r\n\r\nconst CalendarView: React.FC<CalendarViewProps> = ({ className = '' }) => {\r\n  const { user } = useAuth();\r\n  const { currentTeam } = useTeams();\r\n  const {\r\n    data: tasks,\r\n    isLoading,\r\n    error,\r\n  } = useTasks({\r\n    teamId: currentTeam?.id || '',\r\n  });\r\n  const { t } = useTranslation();\r\n  const updateTask = useUpdateTask();\r\n\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n\r\n  // 모달 상태 관리\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n\r\n  // 드래그 및 리사이즈 상태 관리\r\n  const [dragState, setDragState] = useState<{\r\n    isDragging: boolean;\r\n    isResizing: boolean;\r\n    dragType: 'move' | 'resize-left' | 'resize-right' | null;\r\n    taskId: string | null;\r\n    startX: number;\r\n    originalStartDate: Date | null;\r\n    originalEndDate: Date | null;\r\n  }>({\r\n    isDragging: false,\r\n    isResizing: false,\r\n    dragType: null,\r\n    taskId: null,\r\n    startX: 0,\r\n    originalStartDate: null,\r\n    originalEndDate: null,\r\n  });\r\n\r\n  // 태스크 클릭 핸들러\r\n  const handleTaskClick = (task: Task) => {\r\n    setEditingTask(task);\r\n    setShowEditModal(true);\r\n  };\r\n\r\n  // 모달 닫기 핸들러\r\n  const handleEditModalClose = () => {\r\n    setEditingTask(null);\r\n    setShowEditModal(false);\r\n  };\r\n\r\n  // 태스크 업데이트 핸들러\r\n  const handleTaskSave = async (\r\n    taskId: string,\r\n    updateData: UpdateTaskInput\r\n  ) => {\r\n    try {\r\n      await updateTask.mutateAsync({ id: taskId, updates: updateData });\r\n    } catch (error) {\r\n      console.error('태스크 업데이트 실패:', error);\r\n      throw error; // EditTaskModal에서 에러 처리하도록 throw\r\n    }\r\n  };\r\n\r\n  // 드래그 시작 핸들러\r\n  const handleDragStart = (\r\n    e: React.MouseEvent,\r\n    task: Task,\r\n    dragType: 'move' | 'resize-left' | 'resize-right'\r\n  ) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    setDragState({\r\n      isDragging: dragType === 'move',\r\n      isResizing: dragType.startsWith('resize'),\r\n      dragType,\r\n      taskId: task.id,\r\n      startX: e.clientX,\r\n      originalStartDate: task.startDate ? new Date(task.startDate) : null,\r\n      originalEndDate: task.dueDate ? new Date(task.dueDate) : null,\r\n    });\r\n\r\n    // 전역 마우스 이벤트 리스너 추가\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    document.addEventListener('mouseup', handleMouseUp);\r\n  };\r\n\r\n  // 마우스 이동 핸들러\r\n  const handleMouseMove = (e: MouseEvent) => {\r\n    if ((!dragState.isDragging && !dragState.isResizing) || !dragState.taskId)\r\n      return;\r\n\r\n    // 마우스 이동 거리 계산\r\n    const deltaX = e.clientX - dragState.startX;\r\n\r\n    // 캘린더 컨테이너의 너비를 기준으로 일(day) 단위 계산\r\n    // 일반적으로 캘린더는 주 단위(7일)로 표시되므로, 전체 너비를 7로 나누면 하루의 너비\r\n    const calendarContainer = document.querySelector('[data-calendar-content]');\r\n    if (!calendarContainer) return;\r\n\r\n    const containerWidth = calendarContainer.clientWidth;\r\n    const dayWidth = containerWidth / 7; // 한 주가 7일이므로\r\n    const daysDelta = Math.round(deltaX / dayWidth);\r\n\r\n    if (daysDelta === 0) return; // 변화가 없으면 리턴\r\n\r\n    // 현재 편집 중인 태스크 찾기\r\n    const task = tasks?.find(t => t.id === dragState.taskId);\r\n    if (!task || !task.startDate || !task.dueDate) return;\r\n\r\n    let newStartDate = new Date(dragState.originalStartDate!);\r\n    let newEndDate = new Date(dragState.originalEndDate!);\r\n\r\n    // 드래그 타입에 따른 날짜 조정\r\n    switch (dragState.dragType) {\r\n      case 'move':\r\n        // 태스크 전체 이동\r\n        newStartDate.setDate(newStartDate.getDate() + daysDelta);\r\n        newEndDate.setDate(newEndDate.getDate() + daysDelta);\r\n        break;\r\n\r\n      case 'resize-left':\r\n        // 시작일 조정 (종료일은 고정)\r\n        newStartDate.setDate(newStartDate.getDate() + daysDelta);\r\n        // 시작일이 종료일 이후가 되지 않도록 제한\r\n        if (newStartDate >= newEndDate) {\r\n          newStartDate = new Date(newEndDate);\r\n          newStartDate.setDate(newStartDate.getDate() - 1);\r\n        }\r\n        break;\r\n\r\n      case 'resize-right':\r\n        // 종료일 조정 (시작일은 고정)\r\n        newEndDate.setDate(newEndDate.getDate() + daysDelta);\r\n        // 종료일이 시작일 이전이 되지 않도록 제한\r\n        if (newEndDate <= newStartDate) {\r\n          newEndDate = new Date(newStartDate);\r\n          newEndDate.setDate(newEndDate.getDate() + 1);\r\n        }\r\n        break;\r\n    }\r\n\r\n    // 실시간 업데이트 (낙관적 업데이트)\r\n    // 실제로는 마우스업에서 최종 저장하고, 여기서는 UI만 업데이트\r\n    // React Query의 optimistic update 사용 가능\r\n  };\r\n\r\n  // 마우스 업 핸들러\r\n  const handleMouseUp = async () => {\r\n    if (dragState.taskId && (dragState.isDragging || dragState.isResizing)) {\r\n      // 마우스 이동 거리 계산\r\n      const calendarContainer = document.querySelector(\r\n        '[data-calendar-content]'\r\n      );\r\n      if (calendarContainer) {\r\n        const containerWidth = calendarContainer.clientWidth;\r\n        const dayWidth = containerWidth / 7;\r\n        const currentMouseX = event\r\n          ? (event as MouseEvent).clientX\r\n          : dragState.startX;\r\n        const deltaX = currentMouseX - dragState.startX;\r\n        const daysDelta = Math.round(deltaX / dayWidth);\r\n\r\n        if (daysDelta !== 0) {\r\n          // 최종 날짜 계산\r\n          let newStartDate = new Date(dragState.originalStartDate!);\r\n          let newEndDate = new Date(dragState.originalEndDate!);\r\n\r\n          switch (dragState.dragType) {\r\n            case 'move':\r\n              newStartDate.setDate(newStartDate.getDate() + daysDelta);\r\n              newEndDate.setDate(newEndDate.getDate() + daysDelta);\r\n              break;\r\n\r\n            case 'resize-left':\r\n              newStartDate.setDate(newStartDate.getDate() + daysDelta);\r\n              if (newStartDate >= newEndDate) {\r\n                newStartDate = new Date(newEndDate);\r\n                newStartDate.setDate(newStartDate.getDate() - 1);\r\n              }\r\n              break;\r\n\r\n            case 'resize-right':\r\n              newEndDate.setDate(newEndDate.getDate() + daysDelta);\r\n              if (newEndDate <= newStartDate) {\r\n                newEndDate = new Date(newStartDate);\r\n                newEndDate.setDate(newEndDate.getDate() + 1);\r\n              }\r\n              break;\r\n          }\r\n\r\n          // API 호출하여 태스크 업데이트\r\n          try {\r\n            await handleTaskSave(dragState.taskId, {\r\n              startDate: newStartDate,\r\n              dueDate: newEndDate,\r\n            });\r\n          } catch (error) {\r\n            console.error('태스크 날짜 업데이트 실패:', error);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // 드래그 상태 리셋\r\n    setDragState({\r\n      isDragging: false,\r\n      isResizing: false,\r\n      dragType: null,\r\n      taskId: null,\r\n      startX: 0,\r\n      originalStartDate: null,\r\n      originalEndDate: null,\r\n    });\r\n\r\n    // 전역 이벤트 리스너 제거\r\n    document.removeEventListener('mousemove', handleMouseMove);\r\n    document.removeEventListener('mouseup', handleMouseUp);\r\n  };\r\n\r\n  // 현재 월의 달력 데이터 생성\r\n  const calendarData = useMemo(() => {\r\n    const year = currentDate.getFullYear();\r\n    const month = currentDate.getMonth();\r\n\r\n    // 월의 첫날과 마지막날\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n\r\n    // 달력 시작일 (이전 월의 마지막 주 포함)\r\n    const startDate = new Date(firstDay);\r\n    startDate.setDate(startDate.getDate() - firstDay.getDay());\r\n\r\n    // 달력 종료일 (다음 월의 첫 주 포함)\r\n    const endDate = new Date(lastDay);\r\n    endDate.setDate(endDate.getDate() + (6 - lastDay.getDay()));\r\n\r\n    const weeks = [];\r\n    const currentWeekDate = new Date(startDate);\r\n\r\n    while (currentWeekDate <= endDate) {\r\n      const week = [];\r\n      for (let i = 0; i < 7; i++) {\r\n        week.push(new Date(currentWeekDate));\r\n        currentWeekDate.setDate(currentWeekDate.getDate() + 1);\r\n      }\r\n      weeks.push(week);\r\n    }\r\n\r\n    return { weeks, firstDay, lastDay };\r\n  }, [currentDate]);\r\n\r\n  // 주별로 연속된 태스크 막대를 계산\r\n  const weeklyTaskBars = useMemo(() => {\r\n    if (!tasks || tasks.length === 0) return [];\r\n\r\n    const weekBars: Array<{\r\n      weekIndex: number;\r\n      taskBars: Array<{\r\n        task: Task;\r\n        startDay: number; // 주 내에서 시작하는 요일 (0-6)\r\n        endDay: number; // 주 내에서 끝나는 요일 (0-6)\r\n        row: number; // 표시될 행 번호\r\n      }>;\r\n    }> = [];\r\n\r\n    calendarData.weeks.forEach((week, weekIndex) => {\r\n      const weekStartDate = week[0];\r\n      const weekEndDate = week[6];\r\n      const taskBars: any[] = [];\r\n      let currentRow = 0;\r\n\r\n      // 각 태스크에 대해 이번 주와 겹치는 부분 확인\r\n      tasks.forEach((task: Task) => {\r\n        if (task.startDate && task.dueDate) {\r\n          const taskStart = new Date(task.startDate);\r\n          const taskEnd = new Date(task.dueDate);\r\n\r\n          // 태스크가 이번 주와 겹치는지 확인\r\n          if (taskStart <= weekEndDate && taskEnd >= weekStartDate) {\r\n            // 주 내에서의 시작/끝 요일 계산\r\n            let startDay = 0;\r\n            let endDay = 6;\r\n\r\n            // 태스크 시작일이 이번 주 내에 있으면 정확한 요일 계산\r\n            if (taskStart >= weekStartDate) {\r\n              startDay = Math.floor(\r\n                (taskStart.getTime() - weekStartDate.getTime()) /\r\n                  (1000 * 60 * 60 * 24)\r\n              );\r\n            }\r\n\r\n            // 태스크 끝일이 이번 주 내에 있으면 정확한 요일 계산\r\n            if (taskEnd <= weekEndDate) {\r\n              endDay = Math.floor(\r\n                (taskEnd.getTime() - weekStartDate.getTime()) /\r\n                  (1000 * 60 * 60 * 24)\r\n              );\r\n            }\r\n\r\n            taskBars.push({\r\n              task,\r\n              startDay: Math.max(0, startDay),\r\n              endDay: Math.min(6, endDay),\r\n              row: currentRow++,\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      weekBars.push({\r\n        weekIndex,\r\n        taskBars,\r\n      });\r\n    });\r\n\r\n    return weekBars;\r\n  }, [tasks, calendarData]);\r\n\r\n  // 우선순위에 따른 색상 반환\r\n  const getPriorityColor = (priority: TaskPriority) => {\r\n    switch (priority) {\r\n      case TaskPriority.LOW:\r\n        return 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200';\r\n      case TaskPriority.MEDIUM:\r\n        return 'bg-blue-200 dark:bg-blue-800 text-blue-800 dark:text-blue-200';\r\n      case TaskPriority.HIGH:\r\n        return 'bg-orange-200 dark:bg-orange-800 text-orange-800 dark:text-orange-200';\r\n      case TaskPriority.URGENT:\r\n        return 'bg-red-200 dark:bg-red-800 text-red-800 dark:text-red-200';\r\n      default:\r\n        return 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200';\r\n    }\r\n  };\r\n\r\n  // 월 변경 함수\r\n  const navigateMonth = (direction: 'prev' | 'next') => {\r\n    setCurrentDate(prev => {\r\n      const newDate = new Date(prev);\r\n      if (direction === 'prev') {\r\n        newDate.setMonth(newDate.getMonth() - 1);\r\n      } else {\r\n        newDate.setMonth(newDate.getMonth() + 1);\r\n      }\r\n      return newDate;\r\n    });\r\n  };\r\n\r\n  // 오늘 날짜로 이동\r\n  const goToToday = () => {\r\n    setCurrentDate(new Date());\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-64 text-gray-900 dark:text-dark-900\">\r\n        {t('common.loading')}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"text-red-500 dark:text-red-400\">\r\n        {t('task.loadTasksFailed')}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`bg-white dark:bg-dark-100 rounded-lg shadow transition-colors duration-200 ${className}`}\r\n    >\r\n      {/* 헤더 */}\r\n      <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-dark-300\">\r\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-dark-900\">\r\n          캘린더 뷰\r\n        </h2>\r\n\r\n        <div className=\"flex items-center gap-4\">\r\n          <button\r\n            onClick={() => navigateMonth('prev')}\r\n            className=\"p-2 text-gray-600 dark:text-dark-600 hover:text-gray-900 dark:hover:text-dark-900 hover:bg-gray-100 dark:hover:bg-dark-200 rounded transition-colors\"\r\n          >\r\n            ←\r\n          </button>\r\n\r\n          <div className=\"text-lg font-medium text-gray-900 dark:text-dark-900 min-w-[200px] text-center\">\r\n            {currentDate.getFullYear()}년 {currentDate.getMonth() + 1}월\r\n          </div>\r\n\r\n          <button\r\n            onClick={() => navigateMonth('next')}\r\n            className=\"p-2 text-gray-600 dark:text-dark-600 hover:text-gray-900 dark:hover:text-dark-900 hover:bg-gray-100 dark:hover:bg-dark-200 rounded transition-colors\"\r\n          >\r\n            →\r\n          </button>\r\n\r\n          <button\r\n            onClick={goToToday}\r\n            className=\"px-3 py-1 text-sm bg-primary-600 text-white rounded hover:bg-primary-700 transition-colors\"\r\n          >\r\n            오늘\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 요일 헤더 */}\r\n      <div className=\"grid grid-cols-7 border-b border-gray-200 dark:border-dark-300\">\r\n        {['일', '월', '화', '수', '목', '금', '토'].map((day, index) => (\r\n          <div\r\n            key={day}\r\n            className={`p-3 text-center text-sm font-medium ${\r\n              index === 0\r\n                ? 'text-red-500'\r\n                : index === 6\r\n                  ? 'text-blue-500'\r\n                  : 'text-gray-700 dark:text-dark-700'\r\n            }`}\r\n          >\r\n            {day}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* 달력 본문 */}\r\n      <div className=\"relative\" data-calendar-content>\r\n        {/* 주별로 그리기 */}\r\n        {calendarData.weeks.map((week, weekIndex) => {\r\n          const weekTaskBars =\r\n            weeklyTaskBars.find(wb => wb.weekIndex === weekIndex)?.taskBars ||\r\n            [];\r\n          const maxRows = Math.max(3, weekTaskBars.length); // 최소 3행 보장\r\n          const weekHeight = 120 + maxRows * 28; // 날짜 표시 공간 + 태스크 행들\r\n\r\n          return (\r\n            <div\r\n              key={weekIndex}\r\n              className=\"relative\"\r\n              style={{ height: `${weekHeight}px` }}\r\n            >\r\n              {/* 각 날짜 셀들 */}\r\n              <div className=\"grid grid-cols-7 h-full\">\r\n                {week.map((date, dayIndex) => {\r\n                  const isCurrentMonth =\r\n                    date.getMonth() === currentDate.getMonth();\r\n                  const isToday =\r\n                    date.toDateString() === new Date().toDateString();\r\n\r\n                  return (\r\n                    <div\r\n                      key={`${weekIndex}-${dayIndex}`}\r\n                      className={`p-2 border-r border-b border-gray-200 dark:border-dark-300 ${dayIndex === 6 ? 'border-r-0' : ''} ${\r\n                        !isCurrentMonth ? 'bg-gray-50 dark:bg-dark-200' : ''\r\n                      }`}\r\n                    >\r\n                      {/* 날짜 */}\r\n                      <div\r\n                        className={`text-sm mb-2 ${\r\n                          isToday\r\n                            ? 'w-6 h-6 bg-primary-600 text-white rounded-full flex items-center justify-center font-bold'\r\n                            : !isCurrentMonth\r\n                              ? 'text-gray-400 dark:text-dark-400'\r\n                              : dayIndex === 0\r\n                                ? 'text-red-500'\r\n                                : dayIndex === 6\r\n                                  ? 'text-blue-500'\r\n                                  : 'text-gray-900 dark:text-dark-900'\r\n                        }`}\r\n                      >\r\n                        {date.getDate()}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              {/* 연속된 태스크 막대들 */}\r\n              <div className=\"absolute inset-0 pointer-events-none\">\r\n                {weekTaskBars.map((taskBar, barIndex) => {\r\n                  const { task, startDay, endDay, row } = taskBar;\r\n                  const barTop = 40 + row * 28; // 날짜 영역 아래부터 시작\r\n                  const barLeft = (startDay / 7) * 100;\r\n                  const barWidth = ((endDay - startDay + 1) / 7) * 100;\r\n\r\n                  return (\r\n                    <div\r\n                      key={`${task.id}-${barIndex}`}\r\n                      className={`absolute text-xs rounded ${getPriorityColor(task.priority)} pointer-events-auto group hover:shadow-md transition-shadow duration-200`}\r\n                      style={{\r\n                        top: `${barTop}px`,\r\n                        left: `${barLeft}%`,\r\n                        width: `${barWidth}%`,\r\n                        height: '24px',\r\n                        zIndex: 10,\r\n                      }}\r\n                      title={`${task.title} (${new Date(task.startDate!).toLocaleDateString()} - ${new Date(task.dueDate!).toLocaleDateString()})`}\r\n                    >\r\n                      {/* 왼쪽 리사이즈 핸들 */}\r\n                      <div\r\n                        className=\"absolute left-0 top-0 w-2 h-full bg-black bg-opacity-20 opacity-0 group-hover:opacity-100 cursor-w-resize transition-opacity duration-200 rounded-l\"\r\n                        onMouseDown={e =>\r\n                          handleDragStart(e, task, 'resize-left')\r\n                        }\r\n                        onClick={e => e.stopPropagation()}\r\n                        title=\"시작일 조정\"\r\n                      />\r\n\r\n                      {/* 태스크 내용 (중앙 클릭 영역) */}\r\n                      <div\r\n                        className=\"absolute inset-x-2 inset-y-0 flex items-center cursor-grab hover:cursor-grab active:cursor-grabbing\"\r\n                        onMouseDown={e => handleDragStart(e, task, 'move')}\r\n                        onClick={e => {\r\n                          e.stopPropagation();\r\n                          handleTaskClick(task);\r\n                        }}\r\n                      >\r\n                        <span className=\"truncate block\">{task.title}</span>\r\n                      </div>\r\n\r\n                      {/* 오른쪽 리사이즈 핸들 */}\r\n                      <div\r\n                        className=\"absolute right-0 top-0 w-2 h-full bg-black bg-opacity-20 opacity-0 group-hover:opacity-100 cursor-e-resize transition-opacity duration-200 rounded-r\"\r\n                        onMouseDown={e =>\r\n                          handleDragStart(e, task, 'resize-right')\r\n                        }\r\n                        onClick={e => e.stopPropagation()}\r\n                        title=\"종료일 조정\"\r\n                      />\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* 범례 */}\r\n      <div className=\"p-4 border-t border-gray-200 dark:border-dark-300\">\r\n        <div className=\"flex items-center gap-4 text-sm\">\r\n          <span className=\"text-gray-600 dark:text-dark-600\">우선순위:</span>\r\n          <div className=\"flex items-center gap-1\">\r\n            <div className=\"w-4 h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\r\n            <span className=\"text-gray-600 dark:text-dark-600\">낮음</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <div className=\"w-4 h-4 bg-blue-200 dark:bg-blue-800 rounded\"></div>\r\n            <span className=\"text-gray-600 dark:text-dark-600\">보통</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <div className=\"w-4 h-4 bg-orange-200 dark:bg-orange-800 rounded\"></div>\r\n            <span className=\"text-gray-600 dark:text-dark-600\">높음</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <div className=\"w-4 h-4 bg-red-200 dark:bg-red-800 rounded\"></div>\r\n            <span className=\"text-gray-600 dark:text-dark-600\">긴급</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 태스크 편집 모달 */}\r\n      <EditTaskModal\r\n        isOpen={showEditModal}\r\n        task={editingTask}\r\n        onClose={handleEditModalClose}\r\n        onSave={handleTaskSave}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarView;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\CreateTaskForm.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 76,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 76,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2139, 2184], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 77,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 77,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2189, 2242], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 90,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 90,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2500, 2669], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 141,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 141,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3965, 4000], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 148,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 148,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4172, 4175], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4172, 4175], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 155,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 155,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4324, 4327], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4324, 4327], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 162,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 162,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4490, 4525], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useCreateTask, useUpdateTask } from '../hooks/useTasks';\nimport {\n  CreateTaskInput,\n  UpdateTaskInput,\n  Task,\n  TaskStatus,\n  TaskPriority,\n  FileMetadata,\n} from '@almus/shared-types';\nimport { FileUpload } from './FileUpload';\nimport { useAuth } from '../hooks/useAuth';\nimport { useTeams } from '../hooks/useTeams';\nimport { useNotification } from '../contexts/NotificationContext';\n\ninterface CreateTaskFormProps {\n  onTaskCreated?: () => void;\n  isModal?: boolean;\n  editingTask?: Task | null;\n}\n\nconst CreateTaskForm: React.FC<CreateTaskFormProps> = ({\n  onTaskCreated,\n  isModal = false,\n  editingTask = null,\n}) => {\n  const { user } = useAuth();\n  const { currentTeam } = useTeams();\n  const { success, error: showError, warning } = useNotification();\n  const [formData, setFormData] = useState<CreateTaskInput>({\n    title: '',\n    description: '',\n    assigneeId: '',\n    status: TaskStatus.TODO,\n    priority: TaskPriority.MEDIUM,\n    startDate: undefined,\n    dueDate: undefined,\n    teamId: currentTeam?.id || '',\n  });\n\n  const [uploadedFiles, setUploadedFiles] = useState<FileMetadata[]>([]);\n\n  const createTaskMutation = useCreateTask();\n  const updateTaskMutation = useUpdateTask();\n  const { t } = useTranslation();\n\n  const isEditing = !!editingTask;\n\n  // 편집 모드일 때 formData 초기화\n  useEffect(() => {\n    if (editingTask) {\n      setFormData({\n        title: editingTask.title,\n        description: editingTask.description || '',\n        assigneeId: editingTask.assigneeId,\n        status: editingTask.status,\n        priority: editingTask.priority,\n        startDate: editingTask.startDate,\n        dueDate: editingTask.dueDate,\n        teamId: editingTask.teamId,\n      });\n    } else if (currentTeam?.id) {\n      // 새 태스크 생성 모드\n      setFormData(prev => ({\n        ...prev,\n        teamId: currentTeam.id,\n        assigneeId: user?.uid || '', // 기본적으로 자신을 할당자로 설정\n      }));\n    }\n  }, [user, currentTeam, editingTask]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    console.log('Form submission - user:', user);\n    console.log('Form submission - formData:', formData);\n\n    if (!formData.title.trim()) {\n      showError(t('task.titleRequired'));\n      return;\n    }\n\n    if (!formData.assigneeId.trim()) {\n      showError(t('task.assigneeRequired'));\n      return;\n    }\n\n    if (!formData.teamId || !currentTeam?.id) {\n      console.error('TeamId validation failed:', {\n        formDataTeamId: formData.teamId,\n        currentTeamId: currentTeam?.id,\n        currentTeam: currentTeam,\n      });\n      showError('팀이 선택되지 않았습니다. 팀을 선택해주세요.');\n      return;\n    }\n\n    // 시작일과 마감일 유효성 검사\n    if (formData.startDate && formData.dueDate) {\n      if (formData.startDate > formData.dueDate) {\n        warning('시작일은 마감일보다 이전이어야 합니다.');\n        return;\n      }\n    }\n\n    try {\n      if (isEditing && editingTask) {\n        // 편집 모드\n        const updateData: UpdateTaskInput = {\n          title: formData.title,\n          description: formData.description,\n          assigneeId: formData.assigneeId,\n          status: formData.status,\n          priority: formData.priority,\n          startDate: formData.startDate,\n          dueDate: formData.dueDate,\n        };\n        await updateTaskMutation.mutateAsync({\n          id: editingTask.id,\n          updates: updateData,\n        });\n        success('태스크가 성공적으로 수정되었습니다.');\n      } else {\n        // 생성 모드\n        await createTaskMutation.mutateAsync(formData);\n        setFormData({\n          title: '',\n          description: '',\n          assigneeId: '',\n          status: TaskStatus.TODO,\n          priority: TaskPriority.MEDIUM,\n          startDate: undefined,\n          dueDate: undefined,\n          teamId: currentTeam?.id || '',\n        });\n        success(t('task.taskCreated'));\n      }\n      onTaskCreated?.();\n    } catch (error) {\n      console.error('태스크 처리 실패:', error);\n      showError(\n        isEditing ? '태스크 수정에 실패했습니다.' : t('task.taskCreateFailed')\n      );\n    }\n  };\n\n  const handleInputChange = (field: keyof CreateTaskInput, value: any) => {\n    setFormData((prev: CreateTaskInput) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const handleFileUploadComplete = (result: any) => {\n    if (result.metadata) {\n      setUploadedFiles(prev => [...prev, result.metadata]);\n    }\n  };\n\n  const handleFileUploadError = (error: string) => {\n    console.error('파일 업로드 실패:', error);\n    showError(`파일 업로드 실패: ${error}`);\n  };\n\n  const getStatusText = (status: TaskStatus) => {\n    switch (status) {\n      case TaskStatus.TODO:\n        return t('status.todo');\n      case TaskStatus.IN_PROGRESS:\n        return t('status.inProgress');\n      case TaskStatus.REVIEW:\n        return t('status.review');\n      case TaskStatus.DONE:\n        return t('status.done');\n      default:\n        return t('status.todo');\n    }\n  };\n\n  const getPriorityText = (priority: TaskPriority) => {\n    switch (priority) {\n      case TaskPriority.LOW:\n        return t('priority.low');\n      case TaskPriority.MEDIUM:\n        return t('priority.medium');\n      case TaskPriority.HIGH:\n        return t('priority.high');\n      case TaskPriority.URGENT:\n        return t('priority.urgent');\n      default:\n        return t('priority.medium');\n    }\n  };\n\n  // TaskStatus enum 값들을 배열로 변환\n  const taskStatusOptions = [\n    TaskStatus.TODO,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.REVIEW,\n    TaskStatus.DONE,\n  ] as const;\n\n  // TaskPriority enum 값들을 배열로 변환\n  const taskPriorityOptions = [\n    TaskPriority.LOW,\n    TaskPriority.MEDIUM,\n    TaskPriority.HIGH,\n    TaskPriority.URGENT,\n  ] as const;\n\n  // 공통 input 스타일\n  const inputClassName = `\n    w-full px-3 py-2 \n    border border-gray-300 dark:border-dark-300 \n    bg-white dark:bg-dark-50\n    text-gray-900 dark:text-dark-900\n    placeholder-gray-500 dark:placeholder-dark-500\n    rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\n    transition-colors duration-200\n  `;\n\n  const labelClassName =\n    'block text-sm font-medium text-gray-700 dark:text-dark-700 mb-1';\n\n  return (\n    <div\n      className={\n        isModal\n          ? ''\n          : 'bg-white dark:bg-dark-100 rounded-lg shadow-md dark:shadow-lg p-6 transition-colors duration-200'\n      }\n    >\n      {!isModal && (\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-dark-900 mb-4\">\n          {isEditing ? '태스크 편집' : t('task.createTask')}\n        </h2>\n      )}\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"title\" className={labelClassName}>\n            {t('task.title')} *\n          </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            value={formData.title}\n            onChange={e => handleInputChange('title', e.target.value)}\n            className={inputClassName}\n            placeholder={t('task.title')}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"description\" className={labelClassName}>\n            {t('task.description')}\n          </label>\n          <textarea\n            id=\"description\"\n            value={formData.description || ''}\n            onChange={e => handleInputChange('description', e.target.value)}\n            rows={3}\n            className={inputClassName}\n            placeholder={t('task.description')}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"assignee\" className={labelClassName}>\n            {t('task.assignee')} *\n          </label>\n          <input\n            type=\"text\"\n            id=\"assignee\"\n            value={formData.assigneeId}\n            onChange={e => handleInputChange('assigneeId', e.target.value)}\n            className={inputClassName}\n            placeholder={t('task.assignee')}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label htmlFor=\"status\" className={labelClassName}>\n              {t('task.status')}\n            </label>\n            <select\n              id=\"status\"\n              value={formData.status}\n              onChange={e =>\n                handleInputChange('status', e.target.value as TaskStatus)\n              }\n              className={inputClassName}\n            >\n              {taskStatusOptions.map(status => (\n                <option key={status} value={status}>\n                  {getStatusText(status)}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"priority\" className={labelClassName}>\n              {t('task.priority')}\n            </label>\n            <select\n              id=\"priority\"\n              value={formData.priority}\n              onChange={e =>\n                handleInputChange('priority', e.target.value as TaskPriority)\n              }\n              className={inputClassName}\n            >\n              {taskPriorityOptions.map(priority => (\n                <option key={priority} value={priority}>\n                  {getPriorityText(priority)}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label htmlFor=\"startDate\" className={labelClassName}>\n              {t('task.startDate')}\n            </label>\n            <input\n              type=\"date\"\n              id=\"startDate\"\n              value={\n                formData.startDate\n                  ? new Date(formData.startDate).toISOString().split('T')[0]\n                  : ''\n              }\n              onChange={e =>\n                handleInputChange(\n                  'startDate',\n                  e.target.value ? new Date(e.target.value) : undefined\n                )\n              }\n              className={inputClassName}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"dueDate\" className={labelClassName}>\n              {t('task.dueDate')}\n            </label>\n            <input\n              type=\"date\"\n              id=\"dueDate\"\n              value={\n                formData.dueDate\n                  ? new Date(formData.dueDate).toISOString().split('T')[0]\n                  : ''\n              }\n              onChange={e =>\n                handleInputChange(\n                  'dueDate',\n                  e.target.value ? new Date(e.target.value) : undefined\n                )\n              }\n              className={inputClassName}\n            />\n          </div>\n        </div>\n\n        {/* 파일 업로드 섹션 */}\n        <div>\n          <label className={labelClassName}>{t('task.attachments')}</label>\n          <FileUpload\n            path=\"tasks\"\n            metadata={{\n              uploaderId: user?.uid || '',\n              uploaderName: user?.displayName || user?.email || 'Unknown',\n              teamId: currentTeam?.id || '',\n            }}\n            onUploadComplete={handleFileUploadComplete}\n            onUploadError={handleFileUploadError}\n            multiple={true}\n            accept=\"image/*,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,text/plain,text/csv\"\n            maxFiles={5}\n            className=\"mt-2\"\n          />\n        </div>\n\n        {/* 업로드된 파일 목록 */}\n        {uploadedFiles.length > 0 && (\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-dark-700 mb-2\">\n              업로드된 파일:\n            </h4>\n            <ul className=\"space-y-1\">\n              {uploadedFiles.map((file, index) => (\n                <li\n                  key={index}\n                  className=\"text-sm text-gray-600 dark:text-dark-600\"\n                >\n                  ✓ {file.name} ({Math.round(file.size / 1024)}KB)\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"flex justify-end\">\n          <button\n            type=\"submit\"\n            disabled={\n              createTaskMutation.isPending || updateTaskMutation.isPending\n            }\n            className=\"\n              px-4 py-2 \n              bg-primary-600 hover:bg-primary-700 \n              text-white rounded-md \n              focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\n              dark:focus:ring-offset-dark-100\n              disabled:opacity-50 disabled:cursor-not-allowed\n              transition-colors duration-200\n            \"\n          >\n            {createTaskMutation.isPending || updateTaskMutation.isPending\n              ? t('common.loading')\n              : isEditing\n                ? '수정'\n                : t('task.createTask')}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateTaskForm;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\CreateTeamModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Lock' is defined but never used.",
        "line": 2,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 31
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Lock' is defined but never used.",
        "line": 2,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 31
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 95,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 95,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2747, 2780], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 102,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 102,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2951, 2954], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2951, 2954], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3168, 3171], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3168, 3171], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport { X, Users, Globe, Lock, Settings } from 'lucide-react';\r\nimport { CreateTeamInput, TeamRole } from '../types/team';\r\nimport { useTeams } from '../hooks/useTeams';\r\n\r\ninterface CreateTeamModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const CreateTeamModal: React.FC<CreateTeamModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n}) => {\r\n  const { createTeam } = useTeams();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [formData, setFormData] = useState<CreateTeamInput>({\r\n    name: '',\r\n    description: '',\r\n    settings: {\r\n      isPublic: false,\r\n      allowInvitations: true,\r\n      defaultMemberRole: TeamRole.EDITOR,\r\n      maxMembers: 50,\r\n      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n      language: 'ko',\r\n      features: {\r\n        ganttView: true,\r\n        timeTracking: false,\r\n        advancedReporting: false,\r\n        customFields: false,\r\n        integrations: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.name.trim()) {\r\n      newErrors.name = '팀 이름을 입력해주세요';\r\n    } else if (formData.name.length < 2) {\r\n      newErrors.name = '팀 이름은 2자 이상이어야 합니다';\r\n    } else if (formData.name.length > 50) {\r\n      newErrors.name = '팀 이름은 50자 이하여야 합니다';\r\n    }\r\n\r\n    if (formData.description && formData.description.length > 200) {\r\n      newErrors.description = '설명은 200자 이하여야 합니다';\r\n    }\r\n\r\n    if (!formData.settings?.maxMembers || formData.settings.maxMembers < 1) {\r\n      newErrors.maxMembers = '최대 멤버 수는 1명 이상이어야 합니다';\r\n    } else if (formData.settings.maxMembers > 1000) {\r\n      newErrors.maxMembers = '최대 멤버 수는 1000명 이하여야 합니다';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      await createTeam(formData);\r\n      onClose();\r\n      // Reset form\r\n      setFormData({\r\n        name: '',\r\n        description: '',\r\n        settings: {\r\n          isPublic: false,\r\n          allowInvitations: true,\r\n          defaultMemberRole: TeamRole.EDITOR,\r\n          maxMembers: 50,\r\n          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n          language: 'ko',\r\n          features: {\r\n            ganttView: true,\r\n            timeTracking: false,\r\n            advancedReporting: false,\r\n            customFields: false,\r\n            integrations: false,\r\n          },\r\n        },\r\n      });\r\n      setErrors({});\r\n    } catch (error) {\r\n      console.error('팀 생성 실패:', error);\r\n      setErrors({ submit: '팀 생성에 실패했습니다. 다시 시도해주세요.' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: any) => {\r\n    if (field.includes('.')) {\r\n      const [parent, child] = field.split('.');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [parent]: {\r\n          ...((prev[parent as keyof CreateTeamInput] as any) || {}),\r\n          [child]: value,\r\n        },\r\n      }));\r\n    } else {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [field]: value,\r\n      }));\r\n    }\r\n\r\n    // Clear error when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\r\n            새 팀 만들기\r\n          </h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n          >\r\n            <X size={24} />\r\n          </button>\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\r\n          {/* 기본 정보 */}\r\n          <div className=\"space-y-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\r\n              기본 정보\r\n            </h3>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                팀 이름 *\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={formData.name}\r\n                onChange={e => handleInputChange('name', e.target.value)}\r\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 ${\r\n                  errors.name\r\n                    ? 'border-red-500'\r\n                    : 'border-gray-300 dark:border-gray-600'\r\n                }`}\r\n                placeholder=\"예: 마케팅팀, 개발팀\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.name && (\r\n                <p className=\"text-red-500 text-sm mt-1\">{errors.name}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                팀 설명\r\n              </label>\r\n              <textarea\r\n                value={formData.description}\r\n                onChange={e => handleInputChange('description', e.target.value)}\r\n                rows={3}\r\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 ${\r\n                  errors.description\r\n                    ? 'border-red-500'\r\n                    : 'border-gray-300 dark:border-gray-600'\r\n                }`}\r\n                placeholder=\"팀에 대한 간단한 설명을 입력하세요\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.description && (\r\n                <p className=\"text-red-500 text-sm mt-1\">\r\n                  {errors.description}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* 팀 설정 */}\r\n          <div className=\"space-y-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 flex items-center gap-2\">\r\n              <Settings size={18} />팀 설정\r\n            </h3>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                  최대 멤버 수\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max=\"1000\"\r\n                  value={formData.settings?.maxMembers}\r\n                  onChange={e =>\r\n                    handleInputChange(\r\n                      'settings.maxMembers',\r\n                      parseInt(e.target.value)\r\n                    )\r\n                  }\r\n                  className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 ${\r\n                    errors.maxMembers\r\n                      ? 'border-red-500'\r\n                      : 'border-gray-300 dark:border-gray-600'\r\n                  }`}\r\n                  disabled={isLoading}\r\n                />\r\n                {errors.maxMembers && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">\r\n                    {errors.maxMembers}\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                  기본 멤버 역할\r\n                </label>\r\n                <select\r\n                  value={formData.settings?.defaultMemberRole}\r\n                  onChange={e =>\r\n                    handleInputChange(\r\n                      'settings.defaultMemberRole',\r\n                      e.target.value as TeamRole\r\n                    )\r\n                  }\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100\"\r\n                  disabled={isLoading}\r\n                >\r\n                  <option value={TeamRole.VIEWER}>보기 전용</option>\r\n                  <option value={TeamRole.EDITOR}>편집자</option>\r\n                  <option value={TeamRole.ADMIN}>관리자</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Globe size={16} className=\"text-gray-500\" />\r\n                  <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                    공개 팀\r\n                  </span>\r\n                </div>\r\n                <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={formData.settings?.isPublic}\r\n                    onChange={e =>\r\n                      handleInputChange('settings.isPublic', e.target.checked)\r\n                    }\r\n                    className=\"sr-only peer\"\r\n                    disabled={isLoading}\r\n                  />\r\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"></div>\r\n                </label>\r\n              </div>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                공개 팀은 다른 사용자가 검색하고 가입 요청을 보낼 수 있습니다\r\n              </p>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Users size={16} className=\"text-gray-500\" />\r\n                  <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                    초대 허용\r\n                  </span>\r\n                </div>\r\n                <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={formData.settings?.allowInvitations}\r\n                    onChange={e =>\r\n                      handleInputChange(\r\n                        'settings.allowInvitations',\r\n                        e.target.checked\r\n                      )\r\n                    }\r\n                    className=\"sr-only peer\"\r\n                    disabled={isLoading}\r\n                  />\r\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"></div>\r\n                </label>\r\n              </div>\r\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                팀 멤버가 다른 사용자를 초대할 수 있습니다\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 기능 설정 */}\r\n          <div className=\"space-y-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\r\n              활성화할 기능\r\n            </h3>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n              {[\r\n                {\r\n                  key: 'ganttView',\r\n                  label: '간트 차트',\r\n                  desc: '프로젝트 타임라인 관리',\r\n                },\r\n                {\r\n                  key: 'timeTracking',\r\n                  label: '시간 추적',\r\n                  desc: '작업 시간 기록',\r\n                },\r\n                {\r\n                  key: 'advancedReporting',\r\n                  label: '고급 보고서',\r\n                  desc: '상세한 분석 리포트',\r\n                },\r\n                {\r\n                  key: 'customFields',\r\n                  label: '커스텀 필드',\r\n                  desc: '사용자 정의 작업 필드',\r\n                },\r\n                {\r\n                  key: 'integrations',\r\n                  label: '외부 연동',\r\n                  desc: '슬랙, 지라 등 연동',\r\n                },\r\n              ].map(feature => (\r\n                <div\r\n                  key={feature.key}\r\n                  className=\"flex items-start gap-3 p-3 border border-gray-200 dark:border-gray-700 rounded-lg\"\r\n                >\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={feature.key}\r\n                    checked={\r\n                      formData.settings?.features?.[\r\n                        feature.key as keyof typeof formData.settings.features\r\n                      ]\r\n                    }\r\n                    onChange={e =>\r\n                      handleInputChange(\r\n                        `settings.features.${feature.key}`,\r\n                        e.target.checked\r\n                      )\r\n                    }\r\n                    className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n                    disabled={isLoading}\r\n                  />\r\n                  <div className=\"flex-1\">\r\n                    <label\r\n                      htmlFor={feature.key}\r\n                      className=\"text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer\"\r\n                    >\r\n                      {feature.label}\r\n                    </label>\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      {feature.desc}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* 오류 메시지 */}\r\n          {errors.submit && (\r\n            <div className=\"p-3 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 rounded-lg\">\r\n              <p className=\"text-red-600 dark:text-red-400 text-sm\">\r\n                {errors.submit}\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* 버튼 */}\r\n          <div className=\"flex justify-end gap-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n              disabled={isLoading}\r\n            >\r\n              취소\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? '생성 중...' : '팀 만들기'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\EditTaskModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1918, 1921], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1918, 1921], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n  Task,\r\n  TaskStatus,\r\n  TaskPriority,\r\n  UpdateTaskInput,\r\n} from '@almus/shared-types';\r\nimport { useNotification } from '../contexts/NotificationContext';\r\n\r\ninterface EditTaskModalProps {\r\n  isOpen: boolean;\r\n  task: Task | null;\r\n  onClose: () => void;\r\n  onSave: (taskId: string, updateData: UpdateTaskInput) => void;\r\n}\r\n\r\nconst EditTaskModal: React.FC<EditTaskModalProps> = ({\r\n  isOpen,\r\n  task,\r\n  onClose,\r\n  onSave,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { success, error: showError } = useNotification();\r\n\r\n  const [formData, setFormData] = useState<UpdateTaskInput>({\r\n    title: '',\r\n    description: '',\r\n    assigneeId: '',\r\n    status: TaskStatus.TODO,\r\n    priority: TaskPriority.MEDIUM,\r\n    startDate: undefined,\r\n    dueDate: undefined,\r\n  });\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // 태스크 데이터로 폼 초기화\r\n  useEffect(() => {\r\n    if (task) {\r\n      setFormData({\r\n        title: task.title || '',\r\n        description: task.description || '',\r\n        assigneeId: task.assigneeId || '',\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate ? new Date(task.startDate) : undefined,\r\n        dueDate: task.dueDate ? new Date(task.dueDate) : undefined,\r\n      });\r\n    }\r\n  }, [task]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!task || !formData.title?.trim()) {\r\n      showError('제목을 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      await onSave(task.id, formData);\r\n      success('태스크가 성공적으로 수정되었습니다.');\r\n      onClose();\r\n    } catch (error) {\r\n      showError('태스크 수정에 실패했습니다.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: keyof UpdateTaskInput, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const formatDateForInput = (date: Date | undefined): string => {\r\n    if (!date) return '';\r\n    return date.toISOString().split('T')[0];\r\n  };\r\n\r\n  const parseDateFromInput = (dateString: string): Date | undefined => {\r\n    if (!dateString) return undefined;\r\n    return new Date(dateString + 'T00:00:00.000Z');\r\n  };\r\n\r\n  if (!isOpen || !task) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white dark:bg-dark-100 rounded-lg shadow-xl w-full max-w-md mx-4 max-h-[90vh] overflow-y-auto\">\r\n        {/* 모달 헤더 */}\r\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-dark-300\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-dark-900\">\r\n            태스크 수정\r\n          </h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-gray-400 hover:text-gray-600 dark:hover:text-dark-600 transition-colors\"\r\n          >\r\n            <svg\r\n              className=\"w-6 h-6\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {/* 모달 본문 */}\r\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-4\">\r\n          {/* 제목 */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-700 mb-1\">\r\n              {t('task.title')} *\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={formData.title}\r\n              onChange={e => handleInputChange('title', e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              placeholder=\"태스크 제목을 입력하세요\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* 설명 */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-700 mb-1\">\r\n              {t('task.description')}\r\n            </label>\r\n            <textarea\r\n              value={formData.description}\r\n              onChange={e => handleInputChange('description', e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              rows={3}\r\n              placeholder=\"태스크 설명을 입력하세요\"\r\n            />\r\n          </div>\r\n\r\n          {/* 담당자 */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-700 mb-1\">\r\n              {t('task.assignee')}\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              value={formData.assigneeId}\r\n              onChange={e => handleInputChange('assigneeId', e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              placeholder=\"담당자를 입력하세요\"\r\n            />\r\n          </div>\r\n\r\n          {/* 상태 및 우선순위 */}\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-700 mb-1\">\r\n                {t('task.status')}\r\n              </label>\r\n              <select\r\n                value={formData.status}\r\n                onChange={e =>\r\n                  handleInputChange('status', e.target.value as TaskStatus)\r\n                }\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              >\r\n                <option value={TaskStatus.TODO}>시작 전</option>\r\n                <option value={TaskStatus.IN_PROGRESS}>진행 중</option>\r\n                <option value={TaskStatus.REVIEW}>검토</option>\r\n                <option value={TaskStatus.DONE}>완료</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-700 mb-1\">\r\n                {t('task.priority')}\r\n              </label>\r\n              <select\r\n                value={formData.priority}\r\n                onChange={e =>\r\n                  handleInputChange('priority', e.target.value as TaskPriority)\r\n                }\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              >\r\n                <option value={TaskPriority.LOW}>낮음</option>\r\n                <option value={TaskPriority.MEDIUM}>보통</option>\r\n                <option value={TaskPriority.HIGH}>높음</option>\r\n                <option value={TaskPriority.URGENT}>긴급</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 시작일 및 마감일 */}\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-700 mb-1\">\r\n                {t('task.startDate')}\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={formatDateForInput(formData.startDate)}\r\n                onChange={e =>\r\n                  handleInputChange(\r\n                    'startDate',\r\n                    parseDateFromInput(e.target.value)\r\n                  )\r\n                }\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-700 mb-1\">\r\n                {t('task.dueDate')}\r\n              </label>\r\n              <input\r\n                type=\"date\"\r\n                value={formatDateForInput(formData.dueDate)}\r\n                onChange={e =>\r\n                  handleInputChange(\r\n                    'dueDate',\r\n                    parseDateFromInput(e.target.value)\r\n                  )\r\n                }\r\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* 버튼 */}\r\n          <div className=\"flex justify-end space-x-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-gray-700 dark:text-dark-700 bg-gray-200 dark:bg-dark-200 hover:bg-gray-300 dark:hover:bg-dark-300 rounded-md transition-colors\"\r\n            >\r\n              취소\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              className=\"px-4 py-2 bg-primary-600 hover:bg-primary-700 disabled:bg-primary-400 text-white rounded-md transition-colors\"\r\n            >\r\n              {isSubmitting ? '저장 중...' : '저장'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditTaskModal;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\EditTeamModal.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 76,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 76,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2131, 2164], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 83,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 83,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2335, 2338], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2335, 2338], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 89,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 89,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2552, 2555], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2552, 2555], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport { X, Settings, Globe, Users } from 'lucide-react';\r\nimport { Team, UpdateTeamInput, TeamRole } from '../types/team';\r\nimport { useTeams } from '../hooks/useTeams';\r\n\r\ninterface EditTeamModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  team: Team;\r\n}\r\n\r\nexport const EditTeamModal: React.FC<EditTeamModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  team,\r\n}) => {\r\n  const { updateTeam } = useTeams();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [formData, setFormData] = useState<UpdateTeamInput>({\r\n    id: team.id,\r\n    name: team.name,\r\n    description: team.description,\r\n    settings: team.settings,\r\n    isActive: team.isActive,\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  // Reset form when team changes\r\n  useEffect(() => {\r\n    setFormData({\r\n      id: team.id,\r\n      name: team.name,\r\n      description: team.description,\r\n      settings: team.settings,\r\n      isActive: team.isActive,\r\n    });\r\n    setErrors({});\r\n  }, [team]);\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.name?.trim()) {\r\n      newErrors.name = '팀 이름을 입력해주세요';\r\n    } else if (formData.name.length < 2) {\r\n      newErrors.name = '팀 이름은 2자 이상이어야 합니다';\r\n    } else if (formData.name.length > 50) {\r\n      newErrors.name = '팀 이름은 50자 이하여야 합니다';\r\n    }\r\n\r\n    if (formData.description && formData.description.length > 200) {\r\n      newErrors.description = '설명은 200자 이하여야 합니다';\r\n    }\r\n\r\n    if (!formData.settings?.maxMembers || formData.settings.maxMembers < 1) {\r\n      newErrors.maxMembers = '최대 멤버 수는 1명 이상이어야 합니다';\r\n    } else if (formData.settings.maxMembers > 1000) {\r\n      newErrors.maxMembers = '최대 멤버 수는 1000명 이하여야 합니다';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      await updateTeam(formData);\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('팀 수정 실패:', error);\r\n      setErrors({ submit: '팀 수정에 실패했습니다. 다시 시도해주세요.' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: any) => {\r\n    if (field.includes('.')) {\r\n      const [parent, child] = field.split('.');\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [parent]: {\r\n          ...((prev[parent as keyof UpdateTeamInput] as any) || {}),\r\n          [child]: value,\r\n        },\r\n      }));\r\n    } else {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        [field]: value,\r\n      }));\r\n    }\r\n\r\n    // Clear error when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const hasChanges = (): boolean => {\r\n    return (\r\n      formData.name !== team.name ||\r\n      formData.description !== team.description ||\r\n      formData.isActive !== team.isActive ||\r\n      JSON.stringify(formData.settings) !== JSON.stringify(team.settings)\r\n    );\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\r\n            팀 설정 편집\r\n          </h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n          >\r\n            <X size={24} />\r\n          </button>\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\r\n          {/* 기본 정보 */}\r\n          <div className=\"space-y-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\r\n              기본 정보\r\n            </h3>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                팀 이름 *\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                value={formData.name}\r\n                onChange={e => handleInputChange('name', e.target.value)}\r\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 ${\r\n                  errors.name\r\n                    ? 'border-red-500'\r\n                    : 'border-gray-300 dark:border-gray-600'\r\n                }`}\r\n                placeholder=\"예: 마케팅팀, 개발팀\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.name && (\r\n                <p className=\"text-red-500 text-sm mt-1\">{errors.name}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                팀 설명\r\n              </label>\r\n              <textarea\r\n                value={formData.description || ''}\r\n                onChange={e => handleInputChange('description', e.target.value)}\r\n                rows={3}\r\n                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 ${\r\n                  errors.description\r\n                    ? 'border-red-500'\r\n                    : 'border-gray-300 dark:border-gray-600'\r\n                }`}\r\n                placeholder=\"팀에 대한 간단한 설명을 입력하세요\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.description && (\r\n                <p className=\"text-red-500 text-sm mt-1\">\r\n                  {errors.description}\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\r\n              <div>\r\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                  팀 활성화\r\n                </span>\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                  비활성화하면 팀 멤버들이 팀에 접근할 수 없습니다\r\n                </p>\r\n              </div>\r\n              <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={formData.isActive}\r\n                  onChange={e =>\r\n                    handleInputChange('isActive', e.target.checked)\r\n                  }\r\n                  className=\"sr-only peer\"\r\n                  disabled={isLoading}\r\n                />\r\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"></div>\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 팀 설정 */}\r\n          <div className=\"space-y-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 flex items-center gap-2\">\r\n              <Settings size={18} />팀 설정\r\n            </h3>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                  최대 멤버 수\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max=\"1000\"\r\n                  value={formData.settings?.maxMembers}\r\n                  onChange={e =>\r\n                    handleInputChange(\r\n                      'settings.maxMembers',\r\n                      parseInt(e.target.value)\r\n                    )\r\n                  }\r\n                  className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 ${\r\n                    errors.maxMembers\r\n                      ? 'border-red-500'\r\n                      : 'border-gray-300 dark:border-gray-600'\r\n                  }`}\r\n                  disabled={isLoading}\r\n                />\r\n                {errors.maxMembers && (\r\n                  <p className=\"text-red-500 text-sm mt-1\">\r\n                    {errors.maxMembers}\r\n                  </p>\r\n                )}\r\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                  현재 멤버: {team.memberCount}명\r\n                </p>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\r\n                  기본 멤버 역할\r\n                </label>\r\n                <select\r\n                  value={formData.settings?.defaultMemberRole}\r\n                  onChange={e =>\r\n                    handleInputChange(\r\n                      'settings.defaultMemberRole',\r\n                      e.target.value as TeamRole\r\n                    )\r\n                  }\r\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100\"\r\n                  disabled={isLoading}\r\n                >\r\n                  <option value={TeamRole.VIEWER}>보기 전용</option>\r\n                  <option value={TeamRole.EDITOR}>편집자</option>\r\n                  <option value={TeamRole.ADMIN}>관리자</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Globe size={16} className=\"text-gray-500\" />\r\n                  <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                    공개 팀\r\n                  </span>\r\n                </div>\r\n                <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={formData.settings?.isPublic}\r\n                    onChange={e =>\r\n                      handleInputChange('settings.isPublic', e.target.checked)\r\n                    }\r\n                    className=\"sr-only peer\"\r\n                    disabled={isLoading}\r\n                  />\r\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"></div>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Users size={16} className=\"text-gray-500\" />\r\n                  <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                    초대 허용\r\n                  </span>\r\n                </div>\r\n                <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={formData.settings?.allowInvitations}\r\n                    onChange={e =>\r\n                      handleInputChange(\r\n                        'settings.allowInvitations',\r\n                        e.target.checked\r\n                      )\r\n                    }\r\n                    className=\"sr-only peer\"\r\n                    disabled={isLoading}\r\n                  />\r\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"></div>\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 기능 설정 */}\r\n          <div className=\"space-y-4\">\r\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\r\n              팀 기능\r\n            </h3>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n              {[\r\n                {\r\n                  key: 'ganttView',\r\n                  label: '간트 차트',\r\n                  desc: '프로젝트 타임라인 관리',\r\n                },\r\n                {\r\n                  key: 'timeTracking',\r\n                  label: '시간 추적',\r\n                  desc: '작업 시간 기록',\r\n                },\r\n                {\r\n                  key: 'advancedReporting',\r\n                  label: '고급 보고서',\r\n                  desc: '상세한 분석 리포트',\r\n                },\r\n                {\r\n                  key: 'customFields',\r\n                  label: '커스텀 필드',\r\n                  desc: '사용자 정의 작업 필드',\r\n                },\r\n                {\r\n                  key: 'integrations',\r\n                  label: '외부 연동',\r\n                  desc: '슬랙, 지라 등 연동',\r\n                },\r\n              ].map(feature => (\r\n                <div\r\n                  key={feature.key}\r\n                  className=\"flex items-start gap-3 p-3 border border-gray-200 dark:border-gray-700 rounded-lg\"\r\n                >\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={`edit-${feature.key}`}\r\n                    checked={\r\n                      formData.settings?.features?.[\r\n                        feature.key as keyof typeof formData.settings.features\r\n                      ]\r\n                    }\r\n                    onChange={e =>\r\n                      handleInputChange(\r\n                        `settings.features.${feature.key}`,\r\n                        e.target.checked\r\n                      )\r\n                    }\r\n                    className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\r\n                    disabled={isLoading}\r\n                  />\r\n                  <div className=\"flex-1\">\r\n                    <label\r\n                      htmlFor={`edit-${feature.key}`}\r\n                      className=\"text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer\"\r\n                    >\r\n                      {feature.label}\r\n                    </label>\r\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                      {feature.desc}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* 오류 메시지 */}\r\n          {errors.submit && (\r\n            <div className=\"p-3 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 rounded-lg\">\r\n              <p className=\"text-red-600 dark:text-red-400 text-sm\">\r\n                {errors.submit}\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* 버튼 */}\r\n          <div className=\"flex justify-end gap-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n              disabled={isLoading}\r\n            >\r\n              취소\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className={`px-4 py-2 rounded-lg transition-colors ${\r\n                hasChanges()\r\n                  ? 'bg-blue-600 text-white hover:bg-blue-700'\r\n                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'\r\n              } disabled:opacity-50 disabled:cursor-not-allowed`}\r\n              disabled={isLoading || !hasChanges()}\r\n            >\r\n              {isLoading ? '저장 중...' : '변경사항 저장'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\FileList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\FileUpload.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [281, 284], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [281, 284], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useRef, useState, useCallback } from 'react';\nimport { useFileUpload } from '../hooks/useFileUpload';\nimport { FileMetadata } from '@almus/shared-types';\n\ninterface FileUploadProps {\n  path: string;\n  metadata?: Partial<FileMetadata>;\n  onUploadComplete?: (result: any) => void;\n  onUploadError?: (error: string) => void;\n  multiple?: boolean;\n  accept?: string;\n  maxFiles?: number;\n  className?: string;\n}\n\nexport const FileUpload: React.FC<FileUploadProps> = ({\n  path,\n  metadata,\n  onUploadComplete,\n  onUploadError,\n  multiple = false,\n  accept,\n  className = '',\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const { uploadFile, uploadMultipleFiles, uploadState, resetUploadState } =\n    useFileUpload();\n\n  const handleFileSelect = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const files = Array.from(event.target.files || []);\n      setSelectedFiles(files);\n    },\n    []\n  );\n\n  const handleUpload = useCallback(async () => {\n    if (selectedFiles.length === 0) return;\n\n    try {\n      if (multiple) {\n        const results = await uploadMultipleFiles(\n          selectedFiles,\n          path,\n          metadata\n        );\n        const successResults = results.filter(\n          (result: FileMetadata) => result.id\n        );\n        const errorResults = results.filter(\n          (result: FileMetadata) => !result.id\n        );\n\n        if (successResults.length > 0) {\n          onUploadComplete?.(successResults);\n        }\n        if (errorResults.length > 0) {\n          onUploadError?.('일부 파일 업로드에 실패했습니다.');\n        }\n      } else {\n        const result = await uploadFile(selectedFiles[0], path, metadata);\n        if (result.id) {\n          onUploadComplete?.(result);\n        } else {\n          onUploadError?.('업로드 실패');\n        }\n      }\n\n      // 파일 선택 초기화\n      setSelectedFiles([]);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n      resetUploadState();\n    } catch (error) {\n      onUploadError?.(error instanceof Error ? error.message : '업로드 실패');\n    }\n  }, [\n    selectedFiles,\n    path,\n    metadata,\n    multiple,\n    uploadFile,\n    uploadMultipleFiles,\n    onUploadComplete,\n    onUploadError,\n    resetUploadState,\n  ]);\n\n  const handleDrop = useCallback((event: React.DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    const files = Array.from(event.dataTransfer.files);\n    setSelectedFiles(files);\n  }, []);\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      event.preventDefault();\n    },\n    []\n  );\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className={`file-upload ${className}`}>\n      {/* 파일 선택 영역 */}\n      <div\n        className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors\"\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple={multiple}\n          accept={accept}\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        />\n\n        <div className=\"space-y-4\">\n          <div className=\"text-gray-600\">\n            <svg\n              className=\"mx-auto h-12 w-12 text-gray-400\"\n              stroke=\"currentColor\"\n              fill=\"none\"\n              viewBox=\"0 0 48 48\"\n            >\n              <path\n                d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n                strokeWidth={2}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              />\n            </svg>\n          </div>\n\n          <div>\n            <button\n              type=\"button\"\n              onClick={() => fileInputRef.current?.click()}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              파일 선택\n            </button>\n            <p className=\"mt-2 text-sm text-gray-500\">\n              또는 파일을 여기에 드래그하세요\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* 선택된 파일 목록 */}\n      {selectedFiles.length > 0 && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n            선택된 파일:\n          </h4>\n          <ul className=\"space-y-2\">\n            {selectedFiles.map((file, index) => (\n              <li\n                key={index}\n                className=\"flex items-center justify-between p-2 bg-gray-50 rounded\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-gray-600\">{file.name}</span>\n                  <span className=\"text-xs text-gray-400\">\n                    ({formatFileSize(file.size)})\n                  </span>\n                </div>\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    setSelectedFiles(prev => prev.filter((_, i) => i !== index))\n                  }\n                  className=\"text-red-500 hover:text-red-700\"\n                >\n                  ×\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          <button\n            type=\"button\"\n            onClick={handleUpload}\n            disabled={uploadState.isUploading}\n            className=\"mt-4 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            {uploadState.isUploading ? '업로드 중...' : '업로드'}\n          </button>\n        </div>\n      )}\n\n      {/* 업로드 진행률 */}\n      {uploadState.isUploading && (\n        <div className=\"mt-4\">\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div\n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${uploadState.progress.percentage}%` }}\n            />\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {Math.round(uploadState.progress.percentage)}% 완료\n          </p>\n        </div>\n      )}\n\n      {/* 에러 메시지 */}\n      {uploadState.error && (\n        <div className=\"mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\n          {uploadState.error}\n        </div>\n      )}\n\n      {/* 성공 메시지 */}\n      {uploadState.downloadURL && (\n        <div className=\"mt-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded\">\n          파일이 성공적으로 업로드되었습니다!\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\GanttView.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used.",
        "line": 17,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 15
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used.",
        "line": 17,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 15
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 78,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 78,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2155, 2192], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 142,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 142,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3867, 4175], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 571,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 571,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [17555, 17802], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 665,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 665,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [21159, 21645], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useMemo, useRef, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { format } from 'date-fns';\r\nimport { useTasks, useUpdateTask } from '../hooks/useTasks';\r\nimport {\r\n  Task,\r\n  GanttTask,\r\n  ZoomLevel,\r\n  GanttViewConfig,\r\n  UpdateTaskInput,\r\n} from '@almus/shared-types';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useTeams } from '../hooks/useTeams';\r\nimport EditTaskModal from './EditTaskModal';\r\n\r\nconst GanttView: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const { currentTeam } = useTeams();\r\n  const { t } = useTranslation();\r\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\r\n  const timelineRef = useRef<HTMLDivElement>(null);\r\n\r\n  // 현재 날짜를 실시간으로 가져오는 함수\r\n  const getCurrentDate = () => new Date();\r\n\r\n  const [config, setConfig] = useState<GanttViewConfig>(() => {\r\n    const now = getCurrentDate();\r\n    return {\r\n      zoomLevel: ZoomLevel.WEEK,\r\n      showDependencies: true,\r\n      showProgress: true,\r\n      showDelayedTasks: true,\r\n      dateRange: {\r\n        start: new Date(now.getFullYear(), now.getMonth() - 1, 1),\r\n        end: new Date(now.getFullYear(), now.getMonth() + 2, 0),\r\n      },\r\n    };\r\n  });\r\n\r\n  const {\r\n    data: tasks,\r\n    isLoading,\r\n    error,\r\n  } = useTasks({\r\n    teamId: currentTeam?.id || '',\r\n  });\r\n\r\n  const updateTask = useUpdateTask();\r\n\r\n  // 모달 상태 관리\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n\r\n  // 태스크 클릭 핸들러\r\n  const handleTaskClick = (task: GanttTask) => {\r\n    // GanttTask에서 원본 Task 찾기\r\n    const originalTask = tasks?.find(t => t.id === task.id);\r\n    if (originalTask) {\r\n      setEditingTask(originalTask);\r\n      setShowEditModal(true);\r\n    }\r\n  };\r\n\r\n  // 모달 닫기 핸들러\r\n  const handleEditModalClose = () => {\r\n    setEditingTask(null);\r\n    setShowEditModal(false);\r\n  };\r\n\r\n  // 태스크 업데이트 핸들러\r\n  const handleTaskSave = async (\r\n    taskId: string,\r\n    updateData: UpdateTaskInput\r\n  ) => {\r\n    try {\r\n      await updateTask.mutateAsync({ id: taskId, updates: updateData });\r\n    } catch (error) {\r\n      console.error('태스크 업데이트 실패:', error);\r\n      throw error; // EditTaskModal에서 에러 처리하도록 throw\r\n    }\r\n  };\r\n\r\n  // 진행률 계산 함수\r\n  const calculateTaskProgress = (\r\n    task: Task,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ) => {\r\n    // 완료된 태스크는 무조건 100%\r\n    if (task.status === 'DONE') {\r\n      return 100;\r\n    }\r\n\r\n    const now = new Date();\r\n    const totalDuration = endDate.getTime() - startDate.getTime();\r\n\r\n    // 아직 시작하지 않은 태스크\r\n    if (now < startDate) {\r\n      return 0;\r\n    }\r\n\r\n    // 기한이 지난 태스크\r\n    if (now > endDate) {\r\n      // 기존 progress가 있으면 그것을 사용, 없으면 100%\r\n      return task.progress || 100;\r\n    }\r\n\r\n    // 현재 진행 중인 태스크의 시간 기반 진행률 계산\r\n    const elapsedDuration = now.getTime() - startDate.getTime();\r\n    const timeBasedProgress = Math.round(\r\n      (elapsedDuration / totalDuration) * 100\r\n    );\r\n\r\n    // 기존 progress와 시간 기반 progress 중 더 높은 값 사용\r\n    return Math.max(task.progress || 0, timeBasedProgress);\r\n  };\r\n\r\n  // Task를 GanttTask로 변환\r\n  const ganttTasks = useMemo(() => {\r\n    if (!tasks) return [];\r\n\r\n    return tasks.map((task: Task): GanttTask => {\r\n      const startDate = task.startDate || task.createdAt;\r\n      const endDate =\r\n        task.endDate ||\r\n        task.dueDate ||\r\n        new Date(startDate.getTime() + 7 * 24 * 60 * 60 * 1000);\r\n      const isDelayed = task.dueDate\r\n        ? new Date() > task.dueDate && task.status !== 'DONE'\r\n        : false;\r\n      const isOverdue = task.dueDate ? new Date() > task.dueDate : false;\r\n\r\n      // 계산된 진행률 적용\r\n      const calculatedProgress = calculateTaskProgress(\r\n        task,\r\n        startDate,\r\n        endDate\r\n      );\r\n\r\n      // 디버깅 정보 (개발 시에만)\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log(`Progress calculation for: ${task.title}`, {\r\n          originalProgress: task.progress,\r\n          calculatedProgress,\r\n          status: task.status,\r\n          startDate: startDate.toISOString(),\r\n          endDate: endDate.toISOString(),\r\n          now: new Date().toISOString(),\r\n        });\r\n      }\r\n\r\n      return {\r\n        id: task.id,\r\n        title: task.title,\r\n        startDate,\r\n        endDate,\r\n        progress: calculatedProgress,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        assigneeId: task.assigneeId,\r\n        dependencies: task.dependencies || [],\r\n        isDelayed,\r\n        isOverdue,\r\n      };\r\n    });\r\n  }, [tasks]);\r\n\r\n  // 실제 주차 계산 함수 (ISO 8601 기준)\r\n  const getWeekNumber = (date: Date): { year: number; week: number } => {\r\n    const target = new Date(date);\r\n    const dayNr = (target.getDay() + 6) % 7; // 월요일을 0으로 하는 요일\r\n    target.setDate(target.getDate() - dayNr + 3); // 해당 주의 목요일로 이동\r\n    const jan4 = new Date(target.getFullYear(), 0, 4); // 1월 4일\r\n    const dayDiff = (target.getTime() - jan4.getTime()) / 86400000; // 일 단위 차이\r\n    const weekNum =\r\n      1 + Math.round((dayDiff - 3 + ((jan4.getDay() + 6) % 7)) / 7);\r\n    return { year: target.getFullYear(), week: weekNum };\r\n  };\r\n\r\n  // 날짜 범위를 시간 단위 경계에 정렬하는 유틸리티 함수들\r\n  const alignToWeekBoundary = (date: Date): Date => {\r\n    const result = new Date(date);\r\n    // 월요일(1)로 정렬, getDay()는 일요일=0, 월요일=1\r\n    const dayOfWeek = result.getDay();\r\n    const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // 일요일이면 6일 빼고, 나머지는 (요일-1)일 빼기\r\n    result.setDate(result.getDate() - daysToSubtract);\r\n    result.setHours(0, 0, 0, 0);\r\n    return result;\r\n  };\r\n\r\n  const alignToMonthBoundary = (date: Date): Date => {\r\n    const result = new Date(date);\r\n    result.setDate(1); // 해당 월 1일로 설정\r\n    result.setHours(0, 0, 0, 0);\r\n    return result;\r\n  };\r\n\r\n  const alignToQuarterBoundary = (date: Date): Date => {\r\n    const result = new Date(date);\r\n    const quarterStartMonth = Math.floor(result.getMonth() / 3) * 3;\r\n    result.setMonth(quarterStartMonth, 1); // 분기 첫 달 1일로 설정\r\n    result.setHours(0, 0, 0, 0);\r\n    return result;\r\n  };\r\n\r\n  const alignToYearBoundary = (date: Date): Date => {\r\n    const result = new Date(date);\r\n    result.setMonth(0, 1); // 해당 연도 1월 1일로 설정\r\n    result.setHours(0, 0, 0, 0);\r\n    return result;\r\n  };\r\n\r\n  // 시간 단위 정보 인터페이스\r\n  interface TimeUnitInfo {\r\n    date: Date;\r\n    label: string;\r\n    type: string;\r\n  }\r\n\r\n  // 공통 시간 단위 생성 함수 (라벨 포함)\r\n  const generateTimeUnits = (\r\n    start: Date,\r\n    end: Date,\r\n    zoomLevel: ZoomLevel\r\n  ): TimeUnitInfo[] => {\r\n    const units: TimeUnitInfo[] = [];\r\n\r\n    switch (zoomLevel) {\r\n      case ZoomLevel.DAY: {\r\n        // 일 단위: 정확한 날짜별로 표시\r\n        const dayStart = new Date(start);\r\n        let dayIterator = new Date(dayStart);\r\n\r\n        while (dayIterator <= end) {\r\n          units.push({\r\n            date: new Date(dayIterator),\r\n            label: format(dayIterator, 'MM/dd'),\r\n            type: 'day',\r\n          });\r\n          dayIterator = new Date(dayIterator);\r\n          dayIterator.setDate(dayIterator.getDate() + 1);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ZoomLevel.WEEK: {\r\n        // 주 단위: 실제 주차 기준으로 표시\r\n        const weekStart = alignToWeekBoundary(start);\r\n        let weekIterator = new Date(weekStart);\r\n\r\n        while (weekIterator <= end) {\r\n          const weekInfo = getWeekNumber(weekIterator);\r\n\r\n          units.push({\r\n            date: new Date(weekIterator),\r\n            label: `${weekInfo.year}년\\n${weekInfo.week}주`,\r\n            type: 'week',\r\n          });\r\n          weekIterator = new Date(weekIterator);\r\n          weekIterator.setDate(weekIterator.getDate() + 7);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ZoomLevel.MONTH: {\r\n        // 월 단위: 정확한 월의 1일 기준으로 표시\r\n        const monthStart = alignToMonthBoundary(start);\r\n        let monthIterator = new Date(monthStart);\r\n\r\n        while (monthIterator <= end) {\r\n          units.push({\r\n            date: new Date(monthIterator),\r\n            label: format(monthIterator, 'yyyy/MM'),\r\n            type: 'month',\r\n          });\r\n          monthIterator = new Date(monthIterator);\r\n          monthIterator.setMonth(monthIterator.getMonth() + 1);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ZoomLevel.QUARTER: {\r\n        // 분기 단위: 분기의 첫 달 1일 기준으로 표시\r\n        const quarterStart = alignToQuarterBoundary(start);\r\n        let quarterIterator = new Date(quarterStart);\r\n\r\n        while (quarterIterator <= end) {\r\n          const quarter = Math.floor(quarterIterator.getMonth() / 3) + 1;\r\n          units.push({\r\n            date: new Date(quarterIterator),\r\n            label: `${quarterIterator.getFullYear()} Q${quarter}`,\r\n            type: 'quarter',\r\n          });\r\n          quarterIterator = new Date(quarterIterator);\r\n          quarterIterator.setMonth(quarterIterator.getMonth() + 3);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ZoomLevel.YEAR: {\r\n        // 년 단위: 해당 년도 1월 1일 기준으로 표시\r\n        const yearStart = alignToYearBoundary(start);\r\n        let yearIterator = new Date(yearStart);\r\n\r\n        while (yearIterator <= end) {\r\n          units.push({\r\n            date: new Date(yearIterator),\r\n            label: format(yearIterator, 'yyyy'),\r\n            type: 'year',\r\n          });\r\n          yearIterator = new Date(yearIterator);\r\n          yearIterator.setFullYear(yearIterator.getFullYear() + 1);\r\n        }\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        // 기본값: 주 단위로 처리\r\n        const defaultWeekStart = alignToWeekBoundary(start);\r\n        let defaultIterator = new Date(defaultWeekStart);\r\n        while (defaultIterator <= end) {\r\n          units.push({\r\n            date: new Date(defaultIterator),\r\n            label: `${format(defaultIterator, 'MM/dd')}주`,\r\n            type: 'week',\r\n          });\r\n          defaultIterator = new Date(defaultIterator);\r\n          defaultIterator.setDate(defaultIterator.getDate() + 7);\r\n        }\r\n      }\r\n    }\r\n\r\n    return units;\r\n  };\r\n\r\n  // 실제 시간 단위 개수를 계산하는 함수 (공통 함수 사용)\r\n  const calculateActualTimeUnits = (\r\n    start: Date,\r\n    end: Date,\r\n    zoomLevel: ZoomLevel\r\n  ): number => {\r\n    return generateTimeUnits(start, end, zoomLevel).length;\r\n  };\r\n\r\n  // 차트 최소 너비 계산 (실제 시간 단위 기간 사용)\r\n  const chartMinWidth = useMemo(() => {\r\n    const { start, end } = config.dateRange;\r\n\r\n    // 실제 시간 단위 개수 계산\r\n    const actualUnits = calculateActualTimeUnits(start, end, config.zoomLevel);\r\n\r\n    // 각 시간 단위당 최소 너비 설정 (줌 레벨별로 다르게)\r\n    let minWidthPerUnit = 60;\r\n    switch (config.zoomLevel) {\r\n      case ZoomLevel.DAY: {\r\n        minWidthPerUnit = 50; // 일 단위는 좁게\r\n        break;\r\n      }\r\n      case ZoomLevel.WEEK: {\r\n        minWidthPerUnit = 80; // 주 단위는 중간\r\n        break;\r\n      }\r\n      case ZoomLevel.MONTH: {\r\n        minWidthPerUnit = 100; // 월 단위는 넓게\r\n        break;\r\n      }\r\n      case ZoomLevel.QUARTER: {\r\n        minWidthPerUnit = 120; // 분기 단위는 더 넓게\r\n        break;\r\n      }\r\n      case ZoomLevel.YEAR: {\r\n        minWidthPerUnit = 150; // 년 단위는 가장 넓게\r\n        break;\r\n      }\r\n    }\r\n\r\n    return Math.max(800, actualUnits * minWidthPerUnit);\r\n  }, [config.dateRange, config.zoomLevel]);\r\n\r\n  const handleZoomChange = (zoomLevel: ZoomLevel) => {\r\n    const now = getCurrentDate(); // 실시간 현재 날짜 사용\r\n    let start: Date;\r\n    let end: Date;\r\n\r\n    // 줌 레벨에 따라 적절한 날짜 범위 설정 (경계에 정렬)\r\n    switch (zoomLevel) {\r\n      case ZoomLevel.DAY: {\r\n        // 현재 월 기준으로 이전달부터 다음달까지 (3개월 범위)\r\n        start = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n        end = new Date(now.getFullYear(), now.getMonth() + 2, 0); // 다음다음달 0일 = 다음달 마지막 날\r\n        break;\r\n      }\r\n\r\n      case ZoomLevel.WEEK: {\r\n        // 3주 전 월요일부터 9주 후 일요일까지\r\n        const weekStart = new Date(now);\r\n        weekStart.setDate(now.getDate() - 21); // 3주 전\r\n        start = alignToWeekBoundary(weekStart);\r\n\r\n        const weekEnd = new Date(now);\r\n        weekEnd.setDate(now.getDate() + 63); // 9주 후\r\n        const alignedWeekEnd = alignToWeekBoundary(weekEnd);\r\n        end = new Date(alignedWeekEnd);\r\n        end.setDate(end.getDate() + 6); // 해당 주의 일요일까지\r\n        end.setHours(23, 59, 59, 999);\r\n        break;\r\n      }\r\n\r\n      case ZoomLevel.MONTH: {\r\n        // 2개월 전 1일부터 10개월 후 말일까지\r\n        const monthStart = new Date(now);\r\n        monthStart.setMonth(now.getMonth() - 2);\r\n        start = alignToMonthBoundary(monthStart);\r\n\r\n        const monthEnd = new Date(now);\r\n        monthEnd.setMonth(now.getMonth() + 10);\r\n        end = alignToMonthBoundary(monthEnd);\r\n        end.setMonth(end.getMonth() + 1); // 다음 달로 이동\r\n        end.setDate(0); // 이전 달 마지막 날\r\n        end.setHours(23, 59, 59, 999);\r\n        break;\r\n      }\r\n\r\n      case ZoomLevel.QUARTER: {\r\n        // 2분기 전부터 6분기 후까지\r\n        const quarterStart = new Date(now);\r\n        quarterStart.setMonth(now.getMonth() - 6); // 6개월 전\r\n        start = alignToQuarterBoundary(quarterStart);\r\n\r\n        const quarterEnd = new Date(now);\r\n        quarterEnd.setMonth(now.getMonth() + 18); // 18개월 후\r\n        end = alignToQuarterBoundary(quarterEnd);\r\n        end.setMonth(end.getMonth() + 3); // 다음 분기로 이동\r\n        end.setDate(0); // 이전 달 마지막 날\r\n        end.setHours(23, 59, 59, 999);\r\n        break;\r\n      }\r\n\r\n      case ZoomLevel.YEAR: {\r\n        // 1년 전부터 4년 후까지\r\n        const yearStart = new Date(now);\r\n        yearStart.setFullYear(now.getFullYear() - 1);\r\n        start = alignToYearBoundary(yearStart);\r\n\r\n        const yearEnd = new Date(now);\r\n        yearEnd.setFullYear(now.getFullYear() + 4);\r\n        end = alignToYearBoundary(yearEnd);\r\n        end.setFullYear(end.getFullYear() + 1); // 다음 년도로 이동\r\n        end.setDate(0); // 작년 12월 31일\r\n        end.setHours(23, 59, 59, 999);\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        // 기본값: 주 단위 처리와 동일\r\n        const defaultStart = new Date(now);\r\n        defaultStart.setDate(now.getDate() - 30);\r\n        start = alignToWeekBoundary(defaultStart);\r\n\r\n        const defaultEnd = new Date(now);\r\n        defaultEnd.setDate(now.getDate() + 60);\r\n        const alignedDefaultEnd = alignToWeekBoundary(defaultEnd);\r\n        end = new Date(alignedDefaultEnd);\r\n        end.setDate(end.getDate() + 6);\r\n        end.setHours(23, 59, 59, 999);\r\n      }\r\n    }\r\n\r\n    setConfig(prev => ({\r\n      ...prev,\r\n      zoomLevel,\r\n      dateRange: { start, end },\r\n    }));\r\n  };\r\n\r\n  // 스크롤 동기화 - 차트 영역에서 타임라인으로\r\n  const handleChartScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {\r\n    const scrollLeft = e.currentTarget.scrollLeft;\r\n    if (timelineRef.current && timelineRef.current.scrollLeft !== scrollLeft) {\r\n      timelineRef.current.scrollLeft = scrollLeft;\r\n    }\r\n  }, []);\r\n\r\n  // 스크롤 동기화 - 타임라인에서 차트 영역으로\r\n  const handleTimelineScroll = useCallback(\r\n    (e: React.UIEvent<HTMLDivElement>) => {\r\n      const scrollLeft = e.currentTarget.scrollLeft;\r\n      if (\r\n        scrollContainerRef.current &&\r\n        scrollContainerRef.current.scrollLeft !== scrollLeft\r\n      ) {\r\n        scrollContainerRef.current.scrollLeft = scrollLeft;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  // 오늘 날짜로 이동 (시간 단위 기반 정확한 계산)\r\n  const scrollToToday = useCallback(() => {\r\n    const today = getCurrentDate(); // 실시간 현재 날짜 사용\r\n    const { start, end } = config.dateRange;\r\n\r\n    // 타임라인과 동일한 시간 단위 생성으로 정확한 위치 계산\r\n    const timeUnits = generateTimeUnits(start, end, config.zoomLevel);\r\n    const totalMs = end.getTime() - start.getTime();\r\n\r\n    // 시간 단위 기반으로 오늘 날짜의 위치 계산\r\n    const calculateTodayPosition = (): number => {\r\n      if (today <= start) return 0;\r\n      if (today >= end) return 100;\r\n\r\n      let cumulativePosition = 0;\r\n\r\n      for (let i = 0; i < timeUnits.length; i++) {\r\n        const currentUnit = timeUnits[i];\r\n        const nextUnit = timeUnits[i + 1];\r\n        const unitEndDate = nextUnit ? nextUnit.date : end;\r\n\r\n        // 현재 시간 단위의 실제 기간과 화면상 너비 비율 계산\r\n        const unitDurationMs =\r\n          unitEndDate.getTime() - currentUnit.date.getTime();\r\n        const unitWidthPercentage = (unitDurationMs / totalMs) * 100;\r\n\r\n        // 오늘 날짜가 현재 시간 단위 내에 있는지 확인\r\n        if (today >= currentUnit.date && today < unitEndDate) {\r\n          // 시간 단위 내에서의 상대적 위치 계산\r\n          const relativePositionMs =\r\n            today.getTime() - currentUnit.date.getTime();\r\n          const relativePositionPercentage =\r\n            (relativePositionMs / unitDurationMs) * unitWidthPercentage;\r\n          return cumulativePosition + relativePositionPercentage;\r\n        }\r\n\r\n        cumulativePosition += unitWidthPercentage;\r\n      }\r\n\r\n      return cumulativePosition;\r\n    };\r\n\r\n    const todayPositionPercentage = calculateTodayPosition();\r\n\r\n    if (scrollContainerRef.current) {\r\n      const scrollWidth =\r\n        scrollContainerRef.current.scrollWidth -\r\n        scrollContainerRef.current.clientWidth;\r\n      const containerWidth = scrollContainerRef.current.clientWidth;\r\n\r\n      // 오늘 날짜를 화면 중앙에 위치시키기 위한 스크롤 위치 계산\r\n      const todayPixelPosition =\r\n        (todayPositionPercentage / 100) *\r\n        scrollContainerRef.current.scrollWidth;\r\n      const targetScrollLeft = todayPixelPosition - containerWidth / 2;\r\n\r\n      scrollContainerRef.current.scrollTo({\r\n        left: Math.max(0, Math.min(scrollWidth, targetScrollLeft)),\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }, [config.dateRange, config.zoomLevel]);\r\n\r\n  const renderTimeline = () => {\r\n    const { start, end } = config.dateRange;\r\n\r\n    // 공통 함수를 사용하여 시간 단위 생성\r\n    const timeUnits = generateTimeUnits(start, end, config.zoomLevel);\r\n\r\n    const totalMs = end.getTime() - start.getTime();\r\n\r\n    // 디버깅 정보 (개발 시에만)\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('Timeline render:', {\r\n        rangeStart: start.toISOString(),\r\n        rangeEnd: end.toISOString(),\r\n        totalMs,\r\n        timeUnitsCount: timeUnits.length,\r\n        chartMinWidth,\r\n        zoomLevel: config.zoomLevel,\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"border-b-2 border-gray-300 dark:border-dark-400 bg-gray-100 dark:bg-dark-200\">\r\n        <div className=\"flex\" style={{ minWidth: `${chartMinWidth}px` }}>\r\n          {timeUnits.map((unit, i) => {\r\n            // 다음 시간 단위까지의 실제 기간 계산\r\n            const nextUnit = timeUnits[i + 1];\r\n            const unitEndDate = nextUnit ? nextUnit.date : end;\r\n            const unitDurationMs = unitEndDate.getTime() - unit.date.getTime();\r\n            const widthPercentage = (unitDurationMs / totalMs) * 100;\r\n\r\n            return (\r\n              <div\r\n                key={i}\r\n                className=\"text-sm font-semibold text-gray-700 dark:text-dark-700 border-r-2 border-gray-300 dark:border-dark-400 p-2 text-center bg-gradient-to-b from-gray-50 to-gray-100 dark:from-dark-100 dark:to-dark-200\"\r\n                style={{\r\n                  width: `${widthPercentage}%`,\r\n                  minWidth: `${widthPercentage}%`,\r\n                  flexShrink: 0,\r\n                }}\r\n              >\r\n                <div className=\"font-bold text-primary-600 dark:text-primary-400 text-xs whitespace-pre-line\">\r\n                  {unit.label}\r\n                </div>\r\n                {unit.type === 'day' && (\r\n                  <div className=\"text-xs text-gray-500 dark:text-dark-500 mt-1\">\r\n                    {format(unit.date, 'E')}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderTaskBar = (task: GanttTask) => {\r\n    const { start, end } = config.dateRange;\r\n\r\n    // 타임라인과 동일한 시간 단위 생성\r\n    const timeUnits = generateTimeUnits(start, end, config.zoomLevel);\r\n    const totalMs = end.getTime() - start.getTime();\r\n\r\n    // 시간 단위 기반 위치 계산 함수\r\n    const calculateTimeUnitBasedPosition = (targetDate: Date): number => {\r\n      if (targetDate <= start) return 0;\r\n      if (targetDate >= end) return 100;\r\n\r\n      let cumulativePosition = 0;\r\n\r\n      for (let i = 0; i < timeUnits.length; i++) {\r\n        const currentUnit = timeUnits[i];\r\n        const nextUnit = timeUnits[i + 1];\r\n        const unitEndDate = nextUnit ? nextUnit.date : end;\r\n\r\n        // 현재 시간 단위의 실제 기간과 화면상 너비 비율 계산\r\n        const unitDurationMs =\r\n          unitEndDate.getTime() - currentUnit.date.getTime();\r\n        const unitWidthPercentage = (unitDurationMs / totalMs) * 100;\r\n\r\n        // 타겟 날짜가 현재 시간 단위 내에 있는지 확인\r\n        if (targetDate >= currentUnit.date && targetDate < unitEndDate) {\r\n          // 시간 단위 내에서의 상대적 위치 계산\r\n          const relativePositionMs =\r\n            targetDate.getTime() - currentUnit.date.getTime();\r\n          const relativePositionPercentage =\r\n            (relativePositionMs / unitDurationMs) * unitWidthPercentage;\r\n          return cumulativePosition + relativePositionPercentage;\r\n        }\r\n\r\n        cumulativePosition += unitWidthPercentage;\r\n      }\r\n\r\n      return cumulativePosition;\r\n    };\r\n\r\n    // 시간 단위 기반으로 정확한 위치와 크기 계산\r\n    const leftPosition = calculateTimeUnitBasedPosition(task.startDate);\r\n    const rightPosition = calculateTimeUnitBasedPosition(task.endDate);\r\n    const left = Math.max(0, leftPosition);\r\n    const width = Math.max(0.5, rightPosition - leftPosition); // 최소 0.5% 너비 보장\r\n\r\n    // 디버깅 정보 (개발 시에만)\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`Task: ${task.title} (Time-Unit Based)`, {\r\n        startDate: task.startDate.toISOString(),\r\n        endDate: task.endDate.toISOString(),\r\n        rangeStart: start.toISOString(),\r\n        rangeEnd: end.toISOString(),\r\n        zoomLevel: config.zoomLevel,\r\n        timeUnitsCount: timeUnits.length,\r\n        leftPosition: leftPosition.toFixed(2),\r\n        rightPosition: rightPosition.toFixed(2),\r\n        left: left.toFixed(2),\r\n        width: width.toFixed(2),\r\n      });\r\n    }\r\n\r\n    // 태스크가 범위를 완전히 벗어나는 경우 처리\r\n    if (task.endDate < start || task.startDate > end) {\r\n      return null; // 범위 밖의 태스크는 표시하지 않음\r\n    }\r\n\r\n    // 부분적으로 보이는 태스크의 경우 보정\r\n    const visibleLeft = Math.max(0, left);\r\n    const visibleRight = Math.min(100, left + width);\r\n    const visibleWidth = Math.max(0.5, visibleRight - visibleLeft);\r\n\r\n    const getStatusColor = (status: string) => {\r\n      switch (status) {\r\n        case 'TODO':\r\n          return 'bg-pink-400 dark:bg-pink-500';\r\n        case 'IN_PROGRESS':\r\n          return 'bg-blue-500 dark:bg-blue-600';\r\n        case 'REVIEW':\r\n          return 'bg-yellow-500 dark:bg-yellow-600';\r\n        case 'DONE':\r\n          return 'bg-green-500 dark:bg-green-600';\r\n        default:\r\n          return 'bg-gray-400 dark:bg-gray-500';\r\n      }\r\n    };\r\n\r\n    const getPriorityBorder = (priority: string) => {\r\n      switch (priority) {\r\n        case 'LOW':\r\n          return 'border-l-4 border-l-gray-300';\r\n        case 'MEDIUM':\r\n          return 'border-l-4 border-l-blue-400';\r\n        case 'HIGH':\r\n          return 'border-l-4 border-l-orange-400';\r\n        case 'URGENT':\r\n          return 'border-l-4 border-l-red-500';\r\n        default:\r\n          return 'border-l-4 border-l-gray-300';\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"absolute inset-0\">\r\n        <div\r\n          className={`absolute h-16 rounded shadow-sm ${getStatusColor(task.status)} ${getPriorityBorder(task.priority)} ${\r\n            task.isDelayed ? 'ring-2 ring-red-500 ring-opacity-50' : ''\r\n          } transition-all duration-200 hover:shadow-md cursor-pointer group`}\r\n          style={{\r\n            left: `${visibleLeft}%`,\r\n            width: `${visibleWidth}%`,\r\n            top: '50%',\r\n            transform: 'translateY(-50%)', // 수직 중앙 정렬\r\n          }}\r\n          title={`${task.title} (${format(task.startDate, 'yyyy/MM/dd')} - ${format(task.endDate, 'yyyy/MM/dd')})`}\r\n          onClick={() => handleTaskClick(task)}\r\n        >\r\n          {/* 진행률 표시 */}\r\n          {config.showProgress && task.progress > 0 && (\r\n            <div\r\n              className=\"absolute top-0 left-0 h-full bg-white bg-opacity-30 rounded-l\"\r\n              style={{ width: `${task.progress}%` }}\r\n            />\r\n          )}\r\n\r\n          <div className=\"flex items-center justify-between px-2 h-full text-white text-xs font-medium\">\r\n            <span className=\"truncate flex-1\">{task.title}</span>\r\n            <div className=\"flex items-center gap-1\">\r\n              {config.showProgress && task.progress > 0 && (\r\n                <span className=\"text-xs bg-black bg-opacity-30 px-1 rounded\">\r\n                  {task.progress}%\r\n                </span>\r\n              )}\r\n              <span className=\"text-xs bg-black bg-opacity-50 px-1 rounded\">\r\n                {format(task.startDate, 'MM/dd')}~\r\n                {format(task.endDate, 'MM/dd')}\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 호버 시 상세 정보 */}\r\n          <div className=\"absolute bottom-full left-0 mb-2 bg-gray-900 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-10 whitespace-nowrap\">\r\n            <div>{task.title}</div>\r\n            <div>\r\n              기간: {format(task.startDate, 'MM/dd')} -{' '}\r\n              {format(task.endDate, 'MM/dd')}\r\n            </div>\r\n            <div>상태: {task.status}</div>\r\n            <div>진행률: {task.progress}%</div>\r\n            {task.isDelayed && <div className=\"text-red-400\">지연됨</div>}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 의존성 표시 */}\r\n        {config.showDependencies &&\r\n          task.dependencies &&\r\n          task.dependencies.length > 0 && (\r\n            <div className=\"absolute inset-0 pointer-events-none\">\r\n              {task.dependencies.map(depId => {\r\n                const depTask = ganttTasks.find(t => t.id === depId);\r\n                if (!depTask) return null;\r\n\r\n                // 의존 태스크의 종료 지점 계산\r\n                const depEndMs = depTask.endDate.getTime() - start.getTime();\r\n                const depEndLeft = Math.max(0, (depEndMs / totalMs) * 100);\r\n\r\n                return (\r\n                  <svg\r\n                    key={depId}\r\n                    className=\"absolute inset-0 w-full h-full\"\r\n                    style={{ pointerEvents: 'none' }}\r\n                  >\r\n                    <defs>\r\n                      <marker\r\n                        id={`arrowhead-${depId}`}\r\n                        markerWidth=\"10\"\r\n                        markerHeight=\"7\"\r\n                        refX=\"9\"\r\n                        refY=\"3.5\"\r\n                        orient=\"auto\"\r\n                      >\r\n                        <polygon\r\n                          points=\"0 0, 10 3.5, 0 7\"\r\n                          fill=\"#ef4444\"\r\n                          className=\"opacity-70\"\r\n                        />\r\n                      </marker>\r\n                    </defs>\r\n                    <line\r\n                      x1={`${depEndLeft}%`}\r\n                      y1=\"50%\"\r\n                      x2={`${visibleLeft}%`}\r\n                      y2=\"50%\"\r\n                      stroke=\"#ef4444\"\r\n                      strokeWidth=\"2\"\r\n                      strokeDasharray=\"4,2\"\r\n                      markerEnd={`url(#arrowhead-${depId})`}\r\n                      className=\"opacity-70\"\r\n                    />\r\n                  </svg>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"p-4 text-gray-900 dark:text-dark-900\">로딩 중...</div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"p-4 text-red-500 dark:text-red-400\">\r\n        오류가 발생했습니다: {error.message}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-dark-100 rounded-lg shadow p-6 transition-colors duration-200\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-dark-900\">\r\n          {t('view.gantt')}\r\n        </h2>\r\n\r\n        <div className=\"flex space-x-2\">\r\n          <button\r\n            onClick={scrollToToday}\r\n            className=\"px-3 py-1 bg-primary-600 hover:bg-primary-700 text-white rounded text-sm transition-colors duration-200 font-medium\"\r\n            title=\"오늘 날짜로 이동\"\r\n          >\r\n            오늘\r\n          </button>\r\n\r\n          <select\r\n            value={config.zoomLevel}\r\n            onChange={e => handleZoomChange(e.target.value as ZoomLevel)}\r\n            className=\"px-3 py-1 border border-gray-300 dark:border-dark-300 bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 rounded text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 transition-colors duration-200\"\r\n          >\r\n            <option value={ZoomLevel.DAY}>일</option>\r\n            <option value={ZoomLevel.WEEK}>주</option>\r\n            <option value={ZoomLevel.MONTH}>월</option>\r\n            <option value={ZoomLevel.QUARTER}>분기</option>\r\n            <option value={ZoomLevel.YEAR}>년</option>\r\n          </select>\r\n\r\n          <label className=\"flex items-center space-x-2 text-sm text-gray-900 dark:text-dark-900\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={config.showDependencies}\r\n              onChange={e =>\r\n                setConfig(prev => ({\r\n                  ...prev,\r\n                  showDependencies: e.target.checked,\r\n                }))\r\n              }\r\n              className=\"rounded border-gray-300 dark:border-dark-300 text-primary-600 focus:ring-primary-500\"\r\n            />\r\n            <span>의존성 표시</span>\r\n          </label>\r\n\r\n          <label className=\"flex items-center space-x-2 text-sm text-gray-900 dark:text-dark-900\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={config.showProgress}\r\n              onChange={e =>\r\n                setConfig(prev => ({ ...prev, showProgress: e.target.checked }))\r\n              }\r\n              className=\"rounded border-gray-300 dark:border-dark-300 text-primary-600 focus:ring-primary-500\"\r\n            />\r\n            <span>진행률 표시</span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"border-2 border-gray-300 dark:border-dark-400 rounded-lg\">\r\n        {/* 헤더 영역 */}\r\n        <div className=\"flex bg-gray-200 dark:bg-dark-300 border-b-2 border-gray-300 dark:border-dark-400\">\r\n          {/* 태스크 목록 헤더 */}\r\n          <div className=\"w-96 flex-shrink-0 p-4 border-r-2 border-gray-300 dark:border-dark-400 bg-gradient-to-r from-gray-100 to-gray-200 dark:from-dark-200 dark:to-dark-300\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <h3 className=\"text-lg font-bold text-gray-800 dark:text-dark-800\">\r\n                📋 태스크 목록\r\n              </h3>\r\n              <div className=\"text-sm text-gray-600 dark:text-dark-600\">\r\n                총 {ganttTasks.length}개\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* 날짜 헤더 */}\r\n          <div\r\n            className=\"flex-1 overflow-x-auto\"\r\n            ref={timelineRef}\r\n            onScroll={handleTimelineScroll}\r\n          >\r\n            {renderTimeline()}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 컨텐츠 영역 */}\r\n        <div className=\"flex\">\r\n          {/* 왼쪽: 태스크 목록 */}\r\n          <div className=\"w-96 flex-shrink-0 border-r-2 border-gray-300 dark:border-dark-400 bg-gray-50 dark:bg-dark-100\">\r\n            {ganttTasks.length === 0 ? (\r\n              <div className=\"p-8 text-center text-gray-500 dark:text-dark-500\">\r\n                태스크가 없습니다\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                {ganttTasks.map((task, index) => (\r\n                  <div\r\n                    key={task.id}\r\n                    className={`border-b border-gray-200 dark:border-dark-300 p-4 flex items-center ${\r\n                      index % 2 === 0\r\n                        ? 'bg-white dark:bg-dark-50'\r\n                        : 'bg-gray-100 dark:bg-dark-100'\r\n                    } hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors duration-150`}\r\n                    style={{ height: '140px' }}\r\n                  >\r\n                    <div className=\"flex items-start justify-between h-full\">\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-center gap-2 mb-2\">\r\n                          <div\r\n                            className={`w-4 h-4 rounded-full flex-shrink-0 ${\r\n                              task.status === 'TODO'\r\n                                ? 'bg-pink-400'\r\n                                : task.status === 'IN_PROGRESS'\r\n                                  ? 'bg-blue-500'\r\n                                  : task.status === 'REVIEW'\r\n                                    ? 'bg-yellow-500'\r\n                                    : 'bg-green-500'\r\n                            }`}\r\n                          />\r\n                          <span className=\"text-sm font-bold text-gray-900 dark:text-dark-900 break-words\">\r\n                            {task.title}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-600 dark:text-dark-600 mb-2 space-y-1\">\r\n                          <div>\r\n                            📅 시작: {format(task.startDate, 'yyyy/MM/dd')}\r\n                          </div>\r\n                          <div>\r\n                            ⏰ 마감: {format(task.endDate, 'yyyy/MM/dd')}\r\n                          </div>\r\n                          <div>👤 담당: {task.assigneeId}</div>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2 text-xs flex-wrap\">\r\n                          <span\r\n                            className={`px-2 py-1 rounded text-white font-medium ${\r\n                              task.priority === 'LOW'\r\n                                ? 'bg-gray-400'\r\n                                : task.priority === 'MEDIUM'\r\n                                  ? 'bg-blue-500'\r\n                                  : task.priority === 'HIGH'\r\n                                    ? 'bg-orange-500'\r\n                                    : 'bg-red-500'\r\n                            }`}\r\n                          >\r\n                            {task.priority}\r\n                          </span>\r\n                          <span\r\n                            className={`px-2 py-1 rounded text-white font-medium ${\r\n                              task.status === 'TODO'\r\n                                ? 'bg-pink-500'\r\n                                : task.status === 'IN_PROGRESS'\r\n                                  ? 'bg-blue-600'\r\n                                  : task.status === 'REVIEW'\r\n                                    ? 'bg-yellow-600'\r\n                                    : 'bg-green-600'\r\n                            }`}\r\n                          >\r\n                            {task.status}\r\n                          </span>\r\n                          {task.isDelayed && (\r\n                            <span className=\"px-2 py-1 bg-red-100 text-red-600 dark:bg-red-900/30 dark:text-red-400 rounded font-medium\">\r\n                              지연\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-right ml-3\">\r\n                        <div className=\"text-xl font-bold text-primary-600 dark:text-primary-400\">\r\n                          {task.progress}%\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 dark:text-dark-500\">\r\n                          진행률\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* 오른쪽: 간트 차트 */}\r\n          <div\r\n            className=\"flex-1 overflow-x-auto\"\r\n            ref={scrollContainerRef}\r\n            onScroll={handleChartScroll}\r\n          >\r\n            {/* 태스크 바들 */}\r\n            <div\r\n              className=\"relative bg-white dark:bg-dark-50\"\r\n              style={{ minWidth: `${chartMinWidth}px` }}\r\n            >\r\n              {ganttTasks.length === 0 ? (\r\n                <div className=\"p-8 text-center text-gray-400 dark:text-dark-400\">\r\n                  태스크를 추가해주세요\r\n                </div>\r\n              ) : (\r\n                ganttTasks.map((task, index) => (\r\n                  <div\r\n                    key={task.id}\r\n                    className={`relative border-b border-gray-200 dark:border-dark-300 ${\r\n                      index % 2 === 0\r\n                        ? 'bg-white dark:bg-dark-50'\r\n                        : 'bg-gray-50 dark:bg-dark-100'\r\n                    } hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors duration-150`}\r\n                    style={{ height: '140px' }}\r\n                  >\r\n                    {renderTaskBar(task)}\r\n                  </div>\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 태스크 편집 모달 */}\r\n      <EditTaskModal\r\n        isOpen={showEditModal}\r\n        task={editingTask}\r\n        onClose={handleEditModalClose}\r\n        onSave={handleTaskSave}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GanttView;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\InviteMemberModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Crown' is defined but never used.",
        "line": 2,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 34
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Crown' is defined but never used.",
        "line": 2,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 34
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 88,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 88,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2257, 2291], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2495, 2498], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2495, 2498], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport { X, Mail, UserPlus, Crown, Shield, Edit, Eye } from 'lucide-react';\r\nimport { Team, TeamRole, InviteTeamMemberInput } from '../types/team';\r\nimport { useTeams } from '../hooks/useTeams';\r\n\r\ninterface InviteMemberModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  team: Team;\r\n}\r\n\r\nconst roleOptions = [\r\n  {\r\n    value: TeamRole.VIEWER,\r\n    label: '보기 전용',\r\n    description: '작업을 보고 댓글을 달 수 있습니다',\r\n    icon: Eye,\r\n    color: 'text-gray-600',\r\n  },\r\n  {\r\n    value: TeamRole.EDITOR,\r\n    label: '편집자',\r\n    description: '작업을 생성, 수정, 삭제할 수 있습니다',\r\n    icon: Edit,\r\n    color: 'text-blue-600',\r\n  },\r\n  {\r\n    value: TeamRole.ADMIN,\r\n    label: '관리자',\r\n    description: '팀 설정과 멤버를 관리할 수 있습니다',\r\n    icon: Shield,\r\n    color: 'text-purple-600',\r\n  },\r\n];\r\n\r\nexport const InviteMemberModal: React.FC<InviteMemberModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  team,\r\n}) => {\r\n  const { inviteTeamMember } = useTeams();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [formData, setFormData] = useState<InviteTeamMemberInput>({\r\n    teamId: team.id,\r\n    email: '',\r\n    role: team.settings.defaultMemberRole,\r\n    message: '',\r\n  });\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    // Email validation\r\n    if (!formData.email.trim()) {\r\n      newErrors.email = '이메일을 입력해주세요';\r\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\r\n      newErrors.email = '올바른 이메일 형식을 입력해주세요';\r\n    }\r\n\r\n    // Message validation\r\n    if (formData.message && formData.message.length > 500) {\r\n      newErrors.message = '메시지는 500자 이하여야 합니다';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      await inviteTeamMember(formData);\r\n      onClose();\r\n      // Reset form\r\n      setFormData({\r\n        teamId: team.id,\r\n        email: '',\r\n        role: team.settings.defaultMemberRole,\r\n        message: '',\r\n      });\r\n      setErrors({});\r\n    } catch (error) {\r\n      console.error('멤버 초대 실패:', error);\r\n      setErrors({ submit: '멤버 초대에 실패했습니다. 다시 시도해주세요.' });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (\r\n    field: keyof InviteTeamMemberInput,\r\n    value: any\r\n  ) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n\r\n    // Clear error when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [field]: '',\r\n      }));\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-md\">\r\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2\">\r\n            <UserPlus size={20} />팀 멤버 초대\r\n          </h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n          >\r\n            <X size={24} />\r\n          </button>\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\r\n          {/* 팀 정보 */}\r\n          <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg\">\r\n            <h3 className=\"font-medium text-blue-900 dark:text-blue-100 mb-1\">\r\n              {team.name}\r\n            </h3>\r\n            <p className=\"text-sm text-blue-700 dark:text-blue-300\">\r\n              현재 멤버 {team.memberCount}명 / 최대 {team.settings.maxMembers}명\r\n            </p>\r\n          </div>\r\n\r\n          {/* 이메일 입력 */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n              초대할 이메일 주소 *\r\n            </label>\r\n            <div className=\"relative\">\r\n              <Mail\r\n                size={18}\r\n                className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                value={formData.email}\r\n                onChange={e => handleInputChange('email', e.target.value)}\r\n                className={`w-full pl-10 pr-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 ${\r\n                  errors.email\r\n                    ? 'border-red-500'\r\n                    : 'border-gray-300 dark:border-gray-600'\r\n                }`}\r\n                placeholder=\"example@company.com\"\r\n                disabled={isLoading}\r\n              />\r\n            </div>\r\n            {errors.email && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.email}</p>\r\n            )}\r\n          </div>\r\n\r\n          {/* 역할 선택 */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\r\n              역할 선택\r\n            </label>\r\n            <div className=\"space-y-3\">\r\n              {roleOptions.map(option => {\r\n                const Icon = option.icon;\r\n                return (\r\n                  <label\r\n                    key={option.value}\r\n                    className={`flex items-start gap-3 p-3 border rounded-lg cursor-pointer transition-colors ${\r\n                      formData.role === option.value\r\n                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\r\n                        : 'border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700'\r\n                    }`}\r\n                  >\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"role\"\r\n                      value={option.value}\r\n                      checked={formData.role === option.value}\r\n                      onChange={e =>\r\n                        handleInputChange('role', e.target.value as TeamRole)\r\n                      }\r\n                      className=\"mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300\"\r\n                      disabled={isLoading}\r\n                    />\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <Icon size={16} className={option.color} />\r\n                        <span className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                          {option.label}\r\n                        </span>\r\n                      </div>\r\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                        {option.description}\r\n                      </p>\r\n                    </div>\r\n                  </label>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          {/* 초대 메시지 */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n              초대 메시지 (선택사항)\r\n            </label>\r\n            <textarea\r\n              value={formData.message}\r\n              onChange={e => handleInputChange('message', e.target.value)}\r\n              rows={3}\r\n              className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100 ${\r\n                errors.message\r\n                  ? 'border-red-500'\r\n                  : 'border-gray-300 dark:border-gray-600'\r\n              }`}\r\n              placeholder=\"팀에 함께하게 되어 기쁩니다! 궁금한 점이 있으면 언제든지 연락해주세요.\"\r\n              disabled={isLoading}\r\n            />\r\n            {errors.message && (\r\n              <p className=\"text-red-500 text-sm mt-1\">{errors.message}</p>\r\n            )}\r\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n              {formData.message ? formData.message.length : 0}/500자\r\n            </p>\r\n          </div>\r\n\r\n          {/* 초대 제한 안내 */}\r\n          {team.memberCount >= team.settings.maxMembers && (\r\n            <div className=\"p-3 bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-700 rounded-lg\">\r\n              <p className=\"text-orange-800 dark:text-orange-200 text-sm\">\r\n                ⚠️ 팀 멤버 수가 최대 제한에 도달했습니다. 새 멤버를 초대하려면\r\n                팀 설정에서 최대 멤버 수를 늘리거나 기존 멤버를 제거해주세요.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* 오류 메시지 */}\r\n          {errors.submit && (\r\n            <div className=\"p-3 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-700 rounded-lg\">\r\n              <p className=\"text-red-600 dark:text-red-400 text-sm\">\r\n                {errors.submit}\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* 버튼 */}\r\n          <div className=\"flex justify-end gap-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClose}\r\n              className=\"px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\r\n              disabled={isLoading}\r\n            >\r\n              취소\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n              disabled={\r\n                isLoading || team.memberCount >= team.settings.maxMembers\r\n              }\r\n            >\r\n              {isLoading ? '초대 중...' : '초대 보내기'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\KanbanView.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used.",
        "line": 29,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 15
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used.",
        "line": 29,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 15
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 174,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 174,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4838, 4878], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'handleDragHandleClick' is assigned a value but never used.",
        "line": 194,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 194,
        "endColumn": 30
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'handleDragHandleClick' is assigned a value but never used.",
        "line": 194,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 194,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useMemo } from 'react';\r\nimport {\r\n  DragDropContext,\r\n  Droppable,\r\n  Draggable,\r\n  DropResult,\r\n} from 'react-beautiful-dnd';\r\nimport { useTasks, useUpdateTask } from '../hooks/useTasks';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useTeams } from '../hooks/useTeams';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport type { Task } from '@almus/shared-types';\r\nimport { TaskStatus, TaskPriority } from '@almus/shared-types';\r\nimport { createToast } from '../utils/toast';\r\nimport CreateTaskForm from './CreateTaskForm';\r\n\r\ninterface KanbanViewProps {\r\n  className?: string;\r\n}\r\n\r\ninterface Column {\r\n  id: TaskStatus;\r\n  title: string;\r\n  color: string;\r\n  wipLimit?: number;\r\n}\r\n\r\nconst KanbanView: React.FC<KanbanViewProps> = ({ className = '' }) => {\r\n  const { user } = useAuth();\r\n  const { currentTeam } = useTeams();\r\n  const { theme } = useTheme();\r\n  const toast = createToast(theme === 'dark');\r\n  const {\r\n    data: tasks,\r\n    isLoading,\r\n    error,\r\n  } = useTasks({\r\n    teamId: currentTeam?.id || '',\r\n  });\r\n  const updateTaskMutation = useUpdateTask();\r\n\r\n  const [wipLimits, setWipLimits] = useState<Record<TaskStatus, number>>({\r\n    [TaskStatus.TODO]: 10,\r\n    [TaskStatus.IN_PROGRESS]: 5,\r\n    [TaskStatus.REVIEW]: 3,\r\n    [TaskStatus.DONE]: 20,\r\n  });\r\n\r\n  // 편집 모달 상태\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n\r\n  // 컬럼 정의\r\n  const columns: Column[] = useMemo(\r\n    () => [\r\n      {\r\n        id: TaskStatus.TODO,\r\n        title: '시작 전',\r\n        color: 'bg-pink-100 dark:bg-pink-900/30',\r\n        wipLimit: wipLimits[TaskStatus.TODO],\r\n      },\r\n      {\r\n        id: TaskStatus.IN_PROGRESS,\r\n        title: '진행 중',\r\n        color: 'bg-blue-100 dark:bg-blue-900/30',\r\n        wipLimit: wipLimits[TaskStatus.IN_PROGRESS],\r\n      },\r\n      {\r\n        id: TaskStatus.REVIEW,\r\n        title: '검토',\r\n        color: 'bg-yellow-100 dark:bg-yellow-900/30',\r\n        wipLimit: wipLimits[TaskStatus.REVIEW],\r\n      },\r\n      {\r\n        id: TaskStatus.DONE,\r\n        title: '완료',\r\n        color: 'bg-green-100 dark:bg-green-900/30',\r\n        wipLimit: wipLimits[TaskStatus.DONE],\r\n      },\r\n    ],\r\n    [wipLimits]\r\n  );\r\n\r\n  // 컬럼별 태스크 그룹화\r\n  const tasksByColumn = useMemo(() => {\r\n    if (!tasks) return {} as Record<TaskStatus, Task[]>;\r\n\r\n    const grouped = tasks.reduce(\r\n      (acc: Record<TaskStatus, Task[]>, task: Task) => {\r\n        const status = task.status;\r\n        if (!acc[status]) {\r\n          acc[status] = [];\r\n        }\r\n        acc[status].push(task);\r\n        return acc;\r\n      },\r\n      {} as Record<TaskStatus, Task[]>\r\n    );\r\n\r\n    // 각 컬럼을 생성일 기준으로 정렬\r\n    Object.keys(grouped).forEach(status => {\r\n      grouped[status as TaskStatus].sort((a, b) => {\r\n        const dateA = a.createdAt || new Date(0);\r\n        const dateB = b.createdAt || new Date(0);\r\n        return dateB.getTime() - dateA.getTime();\r\n      });\r\n    });\r\n\r\n    return grouped;\r\n  }, [tasks]);\r\n\r\n  const handleDragStart = () => {\r\n    // 드래그 시작시 haptic feedback 등을 추가할 수 있음\r\n  };\r\n\r\n  const handleDragEnd = async (result: DropResult) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    // 드래그가 유효한 위치에서 끝나지 않았거나, 같은 위치에 드롭된 경우\r\n    if (!destination) return;\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const sourceColumn = source.droppableId as TaskStatus;\r\n    const destinationColumn = destination.droppableId as TaskStatus;\r\n\r\n    // WIP 제한 확인 (같은 컬럼 내 이동이 아닌 경우)\r\n    if (sourceColumn !== destinationColumn) {\r\n      const destinationTasks = tasksByColumn[destinationColumn] || [];\r\n      const wipLimit = wipLimits[destinationColumn];\r\n\r\n      if (wipLimit && destinationTasks.length >= wipLimit) {\r\n        const columnTitle = columns.find(\r\n          col => col.id === destinationColumn\r\n        )?.title;\r\n        toast.warning(\r\n          `${columnTitle} 컬럼의 WIP 제한(${wipLimit})에 도달했습니다.`\r\n        );\r\n        return;\r\n      }\r\n    }\r\n\r\n    try {\r\n      const task = tasks?.find((t: Task) => t.id === draggableId);\r\n      if (!task) {\r\n        toast.error('태스크를 찾을 수 없습니다.');\r\n        return;\r\n      }\r\n\r\n      // 즉시 업데이트\r\n      await updateTaskMutation.mutateAsync({\r\n        id: draggableId,\r\n        updates: {\r\n          status: destinationColumn,\r\n        },\r\n      });\r\n\r\n      // 성공 메시지\r\n      const sourceColumnTitle = columns.find(\r\n        col => col.id === sourceColumn\r\n      )?.title;\r\n      const destinationColumnTitle = columns.find(\r\n        col => col.id === destinationColumn\r\n      )?.title;\r\n      toast.success(\r\n        `태스크를 \"${sourceColumnTitle}\"에서 \"${destinationColumnTitle}\"로 이동했습니다.`\r\n      );\r\n    } catch (error) {\r\n      console.error('태스크 상태 업데이트 실패:', error);\r\n      toast.error('태스크 상태 업데이트에 실패했습니다. 다시 시도해주세요.');\r\n    }\r\n  };\r\n\r\n  const handleWipLimitChange = (columnId: TaskStatus, limit: number) => {\r\n    setWipLimits(prev => ({\r\n      ...prev,\r\n      [columnId]: Math.max(0, limit), // 음수 방지\r\n    }));\r\n  };\r\n\r\n  const handleTaskClick = (task: Task, event: React.MouseEvent) => {\r\n    // 드래그 중이거나 드래그 핸들 클릭이 아닌 경우에만 편집 모달 열기\r\n    event.stopPropagation();\r\n\r\n    setEditingTask(task);\r\n    setShowEditModal(true);\r\n  };\r\n\r\n  const handleDragHandleClick = (event: React.MouseEvent) => {\r\n    // 드래그 핸들 클릭 시 편집 모달이 열리지 않도록 방지\r\n    event.stopPropagation();\r\n  };\r\n\r\n  const handleEditClose = () => {\r\n    setEditingTask(null);\r\n    setShowEditModal(false);\r\n  };\r\n\r\n  const getPriorityColor = (priority: TaskPriority) => {\r\n    switch (priority) {\r\n      case TaskPriority.LOW:\r\n        return 'text-gray-500 dark:text-gray-400';\r\n      case TaskPriority.MEDIUM:\r\n        return 'text-blue-500 dark:text-blue-400';\r\n      case TaskPriority.HIGH:\r\n        return 'text-orange-500 dark:text-orange-400';\r\n      case TaskPriority.URGENT:\r\n        return 'text-red-500 dark:text-red-400';\r\n      default:\r\n        return 'text-gray-500 dark:text-gray-400';\r\n    }\r\n  };\r\n\r\n  const formatDate = (date: Date) => {\r\n    return new Date(date).toLocaleDateString('ko-KR', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n    });\r\n  };\r\n\r\n  const isTaskOverdue = (task: Task) => {\r\n    if (!task.dueDate) return false;\r\n    return (\r\n      new Date(task.dueDate) < new Date() && task.status !== TaskStatus.DONE\r\n    );\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-64 text-gray-900 dark:text-dark-900\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\r\n        <span className=\"ml-2\">로딩 중...</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"text-center p-8\">\r\n        <div className=\"text-red-500 dark:text-red-400 mb-4\">\r\n          태스크 목록을 불러오는데 실패했습니다.\r\n        </div>\r\n        <button\r\n          onClick={() => window.location.reload()}\r\n          className=\"px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors\"\r\n        >\r\n          다시 시도\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={`${className}`}>\r\n        {/* 헤더 */}\r\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 bg-white dark:bg-dark-100 rounded-t-lg border-b border-gray-200 dark:border-dark-300 transition-colors duration-200 gap-4\">\r\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-dark-900\">\r\n            칸반 보드\r\n          </h2>\r\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-4\">\r\n            <span className=\"text-sm text-gray-600 dark:text-dark-600 whitespace-nowrap\">\r\n              WIP 제한 설정:\r\n            </span>\r\n            <div className=\"grid grid-cols-2 sm:flex gap-2\">\r\n              {columns.map(column => (\r\n                <div\r\n                  key={column.id}\r\n                  className=\"flex items-center gap-2 min-w-0\"\r\n                >\r\n                  <span className=\"text-xs text-gray-500 dark:text-dark-500 truncate\">\r\n                    {column.title}\r\n                  </span>\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    max=\"50\"\r\n                    value={wipLimits[column.id]}\r\n                    onChange={e =>\r\n                      handleWipLimitChange(\r\n                        column.id,\r\n                        parseInt(e.target.value) || 0\r\n                      )\r\n                    }\r\n                    className=\"w-12 px-1 py-1 text-xs border border-gray-300 dark:border-dark-300 bg-white dark:bg-dark-50 text-gray-900 dark:text-dark-900 rounded focus:outline-none focus:ring-1 focus:ring-primary-500 transition-colors duration-200\"\r\n                  />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 칸반 보드 */}\r\n        <DragDropContext\r\n          onDragStart={handleDragStart}\r\n          onDragEnd={handleDragEnd}\r\n        >\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4 p-4 bg-gray-50 dark:bg-dark-50 min-h-96 transition-colors duration-200\">\r\n            {columns.map(column => {\r\n              const columnTasks = tasksByColumn[column.id] || [];\r\n              const isOverLimit =\r\n                wipLimits[column.id] &&\r\n                columnTasks.length > wipLimits[column.id]!;\r\n\r\n              return (\r\n                <div key={column.id} className=\"flex flex-col min-h-0\">\r\n                  <div\r\n                    className={`${column.color} rounded-lg p-4 flex-1 min-h-0 flex flex-col`}\r\n                  >\r\n                    {/* 컬럼 헤더 */}\r\n                    <div className=\"flex items-center justify-between mb-4 flex-shrink-0\">\r\n                      <h3 className=\"font-semibold text-gray-900 dark:text-dark-900 truncate\">\r\n                        {column.title}\r\n                      </h3>\r\n                      <div className=\"flex items-center gap-2 flex-shrink-0\">\r\n                        <span className=\"text-sm text-gray-600 dark:text-dark-600\">\r\n                          {columnTasks.length}\r\n                          {wipLimits[column.id] && `/${wipLimits[column.id]}`}\r\n                        </span>\r\n                        {isOverLimit && (\r\n                          <span className=\"text-xs text-red-600 dark:text-red-400 font-medium\">\r\n                            초과!\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* 드롭 영역 */}\r\n                    <Droppable droppableId={column.id}>\r\n                      {(provided, snapshot) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.droppableProps}\r\n                          className={`flex-1 min-h-32 rounded-md transition-colors overflow-y-auto ${\r\n                            snapshot.isDraggingOver\r\n                              ? 'bg-blue-50 dark:bg-blue-900/20'\r\n                              : ''\r\n                          } ${isOverLimit ? 'bg-red-50 dark:bg-red-900/20' : ''}`}\r\n                          style={{ scrollBehavior: 'smooth' }}\r\n                        >\r\n                          {columnTasks.map((task: Task, index: number) => (\r\n                            <Draggable\r\n                              key={task.id}\r\n                              draggableId={task.id}\r\n                              index={index}\r\n                            >\r\n                              {(provided, snapshot) => (\r\n                                <div\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.draggableProps}\r\n                                  {...provided.dragHandleProps}\r\n                                  className={`bg-white dark:bg-dark-100 p-3 rounded-lg shadow-sm border border-gray-200 dark:border-dark-300 mb-3 transition-all duration-200 group ${\r\n                                    snapshot.isDragging\r\n                                      ? 'shadow-lg transform rotate-2 cursor-grabbing z-10'\r\n                                      : 'hover:shadow-md hover:border-primary-300 cursor-grab'\r\n                                  } ${\r\n                                    isTaskOverdue(task) && !snapshot.isDragging\r\n                                      ? 'border-red-300 bg-red-50 dark:bg-red-900/10'\r\n                                      : ''\r\n                                  }`}\r\n                                >\r\n                                  {/* 헤더 영역 */}\r\n                                  <div className=\"flex items-center justify-between mb-2\">\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                      {/* 드래그 표시 아이콘 */}\r\n                                      <div className=\"w-4 h-4 flex items-center justify-center text-gray-400\">\r\n                                        <svg\r\n                                          className=\"w-3 h-3\"\r\n                                          fill=\"currentColor\"\r\n                                          viewBox=\"0 0 6 10\"\r\n                                        >\r\n                                          <circle cx=\"2\" cy=\"2\" r=\"1\" />\r\n                                          <circle cx=\"2\" cy=\"5\" r=\"1\" />\r\n                                          <circle cx=\"2\" cy=\"8\" r=\"1\" />\r\n                                          <circle cx=\"4\" cy=\"2\" r=\"1\" />\r\n                                          <circle cx=\"4\" cy=\"5\" r=\"1\" />\r\n                                          <circle cx=\"4\" cy=\"8\" r=\"1\" />\r\n                                        </svg>\r\n                                      </div>\r\n                                      {isTaskOverdue(task) && (\r\n                                        <div\r\n                                          className=\"flex items-center text-red-500\"\r\n                                          title=\"마감일 초과\"\r\n                                        >\r\n                                          <svg\r\n                                            className=\"w-3 h-3\"\r\n                                            fill=\"currentColor\"\r\n                                            viewBox=\"0 0 20 20\"\r\n                                          >\r\n                                            <path\r\n                                              fillRule=\"evenodd\"\r\n                                              d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\r\n                                              clipRule=\"evenodd\"\r\n                                            />\r\n                                          </svg>\r\n                                        </div>\r\n                                      )}\r\n                                    </div>\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                      <span\r\n                                        className={`text-xs font-medium px-2 py-1 rounded-full ${getPriorityColor(task.priority)} bg-current/10`}\r\n                                      >\r\n                                        {task.priority}\r\n                                      </span>\r\n                                      {/* 편집 버튼 */}\r\n                                      <button\r\n                                        onClick={e => {\r\n                                          e.stopPropagation();\r\n                                          handleTaskClick(task, e);\r\n                                        }}\r\n                                        className=\"opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded hover:bg-gray-100 dark:hover:bg-dark-200 cursor-pointer\"\r\n                                        title=\"편집\"\r\n                                        type=\"button\"\r\n                                      >\r\n                                        <svg\r\n                                          className=\"w-3 h-3 text-gray-400 hover:text-gray-600\"\r\n                                          fill=\"none\"\r\n                                          stroke=\"currentColor\"\r\n                                          viewBox=\"0 0 24 24\"\r\n                                        >\r\n                                          <path\r\n                                            strokeLinecap=\"round\"\r\n                                            strokeLinejoin=\"round\"\r\n                                            strokeWidth={2}\r\n                                            d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"\r\n                                          />\r\n                                        </svg>\r\n                                      </button>\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                  {/* 태스크 제목 */}\r\n                                  <h4 className=\"font-medium text-gray-900 dark:text-dark-900 text-sm mb-2 line-clamp-2 group-hover:text-primary-600 transition-colors\">\r\n                                    {task.title}\r\n                                  </h4>\r\n\r\n                                  {/* 태스크 설명 */}\r\n                                  {task.description && (\r\n                                    <p className=\"text-xs text-gray-600 dark:text-dark-600 mb-3 line-clamp-2\">\r\n                                      {task.description}\r\n                                    </p>\r\n                                  )}\r\n\r\n                                  {/* 태스크 메타데이터 */}\r\n                                  <div className=\"flex items-center justify-between text-xs\">\r\n                                    <div className=\"flex items-center gap-2\">\r\n                                      {task.dueDate && (\r\n                                        <span\r\n                                          className={`${\r\n                                            isTaskOverdue(task)\r\n                                              ? 'text-red-600 font-medium'\r\n                                              : 'text-gray-500 dark:text-dark-500'\r\n                                          }`}\r\n                                        >\r\n                                          📅 {formatDate(task.dueDate)}\r\n                                        </span>\r\n                                      )}\r\n                                    </div>\r\n                                    <span className=\"text-gray-400 dark:text-dark-400 truncate ml-2 max-w-20\">\r\n                                      {task.assigneeId}\r\n                                    </span>\r\n                                  </div>\r\n                                </div>\r\n                              )}\r\n                            </Draggable>\r\n                          ))}\r\n                          {provided.placeholder}\r\n\r\n                          {/* 빈 상태 메시지 */}\r\n                          {columnTasks.length === 0 &&\r\n                            !snapshot.isDraggingOver && (\r\n                              <div className=\"text-center text-gray-400 dark:text-dark-400 text-sm py-8\">\r\n                                태스크를 여기로 드래그하세요\r\n                              </div>\r\n                            )}\r\n                        </div>\r\n                      )}\r\n                    </Droppable>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </DragDropContext>\r\n\r\n        {/* 전체 빈 상태 */}\r\n        {(!tasks || tasks.length === 0) && !isLoading && (\r\n          <div className=\"text-center text-gray-500 dark:text-dark-500 py-12 bg-white dark:bg-dark-100 rounded-b-lg transition-colors duration-200\">\r\n            <div className=\"mb-4\">\r\n              <svg\r\n                className=\"w-16 h-16 mx-auto text-gray-300 dark:text-dark-300\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                viewBox=\"0 0 24 24\"\r\n              >\r\n                <path\r\n                  strokeLinecap=\"round\"\r\n                  strokeLinejoin=\"round\"\r\n                  strokeWidth={1}\r\n                  d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <p className=\"text-lg font-medium mb-2\">등록된 태스크가 없습니다</p>\r\n            <p className=\"text-sm\">새 태스크를 추가해보세요!</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 편집 모달 */}\r\n      {showEditModal && editingTask && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-white dark:bg-dark-100 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden\">\r\n            <div className=\"flex justify-between items-center p-6 border-b border-gray-200 dark:border-dark-300\">\r\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-dark-900\">\r\n                태스크 편집\r\n              </h2>\r\n              <button\r\n                onClick={handleEditClose}\r\n                className=\"text-gray-400 hover:text-gray-600 dark:text-dark-400 dark:hover:text-dark-600 transition-colors p-1 rounded-full hover:bg-gray-100 dark:hover:bg-dark-200\"\r\n                aria-label=\"닫기\"\r\n              >\r\n                <svg\r\n                  className=\"w-6 h-6\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M6 18L18 6M6 6l12 12\"\r\n                  />\r\n                </svg>\r\n              </button>\r\n            </div>\r\n            <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-80px)]\">\r\n              <CreateTaskForm\r\n                onTaskCreated={handleEditClose}\r\n                isModal={true}\r\n                editingTask={editingTask}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KanbanView;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\LanguageSelector.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\LanguageToggle.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 59,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 59,
        "endColumn": 31,
        "fix": { "range": [1781, 1781], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst LanguageToggle: React.FC = () => {\n  const { i18n } = useTranslation();\n\n  const toggleLanguage = () => {\n    const newLanguage = i18n.language === 'ko' ? 'vi' : 'ko';\n    i18n.changeLanguage(newLanguage);\n  };\n\n  return (\n    <button\n      onClick={toggleLanguage}\n      className=\"\n        relative inline-flex items-center justify-center \n        w-10 h-10 rounded-lg\n        bg-gray-100 hover:bg-gray-200 \n        dark:bg-dark-100 dark:hover:bg-dark-200\n        text-gray-600 dark:text-dark-600\n        transition-all duration-200 ease-in-out\n        focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\n        dark:focus:ring-offset-dark-50\n      \"\n      aria-label={`Switch to ${i18n.language === 'ko' ? 'Vietnamese' : 'Korean'}`}\n      title={`Switch to ${i18n.language === 'ko' ? 'Vietnamese' : 'Korean'}`}\n    >\n      {/* Korean Flag/Text (KO) */}\n      <div\n        className={`\n          absolute inset-0 flex items-center justify-center transition-all duration-300\n          ${\n            i18n.language === 'ko'\n              ? 'opacity-100 rotate-0 scale-100'\n              : 'opacity-0 rotate-90 scale-75'\n          }\n        `}\n      >\n        <span className=\"text-xs font-bold\">KO</span>\n      </div>\n\n      {/* Vietnamese Flag/Text (VI) */}\n      <div\n        className={`\n          absolute inset-0 flex items-center justify-center transition-all duration-300\n          ${\n            i18n.language === 'vi'\n              ? 'opacity-100 rotate-0 scale-100'\n              : 'opacity-0 -rotate-90 scale-75'\n          }\n        `}\n      >\n        <span className=\"text-xs font-bold\">VI</span>\n      </div>\n    </button>\n  );\n};\n\nexport default LanguageToggle;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\LoginForm.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 25,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 25,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [756, 786], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 42,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 42,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [1100, 1131], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { useAuth } from '../hooks/useAuth';\nimport { useNotification } from '../contexts/NotificationContext';\nimport ThemeToggle from './ThemeToggle';\nimport LanguageToggle from './LanguageToggle';\n\nconst LoginForm: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { signIn, signUp, error } = useAuth();\n  const { error: showError, success } = useNotification();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!email || !password) {\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await signIn(email, password);\n    } catch (err) {\n      console.error('로그인 실패:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignUp = async () => {\n    if (!email || !password) {\n      showError('이메일과 비밀번호를 입력해주세요.');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await signUp(email, password);\n      success('회원가입이 완료되었습니다!');\n    } catch (err) {\n      console.error('회원가입 실패:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-dark-50 flex items-center justify-center transition-colors duration-200\">\n      <div className=\"max-w-md w-full space-y-8 p-8\">\n        {/* Theme and Language Toggles */}\n        <div className=\"flex justify-end gap-2\">\n          <LanguageToggle />\n          <ThemeToggle />\n        </div>\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-dark-900\">\n            ALMUS ToDo List\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600 dark:text-dark-600\">\n            팀 업무를 효율적으로 관리하세요\n          </p>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email-address\" className=\"sr-only\">\n                이메일 주소\n              </label>\n              <input\n                id=\"email-address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"\n                  appearance-none rounded-none relative block w-full px-3 py-2 \n                  border border-gray-300 dark:border-dark-300\n                  placeholder-gray-500 dark:placeholder-dark-500\n                  text-gray-900 dark:text-dark-900\n                  bg-white dark:bg-dark-100\n                  rounded-t-md \n                  focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 \n                  sm:text-sm transition-colors duration-200\n                \"\n                placeholder=\"이메일 주소\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                비밀번호\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"\n                  appearance-none rounded-none relative block w-full px-3 py-2 \n                  border border-gray-300 dark:border-dark-300\n                  placeholder-gray-500 dark:placeholder-dark-500\n                  text-gray-900 dark:text-dark-900\n                  bg-white dark:bg-dark-100\n                  rounded-b-md \n                  focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 \n                  sm:text-sm transition-colors duration-200\n                \"\n                placeholder=\"비밀번호\"\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n              />\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"text-red-600 dark:text-red-400 text-sm text-center\">\n              {error}\n            </div>\n          )}\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"\n                group relative w-full flex justify-center py-2 px-4 \n                border border-transparent text-sm font-medium rounded-md \n                text-white bg-primary-600 hover:bg-primary-700 \n                focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\n                dark:focus:ring-offset-dark-50\n                disabled:opacity-50 disabled:cursor-not-allowed\n                transition-colors duration-200\n              \"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  로그인 중...\n                </div>\n              ) : (\n                '로그인'\n              )}\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <button\n              type=\"button\"\n              onClick={handleSignUp}\n              disabled={isLoading}\n              className=\"\n                w-full py-2 px-4 text-sm font-medium\n                border border-gray-300 dark:border-dark-300 rounded-md\n                text-gray-700 dark:text-dark-700 bg-white dark:bg-dark-100\n                hover:bg-gray-50 dark:hover:bg-dark-200\n                focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\n                dark:focus:ring-offset-dark-50\n                disabled:opacity-50 disabled:cursor-not-allowed\n                transition-colors duration-200\n              \"\n            >\n              회원가입\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-dark-600\">\n              테스트 계정: admin@almus.com / password123\n            </p>\n            <p className=\"text-xs text-gray-500 dark:text-dark-500 mt-1\">\n              계정이 없다면 위 정보로 회원가입하세요\n            </p>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ManageTeamMembersModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'InviteTeamMemberInput' is defined but never used.",
        "line": 18,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 24
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'InviteTeamMemberInput' is defined but never used.",
        "line": 18,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'selectedMember' is assigned a value but never used.",
        "line": 76,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 24
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'selectedMember' is assigned a value but never used.",
        "line": 76,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setSelectedMember' is assigned a value but never used.",
        "line": 76,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 43
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'setSelectedMember' is assigned a value but never used.",
        "line": 76,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'isOwner' is assigned a value but never used.",
        "line": 80,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 16
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'isOwner' is assigned a value but never used.",
        "line": 80,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 16
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 97,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 97,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2731, 2765], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 112,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 112,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3161, 3195], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  X,\r\n  UserPlus,\r\n  Crown,\r\n  Shield,\r\n  Edit,\r\n  Eye,\r\n  Trash2,\r\n  Mail,\r\n  Search,\r\n  Filter,\r\n} from 'lucide-react';\r\nimport {\r\n  Team,\r\n  TeamMember,\r\n  TeamRole,\r\n  InviteTeamMemberInput,\r\n} from '../types/team';\r\nimport { useTeams } from '../hooks/useTeams';\r\nimport { useTeamMembers } from '../hooks/useTeamMembers';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { InviteMemberModal } from './InviteMemberModal';\r\n\r\ninterface ManageTeamMembersModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  team: Team;\r\n}\r\n\r\nconst roleColors = {\r\n  [TeamRole.OWNER]:\r\n    'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\r\n  [TeamRole.ADMIN]:\r\n    'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\r\n  [TeamRole.EDITOR]:\r\n    'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\r\n  [TeamRole.VIEWER]:\r\n    'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',\r\n};\r\n\r\nconst roleIcons = {\r\n  [TeamRole.OWNER]: Crown,\r\n  [TeamRole.ADMIN]: Shield,\r\n  [TeamRole.EDITOR]: Edit,\r\n  [TeamRole.VIEWER]: Eye,\r\n};\r\n\r\nconst roleLabels = {\r\n  [TeamRole.OWNER]: '소유자',\r\n  [TeamRole.ADMIN]: '관리자',\r\n  [TeamRole.EDITOR]: '편집자',\r\n  [TeamRole.VIEWER]: '보기 전용',\r\n};\r\n\r\nexport const ManageTeamMembersModal: React.FC<ManageTeamMembersModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  team,\r\n}) => {\r\n  const { user } = useAuth();\r\n  const { canManageTeam } = useTeams();\r\n  const {\r\n    members,\r\n    invitations,\r\n    loading,\r\n    updateMemberRole,\r\n    removeMember,\r\n    cancelInvitation,\r\n    resendInvitation,\r\n  } = useTeamMembers(team.id);\r\n\r\n  const [isInviteModalOpen, setIsInviteModalOpen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [roleFilter, setRoleFilter] = useState<TeamRole | 'ALL'>('ALL');\r\n  const [selectedMember, setSelectedMember] = useState<TeamMember | null>(null);\r\n  const [isChangingRole, setIsChangingRole] = useState(false);\r\n\r\n  const canManage = canManageTeam(team.id);\r\n  const isOwner = team.ownerId === user?.id;\r\n\r\n  const filteredMembers = members.filter(member => {\r\n    const matchesSearch =\r\n      member.user?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      member.user?.email.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesRole = roleFilter === 'ALL' || member.role === roleFilter;\r\n    return matchesSearch && matchesRole;\r\n  });\r\n\r\n  const handleRoleChange = async (member: TeamMember, newRole: TeamRole) => {\r\n    if (!canManage || member.role === TeamRole.OWNER) return;\r\n\r\n    setIsChangingRole(true);\r\n    try {\r\n      await updateMemberRole(member.id, newRole);\r\n    } catch (error) {\r\n      console.error('역할 변경 실패:', error);\r\n    } finally {\r\n      setIsChangingRole(false);\r\n    }\r\n  };\r\n\r\n  const handleRemoveMember = async (member: TeamMember) => {\r\n    if (!canManage || member.role === TeamRole.OWNER) return;\r\n\r\n    const confirmMessage = `정말로 ${member.user?.name}님을 팀에서 제거하시겠습니까?`;\r\n    if (!window.confirm(confirmMessage)) return;\r\n\r\n    try {\r\n      await removeMember(member.id);\r\n    } catch (error) {\r\n      console.error('멤버 제거 실패:', error);\r\n    }\r\n  };\r\n\r\n  const getRoleIcon = (role: TeamRole) => {\r\n    const Icon = roleIcons[role];\r\n    return <Icon size={16} />;\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden\">\r\n          <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\r\n            <div>\r\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\r\n                팀 멤버 관리\r\n              </h2>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\r\n                {team.name} • 총 {members.length}명\r\n              </p>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              {canManage && (\r\n                <button\r\n                  onClick={() => setIsInviteModalOpen(true)}\r\n                  className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n                >\r\n                  <UserPlus size={16} />\r\n                  멤버 초대\r\n                </button>\r\n              )}\r\n              <button\r\n                onClick={onClose}\r\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\"\r\n              >\r\n                <X size={24} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"p-6\">\r\n            {/* 검색 및 필터 */}\r\n            <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\r\n              <div className=\"flex-1 relative\">\r\n                <Search\r\n                  size={20}\r\n                  className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"이름 또는 이메일로 검색...\"\r\n                  value={searchTerm}\r\n                  onChange={e => setSearchTerm(e.target.value)}\r\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100\"\r\n                />\r\n              </div>\r\n              <div className=\"relative\">\r\n                <Filter\r\n                  size={20}\r\n                  className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n                />\r\n                <select\r\n                  value={roleFilter}\r\n                  onChange={e =>\r\n                    setRoleFilter(e.target.value as TeamRole | 'ALL')\r\n                  }\r\n                  className=\"pl-10 pr-8 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100\"\r\n                >\r\n                  <option value=\"ALL\">모든 역할</option>\r\n                  <option value={TeamRole.OWNER}>소유자</option>\r\n                  <option value={TeamRole.ADMIN}>관리자</option>\r\n                  <option value={TeamRole.EDITOR}>편집자</option>\r\n                  <option value={TeamRole.VIEWER}>보기 전용</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 멤버 목록 */}\r\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n              {loading ? (\r\n                <div className=\"text-center py-8\">\r\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\r\n                  <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\r\n                    멤버 목록을 불러오는 중...\r\n                  </p>\r\n                </div>\r\n              ) : filteredMembers.length === 0 ? (\r\n                <div className=\"text-center py-8\">\r\n                  <p className=\"text-gray-600 dark:text-gray-400\">\r\n                    {searchTerm || roleFilter !== 'ALL'\r\n                      ? '검색 조건에 맞는 멤버가 없습니다.'\r\n                      : '팀 멤버가 없습니다.'}\r\n                  </p>\r\n                </div>\r\n              ) : (\r\n                filteredMembers.map(member => {\r\n                  const RoleIcon = roleIcons[member.role];\r\n                  const canChangeRole =\r\n                    canManage &&\r\n                    member.role !== TeamRole.OWNER &&\r\n                    member.userId !== user?.id;\r\n                  const canRemove =\r\n                    canManage &&\r\n                    member.role !== TeamRole.OWNER &&\r\n                    member.userId !== user?.id;\r\n\r\n                  return (\r\n                    <div\r\n                      key={member.id}\r\n                      className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\"\r\n                    >\r\n                      <div className=\"flex items-center gap-4\">\r\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\r\n                          {member.user?.name.charAt(0).toUpperCase()}\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                              {member.user?.name}\r\n                            </h3>\r\n                            {member.userId === user?.id && (\r\n                              <span className=\"px-2 py-1 text-xs bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full\">\r\n                                나\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                            {member.user?.email}\r\n                          </p>\r\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                            {member.joinedAt.toLocaleDateString('ko-KR')} 가입\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center gap-3\">\r\n                        {canChangeRole ? (\r\n                          <select\r\n                            value={member.role}\r\n                            onChange={e =>\r\n                              handleRoleChange(\r\n                                member,\r\n                                e.target.value as TeamRole\r\n                              )\r\n                            }\r\n                            disabled={isChangingRole}\r\n                            className={`px-3 py-1 text-sm rounded-full border-0 focus:outline-none focus:ring-2 focus:ring-blue-500 ${roleColors[member.role]}`}\r\n                          >\r\n                            <option value={TeamRole.ADMIN}>관리자</option>\r\n                            <option value={TeamRole.EDITOR}>편집자</option>\r\n                            <option value={TeamRole.VIEWER}>보기 전용</option>\r\n                          </select>\r\n                        ) : (\r\n                          <span\r\n                            className={`inline-flex items-center gap-1 px-3 py-1 text-sm rounded-full ${roleColors[member.role]}`}\r\n                          >\r\n                            <RoleIcon size={14} />\r\n                            {roleLabels[member.role]}\r\n                          </span>\r\n                        )}\r\n\r\n                        {canRemove && (\r\n                          <button\r\n                            onClick={() => handleRemoveMember(member)}\r\n                            className=\"p-2 text-gray-400 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/30 rounded-lg transition-colors\"\r\n                            title=\"멤버 제거\"\r\n                          >\r\n                            <Trash2 size={16} />\r\n                          </button>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n              )}\r\n            </div>\r\n\r\n            {/* 대기 중인 초대 */}\r\n            {invitations.length > 0 && (\r\n              <div className=\"mt-8\">\r\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-4\">\r\n                  대기 중인 초대 ({invitations.length}개)\r\n                </h3>\r\n                <div className=\"space-y-3\">\r\n                  {invitations.map(invitation => (\r\n                    <div\r\n                      key={invitation.id}\r\n                      className=\"flex items-center justify-between p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-lg\"\r\n                    >\r\n                      <div className=\"flex items-center gap-4\">\r\n                        <div className=\"w-10 h-10 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center\">\r\n                          <Mail\r\n                            size={16}\r\n                            className=\"text-gray-600 dark:text-gray-400\"\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                            {invitation.email}\r\n                          </h3>\r\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                            {invitation.invitedByUser?.name}님이{' '}\r\n                            {invitation.createdAt.toLocaleDateString('ko-KR')}에\r\n                            초대\r\n                          </p>\r\n                          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                            {invitation.expiresAt.toLocaleDateString('ko-KR')}{' '}\r\n                            만료\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <span\r\n                          className={`inline-flex items-center gap-1 px-3 py-1 text-sm rounded-full ${roleColors[invitation.role]}`}\r\n                        >\r\n                          {getRoleIcon(invitation.role)}\r\n                          {roleLabels[invitation.role]}\r\n                        </span>\r\n\r\n                        {canManage && (\r\n                          <div className=\"flex gap-1\">\r\n                            <button\r\n                              onClick={() => resendInvitation(invitation.id)}\r\n                              className=\"p-2 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/30 rounded-lg transition-colors\"\r\n                              title=\"초대 재전송\"\r\n                            >\r\n                              <Mail size={16} />\r\n                            </button>\r\n                            <button\r\n                              onClick={() => cancelInvitation(invitation.id)}\r\n                              className=\"p-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/30 rounded-lg transition-colors\"\r\n                              title=\"초대 취소\"\r\n                            >\r\n                              <X size={16} />\r\n                            </button>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* 권한 설명 */}\r\n            <div className=\"mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg\">\r\n              <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\r\n                역할별 권한\r\n              </h4>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\r\n                <div className=\"flex items-center gap-2 text-blue-800 dark:text-blue-200\">\r\n                  <Crown size={14} />\r\n                  <span>\r\n                    <strong>소유자:</strong> 모든 권한, 팀 삭제 가능\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center gap-2 text-blue-800 dark:text-blue-200\">\r\n                  <Shield size={14} />\r\n                  <span>\r\n                    <strong>관리자:</strong> 멤버 관리, 설정 변경\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center gap-2 text-blue-800 dark:text-blue-200\">\r\n                  <Edit size={14} />\r\n                  <span>\r\n                    <strong>편집자:</strong> 작업 생성/수정/삭제\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex items-center gap-2 text-blue-800 dark:text-blue-200\">\r\n                  <Eye size={14} />\r\n                  <span>\r\n                    <strong>보기 전용:</strong> 작업 보기만 가능\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 멤버 초대 모달 */}\r\n      <InviteMemberModal\r\n        isOpen={isInviteModalOpen}\r\n        onClose={() => setIsInviteModalOpen(false)}\r\n        team={team}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\NotificationSettings.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [852, 855], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [852, 855], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1021, 1024], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1021, 1024], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { useFCM } from '../hooks/useFCM';\nimport { useTheme } from '../contexts/ThemeContext';\nimport { createToast } from '../utils/toast';\nimport { useNotification } from '../contexts/NotificationContext';\n\nconst NotificationSettings: React.FC = () => {\n  const { theme } = useTheme();\n  const toast = createToast(theme === 'dark');\n  const { showConfirm } = useNotification();\n  const {\n    notificationSettings,\n    settingsLoading,\n    saveSettings,\n    sendTestNotification,\n    requestNotificationPermission,\n    unsubscribeFromFCM,\n  } = useFCM();\n\n  const [settings, setSettings] = useState(notificationSettings);\n\n  React.useEffect(() => {\n    if (notificationSettings) {\n      setSettings(notificationSettings);\n    }\n  }, [notificationSettings]);\n\n  const handleSettingChange = (key: string, value: any) => {\n    if (settings) {\n      setSettings({\n        ...settings,\n        [key]: value,\n      });\n    }\n  };\n\n  const handleQuietHoursChange = (key: string, value: any) => {\n    if (settings) {\n      setSettings({\n        ...settings,\n        quietHours: {\n          ...settings.quietHours,\n          [key]: value,\n        },\n      });\n    }\n  };\n\n  const handleSaveSettings = () => {\n    if (settings) {\n      saveSettings(settings);\n    }\n  };\n\n  const handleRequestPermission = async () => {\n    const granted = await requestNotificationPermission();\n    if (granted) {\n      toast.success('알림 권한이 허용되었습니다.');\n    } else {\n      toast.error('알림 권한이 거부되었습니다.');\n    }\n  };\n\n  const handleTestNotification = () => {\n    sendTestNotification();\n  };\n\n  const handleUnsubscribe = async () => {\n    const confirmed = await showConfirm({\n      title: '알림 구독 해제',\n      message: 'FCM 구독을 해제하시겠습니까?',\n      confirmText: '해제',\n      cancelText: '취소',\n      variant: 'warning',\n    });\n    if (confirmed) {\n      await unsubscribeFromFCM();\n      toast.success('FCM 구독이 해제되었습니다.');\n    }\n  };\n\n  if (settingsLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\n          <div className=\"space-y-3\">\n            <div className=\"h-4 bg-gray-200 rounded\"></div>\n            <div className=\"h-4 bg-gray-200 rounded\"></div>\n            <div className=\"h-4 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!settings) {\n    return (\n      <div className=\"p-6\">\n        <p className=\"text-gray-500\">알림 설정을 불러올 수 없습니다.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 bg-white rounded-lg shadow\">\n      <h2 className=\"text-xl font-semibold mb-6\">알림 설정</h2>\n\n      <div className=\"space-y-6\">\n        {/* 알림 권한 */}\n        <div>\n          <h3 className=\"text-lg font-medium mb-3\">알림 권한</h3>\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={handleRequestPermission}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              알림 권한 요청\n            </button>\n            <button\n              onClick={handleUnsubscribe}\n              className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n            >\n              FCM 구독 해제\n            </button>\n          </div>\n        </div>\n\n        {/* 알림 채널 */}\n        <div>\n          <h3 className=\"text-lg font-medium mb-3\">알림 채널</h3>\n          <div className=\"space-y-3\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.pushEnabled}\n                onChange={e =>\n                  handleSettingChange('pushEnabled', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              Push 알림\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.emailEnabled}\n                onChange={e =>\n                  handleSettingChange('emailEnabled', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              이메일 알림\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.inAppEnabled}\n                onChange={e =>\n                  handleSettingChange('inAppEnabled', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              In-App 알림\n            </label>\n          </div>\n        </div>\n\n        {/* 알림 유형 */}\n        <div>\n          <h3 className=\"text-lg font-medium mb-3\">알림 유형</h3>\n          <div className=\"space-y-3\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.taskCreated}\n                onChange={e =>\n                  handleSettingChange('taskCreated', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              새 Task 생성\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.taskUpdated}\n                onChange={e =>\n                  handleSettingChange('taskUpdated', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              Task 업데이트\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.taskDueSoon}\n                onChange={e =>\n                  handleSettingChange('taskDueSoon', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              마감일 임박\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.taskOverdue}\n                onChange={e =>\n                  handleSettingChange('taskOverdue', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              마감일 지연\n            </label>\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.teamUpdates}\n                onChange={e =>\n                  handleSettingChange('teamUpdates', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              팀 업데이트\n            </label>\n          </div>\n        </div>\n\n        {/* 조용한 시간 */}\n        <div>\n          <h3 className=\"text-lg font-medium mb-3\">조용한 시간</h3>\n          <div className=\"space-y-3\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={settings.quietHours.enabled}\n                onChange={e =>\n                  handleQuietHoursChange('enabled', e.target.checked)\n                }\n                className=\"mr-2\"\n              />\n              조용한 시간 활성화\n            </label>\n            {settings.quietHours.enabled && (\n              <div className=\"flex items-center space-x-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    시작 시간\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={settings.quietHours.start}\n                    onChange={e =>\n                      handleQuietHoursChange('start', e.target.value)\n                    }\n                    className=\"border rounded px-3 py-1\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">\n                    종료 시간\n                  </label>\n                  <input\n                    type=\"time\"\n                    value={settings.quietHours.end}\n                    onChange={e =>\n                      handleQuietHoursChange('end', e.target.value)\n                    }\n                    className=\"border rounded px-3 py-1\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* 테스트 알림 */}\n        <div>\n          <h3 className=\"text-lg font-medium mb-3\">테스트</h3>\n          <button\n            onClick={handleTestNotification}\n            disabled={false} // sendTestNotificationMutation.isPending is removed\n            className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50\"\n          >\n            {/* {sendTestNotificationMutation.isPending ? '발송 중...' : '테스트 알림 발송'} */}\n            테스트 알림 발송\n          </button>\n        </div>\n\n        {/* 저장 버튼 */}\n        <div className=\"pt-4 border-t\">\n          <button\n            onClick={handleSaveSettings}\n            disabled={false} // saveSettingsMutation.isPending is removed\n            className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50\"\n          >\n            {/* {saveSettingsMutation.isPending ? '저장 중...' : '설정 저장'} */}\n            설정 저장\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationSettings;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\TaskList.test.tsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'jest' is not defined.",
        "line": 7,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 7,
        "endColumn": 5
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'jest' is not defined.",
        "line": 12,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 12,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'jest' is not defined.",
        "line": 13,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 13,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'jest' is not defined.",
        "line": 14,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 14,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'jest' is not defined.",
        "line": 15,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 15,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'jest' is not defined.",
        "line": 19,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 19,
        "endColumn": 5
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'describe' is not defined.",
        "line": 30,
        "column": 1,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 30,
        "endColumn": 9
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'it' is not defined.",
        "line": 31,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 31,
        "endColumn": 5
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'it' is not defined.",
        "line": 35,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 35,
        "endColumn": 5
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'expect' is not defined.",
        "line": 38,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 38,
        "endColumn": 11
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `␍⏎`",
        "line": 42,
        "column": 4,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 42,
        "endColumn": 4,
        "fix": { "range": [1027, 1027], "text": "\r\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport TaskList from './TaskList';\r\n\r\n// Mock the hooks\r\njest.mock('../hooks/useTasks', () => ({\r\n  useTasks: () => ({\r\n    tasks: [],\r\n    loading: false,\r\n    error: null,\r\n    createTask: jest.fn(),\r\n    updateTask: jest.fn(),\r\n    deleteTask: jest.fn(),\r\n    refetch: jest.fn(),\r\n  }),\r\n}));\r\n\r\njest.mock('../hooks/useAuth', () => ({\r\n  useAuth: () => ({\r\n    user: {\r\n      id: 'test-user',\r\n      email: 'test@example.com',\r\n      name: 'Test User',\r\n    },\r\n    loading: false,\r\n  }),\r\n}));\r\n\r\ndescribe('TaskList', () => {\r\n  it('renders without crashing', () => {\r\n    render(<TaskList />);\r\n  });\r\n\r\n  it('shows empty state when no tasks', () => {\r\n    render(<TaskList />);\r\n    // Add specific assertions based on your TaskList component implementation\r\n    expect(screen.getByTestId('task-list')).toBeInTheDocument();\r\n  });\r\n\r\n  // Add more tests based on your component's functionality\r\n});",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\TaskList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used.",
        "line": 15,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 15
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used.",
        "line": 15,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'updateTaskMutation' is assigned a value but never used.",
        "line": 29,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 27
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'updateTaskMutation' is assigned a value but never used.",
        "line": 29,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2568, 2571], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2568, 2571], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2581, 2584], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2581, 2584], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-case-declarations",
        "severity": 2,
        "message": "Unexpected lexical declaration in case block.",
        "line": 81,
        "column": 11,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpected",
        "endLine": 86,
        "endColumn": 13
      },
      {
        "ruleId": "no-case-declarations",
        "severity": 2,
        "message": "Unexpected lexical declaration in case block.",
        "line": 91,
        "column": 11,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpected",
        "endLine": 96,
        "endColumn": 13
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 136,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 136,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4745, 4780], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTasks, useDeleteTask, useUpdateTask } from '../hooks/useTasks';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useTeams } from '../hooks/useTeams';\r\nimport { useTaskAuth } from '../hooks/useTaskAuth';\r\nimport { useTheme } from '../contexts/ThemeContext';\r\nimport { TaskStatus, TaskPriority } from '@almus/shared-types';\r\nimport { Task } from '../types/team';\r\nimport { createToast } from '../utils/toast';\r\nimport { useNotification } from '../contexts/NotificationContext';\r\nimport CreateTaskForm from './CreateTaskForm';\r\n\r\nconst TaskList: React.FC = function TaskList() {\r\n  const { user } = useAuth();\r\n  const { currentTeam } = useTeams();\r\n  const { canUpdateTask, canDeleteTask } = useTaskAuth();\r\n  const { theme } = useTheme();\r\n  const toast = createToast(theme === 'dark');\r\n  const { showConfirm } = useNotification();\r\n  const {\r\n    data: tasks = [],\r\n    isLoading,\r\n    error,\r\n  } = useTasks({\r\n    teamId: currentTeam?.id || '',\r\n  });\r\n  const deleteTaskMutation = useDeleteTask();\r\n  const updateTaskMutation = useUpdateTask();\r\n  const { t } = useTranslation();\r\n\r\n  // 필터링 및 검색 상태\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<TaskStatus | 'all'>('all');\r\n  const [priorityFilter, setPriorityFilter] = useState<TaskPriority | 'all'>(\r\n    'all'\r\n  );\r\n  const [sortBy, setSortBy] = useState<\r\n    'title' | 'dueDate' | 'priority' | 'status' | 'createdAt'\r\n  >('createdAt');\r\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\r\n\r\n  // 페이지네이션 상태\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n\r\n  // 편집 모달 상태\r\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n\r\n  // 필터링 및 정렬된 태스크 목록\r\n  const filteredAndSortedTasks = useMemo(() => {\r\n    let filtered = tasks.filter(task => {\r\n      const matchesSearch =\r\n        task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (task.description || '')\r\n          .toLowerCase()\r\n          .includes(searchTerm.toLowerCase());\r\n      const matchesStatus =\r\n        statusFilter === 'all' || task.status === statusFilter;\r\n      const matchesPriority =\r\n        priorityFilter === 'all' || task.priority === priorityFilter;\r\n\r\n      return matchesSearch && matchesStatus && matchesPriority;\r\n    });\r\n\r\n    // 정렬\r\n    filtered.sort((a, b) => {\r\n      let aValue: any, bValue: any;\r\n\r\n      switch (sortBy) {\r\n        case 'title':\r\n          aValue = a.title.toLowerCase();\r\n          bValue = b.title.toLowerCase();\r\n          break;\r\n        case 'dueDate':\r\n          aValue = a.dueDate || new Date(0);\r\n          bValue = b.dueDate || new Date(0);\r\n          break;\r\n        case 'priority':\r\n          const priorityOrder = {\r\n            [TaskPriority.LOW]: 1,\r\n            [TaskPriority.MEDIUM]: 2,\r\n            [TaskPriority.HIGH]: 3,\r\n            [TaskPriority.URGENT]: 4,\r\n          };\r\n          aValue = priorityOrder[a.priority] || 0;\r\n          bValue = priorityOrder[b.priority] || 0;\r\n          break;\r\n        case 'status':\r\n          const statusOrder = {\r\n            [TaskStatus.TODO]: 1,\r\n            [TaskStatus.IN_PROGRESS]: 2,\r\n            [TaskStatus.REVIEW]: 3,\r\n            [TaskStatus.DONE]: 4,\r\n          };\r\n          aValue = statusOrder[a.status] || 0;\r\n          bValue = statusOrder[b.status] || 0;\r\n          break;\r\n        case 'createdAt':\r\n        default:\r\n          aValue = a.createdAt || new Date(0);\r\n          bValue = b.createdAt || new Date(0);\r\n          break;\r\n      }\r\n\r\n      if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\r\n      if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\r\n      return 0;\r\n    });\r\n\r\n    return filtered;\r\n  }, [tasks, searchTerm, statusFilter, priorityFilter, sortBy, sortOrder]);\r\n\r\n  // 페이지네이션\r\n  const totalPages = Math.ceil(filteredAndSortedTasks.length / itemsPerPage);\r\n  const paginatedTasks = useMemo(() => {\r\n    const start = (currentPage - 1) * itemsPerPage;\r\n    const end = start + itemsPerPage;\r\n    return filteredAndSortedTasks.slice(start, end);\r\n  }, [filteredAndSortedTasks, currentPage, itemsPerPage]);\r\n\r\n  const handleDelete = async (taskId: string) => {\r\n    const confirmed = await showConfirm({\r\n      title: '태스크 삭제',\r\n      message: t('task.confirmDelete'),\r\n      confirmText: '삭제',\r\n      cancelText: '취소',\r\n      variant: 'danger',\r\n    });\r\n    if (confirmed) {\r\n      try {\r\n        await deleteTaskMutation.mutateAsync(taskId);\r\n        toast.success('태스크가 성공적으로 삭제되었습니다.');\r\n      } catch (error) {\r\n        console.error('태스크 삭제 실패:', error);\r\n        toast.error(t('task.taskDeleteFailed'));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEdit = (task: Task) => {\r\n    setEditingTask(task);\r\n    setShowEditModal(true);\r\n  };\r\n\r\n  const handleEditClose = () => {\r\n    setEditingTask(null);\r\n    setShowEditModal(false);\r\n  };\r\n\r\n  const handleSort = (column: typeof sortBy) => {\r\n    if (sortBy === column) {\r\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortBy(column);\r\n      setSortOrder('asc');\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: TaskStatus) => {\r\n    switch (status) {\r\n      case TaskStatus.TODO:\r\n        return 'bg-pink-100 dark:bg-pink-800 text-pink-800 dark:text-pink-200';\r\n      case TaskStatus.IN_PROGRESS:\r\n        return 'bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200';\r\n      case TaskStatus.REVIEW:\r\n        return 'bg-yellow-100 dark:bg-yellow-800 text-yellow-800 dark:text-yellow-200';\r\n      case TaskStatus.DONE:\r\n        return 'bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200';\r\n      default:\r\n        return 'bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200';\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: TaskPriority) => {\r\n    switch (priority) {\r\n      case TaskPriority.LOW:\r\n        return 'text-gray-500 dark:text-gray-400';\r\n      case TaskPriority.MEDIUM:\r\n        return 'text-blue-500 dark:text-blue-400';\r\n      case TaskPriority.HIGH:\r\n        return 'text-orange-500 dark:text-orange-400';\r\n      case TaskPriority.URGENT:\r\n        return 'text-red-500 dark:text-red-400';\r\n      default:\r\n        return 'text-gray-500 dark:text-gray-400';\r\n    }\r\n  };\r\n\r\n  const getStatusText = (status: TaskStatus) => {\r\n    switch (status) {\r\n      case TaskStatus.TODO:\r\n        return t('status.todo');\r\n      case TaskStatus.IN_PROGRESS:\r\n        return t('status.inProgress');\r\n      case TaskStatus.REVIEW:\r\n        return t('status.review');\r\n      case TaskStatus.DONE:\r\n        return t('status.done');\r\n      default:\r\n        return t('status.todo');\r\n    }\r\n  };\r\n\r\n  const getPriorityText = (priority: TaskPriority) => {\r\n    switch (priority) {\r\n      case TaskPriority.LOW:\r\n        return t('priority.low');\r\n      case TaskPriority.MEDIUM:\r\n        return t('priority.medium');\r\n      case TaskPriority.HIGH:\r\n        return t('priority.high');\r\n      case TaskPriority.URGENT:\r\n        return t('priority.urgent');\r\n      default:\r\n        return t('priority.medium');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-64 text-gray-900 dark:text-dark-900\">\r\n        {t('common.loading')}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"text-red-500 dark:text-red-400\">\r\n        {t('task.loadTasksFailed')}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!tasks || tasks.length === 0) {\r\n    return (\r\n      <div className=\"text-center py-8\">\r\n        <p className=\"text-gray-500 dark:text-dark-500\">{t('task.noTasks')}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"bg-white dark:bg-dark-100 rounded-lg shadow transition-colors duration-200\">\r\n        <div className=\"px-6 py-4 border-b border-gray-200 dark:border-dark-300\">\r\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-dark-900\">\r\n              {t('task.taskList')} ({filteredAndSortedTasks.length}개)\r\n            </h2>\r\n\r\n            {/* 검색 및 필터 */}\r\n            <div className=\"flex flex-col sm:flex-row gap-3\">\r\n              {/* 검색 */}\r\n              <div className=\"relative\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"태스크 검색...\"\r\n                  value={searchTerm}\r\n                  onChange={e => setSearchTerm(e.target.value)}\r\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-100 text-gray-900 dark:text-dark-900 focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-sm\"\r\n                />\r\n                <svg\r\n                  className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n                  />\r\n                </svg>\r\n              </div>\r\n\r\n              {/* 상태 필터 */}\r\n              <select\r\n                value={statusFilter}\r\n                onChange={e =>\r\n                  setStatusFilter(e.target.value as TaskStatus | 'all')\r\n                }\r\n                className=\"px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-100 text-gray-900 dark:text-dark-900 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              >\r\n                <option value=\"all\">모든 상태</option>\r\n                <option value={TaskStatus.TODO}>시작 전</option>\r\n                <option value={TaskStatus.IN_PROGRESS}>진행중</option>\r\n                <option value={TaskStatus.REVIEW}>검토중</option>\r\n                <option value={TaskStatus.DONE}>완료</option>\r\n              </select>\r\n\r\n              {/* 우선순위 필터 */}\r\n              <select\r\n                value={priorityFilter}\r\n                onChange={e =>\r\n                  setPriorityFilter(e.target.value as TaskPriority | 'all')\r\n                }\r\n                className=\"px-3 py-2 border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-100 text-gray-900 dark:text-dark-900 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n              >\r\n                <option value=\"all\">모든 우선순위</option>\r\n                <option value={TaskPriority.LOW}>낮음</option>\r\n                <option value={TaskPriority.MEDIUM}>보통</option>\r\n                <option value={TaskPriority.HIGH}>높음</option>\r\n                <option value={TaskPriority.URGENT}>긴급</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-dark-300\">\r\n            <thead className=\"bg-gray-50 dark:bg-dark-200\">\r\n              <tr>\r\n                <th\r\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-dark-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-dark-300 transition-colors\"\r\n                  onClick={() => handleSort('title')}\r\n                >\r\n                  <div className=\"flex items-center space-x-1\">\r\n                    <span>{t('task.title')}</span>\r\n                    {sortBy === 'title' && (\r\n                      <svg\r\n                        className={`w-4 h-4 ${sortOrder === 'asc' ? 'rotate-180' : ''}`}\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 20 20\"\r\n                      >\r\n                        <path d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" />\r\n                      </svg>\r\n                    )}\r\n                  </div>\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-dark-500 uppercase tracking-wider\">\r\n                  {t('task.description')}\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-dark-500 uppercase tracking-wider\">\r\n                  {t('task.assignee')}\r\n                </th>\r\n                <th\r\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-dark-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-dark-300 transition-colors\"\r\n                  onClick={() => handleSort('status')}\r\n                >\r\n                  <div className=\"flex items-center space-x-1\">\r\n                    <span>{t('task.status')}</span>\r\n                    {sortBy === 'status' && (\r\n                      <svg\r\n                        className={`w-4 h-4 ${sortOrder === 'asc' ? 'rotate-180' : ''}`}\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 20 20\"\r\n                      >\r\n                        <path d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" />\r\n                      </svg>\r\n                    )}\r\n                  </div>\r\n                </th>\r\n                <th\r\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-dark-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-dark-300 transition-colors\"\r\n                  onClick={() => handleSort('priority')}\r\n                >\r\n                  <div className=\"flex items-center space-x-1\">\r\n                    <span>{t('task.priority')}</span>\r\n                    {sortBy === 'priority' && (\r\n                      <svg\r\n                        className={`w-4 h-4 ${sortOrder === 'asc' ? 'rotate-180' : ''}`}\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 20 20\"\r\n                      >\r\n                        <path d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" />\r\n                      </svg>\r\n                    )}\r\n                  </div>\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-dark-500 uppercase tracking-wider\">\r\n                  {t('task.startDate')}\r\n                </th>\r\n                <th\r\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-dark-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 dark:hover:bg-dark-300 transition-colors\"\r\n                  onClick={() => handleSort('dueDate')}\r\n                >\r\n                  <div className=\"flex items-center space-x-1\">\r\n                    <span>{t('task.dueDate')}</span>\r\n                    {sortBy === 'dueDate' && (\r\n                      <svg\r\n                        className={`w-4 h-4 ${sortOrder === 'asc' ? 'rotate-180' : ''}`}\r\n                        fill=\"currentColor\"\r\n                        viewBox=\"0 0 20 20\"\r\n                      >\r\n                        <path d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" />\r\n                      </svg>\r\n                    )}\r\n                  </div>\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-dark-500 uppercase tracking-wider\">\r\n                  {t('task.actions')}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white dark:bg-dark-100 divide-y divide-gray-200 dark:divide-dark-300\">\r\n              {paginatedTasks.map((task: Task) => (\r\n                <tr\r\n                  key={task.id}\r\n                  className=\"hover:bg-gray-50 dark:hover:bg-dark-200 transition-colors duration-200\"\r\n                >\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <div className=\"text-sm font-medium text-gray-900 dark:text-dark-900\">\r\n                      {task.title}\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"px-6 py-4\">\r\n                    <div className=\"text-sm text-gray-900 dark:text-dark-900 max-w-xs truncate\">\r\n                      {task.description}\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <div className=\"text-sm text-gray-900 dark:text-dark-900\">\r\n                      {task.assigneeId}\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <span\r\n                      className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(task.status)}`}\r\n                    >\r\n                      {getStatusText(task.status)}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <span\r\n                      className={`text-sm font-medium ${getPriorityColor(task.priority)}`}\r\n                    >\r\n                      {getPriorityText(task.priority)}\r\n                    </span>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-dark-900\">\r\n                    {task.startDate\r\n                      ? new Date(task.startDate).toLocaleDateString()\r\n                      : '-'}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-dark-900\">\r\n                    {task.dueDate\r\n                      ? new Date(task.dueDate).toLocaleDateString()\r\n                      : '-'}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n                    <div className=\"flex space-x-3\">\r\n                      {canUpdateTask(task) && (\r\n                        <button\r\n                          onClick={() => handleEdit(task)}\r\n                          className=\"text-blue-600 dark:text-blue-400 hover:text-blue-900 dark:hover:text-blue-300 transition-colors duration-200\"\r\n                        >\r\n                          편집\r\n                        </button>\r\n                      )}\r\n                      {canDeleteTask(task) && (\r\n                        <button\r\n                          onClick={() => handleDelete(task.id)}\r\n                          className=\"text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300 transition-colors duration-200\"\r\n                        >\r\n                          {t('task.deleteTask')}\r\n                        </button>\r\n                      )}\r\n                      {!canUpdateTask(task) && !canDeleteTask(task) && (\r\n                        <span className=\"text-gray-400 dark:text-dark-400\">\r\n                          -\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {/* 페이지네이션 */}\r\n        {totalPages > 1 && (\r\n          <div className=\"px-6 py-4 border-t border-gray-200 dark:border-dark-300 flex items-center justify-between\">\r\n            <div className=\"text-sm text-gray-700 dark:text-dark-700\">\r\n              {currentPage * itemsPerPage - itemsPerPage + 1}-\r\n              {Math.min(\r\n                currentPage * itemsPerPage,\r\n                filteredAndSortedTasks.length\r\n              )}{' '}\r\n              / {filteredAndSortedTasks.length}개 항목\r\n            </div>\r\n            <div className=\"flex space-x-1\">\r\n              <button\r\n                onClick={() => setCurrentPage(1)}\r\n                disabled={currentPage === 1}\r\n                className=\"px-3 py-1 text-sm border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-100 text-gray-700 dark:text-dark-700 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-dark-200\"\r\n              >\r\n                처음\r\n              </button>\r\n              <button\r\n                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\r\n                disabled={currentPage === 1}\r\n                className=\"px-3 py-1 text-sm border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-100 text-gray-700 dark:text-dark-700 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-dark-200\"\r\n              >\r\n                이전\r\n              </button>\r\n\r\n              {/* 페이지 번호 */}\r\n              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\r\n                const pageNum =\r\n                  Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;\r\n                if (pageNum > totalPages) return null;\r\n                return (\r\n                  <button\r\n                    key={pageNum}\r\n                    onClick={() => setCurrentPage(pageNum)}\r\n                    className={`px-3 py-1 text-sm border border-gray-300 dark:border-dark-400 rounded-md ${\r\n                      currentPage === pageNum\r\n                        ? 'bg-primary-500 text-white border-primary-500'\r\n                        : 'bg-white dark:bg-dark-100 text-gray-700 dark:text-dark-700 hover:bg-gray-50 dark:hover:bg-dark-200'\r\n                    }`}\r\n                  >\r\n                    {pageNum}\r\n                  </button>\r\n                );\r\n              })}\r\n\r\n              <button\r\n                onClick={() =>\r\n                  setCurrentPage(Math.min(totalPages, currentPage + 1))\r\n                }\r\n                disabled={currentPage === totalPages}\r\n                className=\"px-3 py-1 text-sm border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-100 text-gray-700 dark:text-dark-700 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-dark-200\"\r\n              >\r\n                다음\r\n              </button>\r\n              <button\r\n                onClick={() => setCurrentPage(totalPages)}\r\n                disabled={currentPage === totalPages}\r\n                className=\"px-3 py-1 text-sm border border-gray-300 dark:border-dark-400 rounded-md bg-white dark:bg-dark-100 text-gray-700 dark:text-dark-700 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50 dark:hover:bg-dark-200\"\r\n              >\r\n                마지막\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 편집 모달 */}\r\n      {showEditModal && editingTask && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white dark:bg-dark-100 rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"flex justify-between items-center p-6 border-b border-gray-200 dark:border-dark-300\">\r\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-dark-900\">\r\n                태스크 편집\r\n              </h2>\r\n              <button\r\n                onClick={handleEditClose}\r\n                className=\"text-gray-400 hover:text-gray-600 dark:text-dark-400 dark:hover:text-dark-600 transition-colors\"\r\n              >\r\n                <svg\r\n                  className=\"w-6 h-6\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M6 18L18 6M6 6l12 12\"\r\n                  />\r\n                </svg>\r\n              </button>\r\n            </div>\r\n            <div className=\"p-6\">\r\n              <CreateTaskForm\r\n                onTaskCreated={handleEditClose}\r\n                isModal={true}\r\n                editingTask={editingTask}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\TeamInvitationPage.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 115,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 115,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3197, 3200], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3197, 3200], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3338, 3341], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3338, 3341], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 123,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 123,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3352, 3386], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 160,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 160,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4265, 4268], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4265, 4268], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 161,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 161,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4279, 4313], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  CheckCircle,\r\n  XCircle,\r\n  Clock,\r\n  Users,\r\n  Mail,\r\n  Crown,\r\n  Shield,\r\n  Edit,\r\n  Eye,\r\n} from 'lucide-react';\r\nimport { httpsCallable } from 'firebase/functions';\r\nimport { functions } from '../config/firebase';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { TeamRole } from '../types/team';\r\n\r\ninterface InvitationDetails {\r\n  teamName: string;\r\n  inviterName: string;\r\n  role: TeamRole;\r\n  message?: string;\r\n  expiresAt: Date;\r\n  isExpired: boolean;\r\n}\r\n\r\nconst roleIcons = {\r\n  [TeamRole.OWNER]: Crown,\r\n  [TeamRole.ADMIN]: Shield,\r\n  [TeamRole.EDITOR]: Edit,\r\n  [TeamRole.VIEWER]: Eye,\r\n};\r\n\r\nconst roleColors = {\r\n  [TeamRole.OWNER]:\r\n    'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\r\n  [TeamRole.ADMIN]:\r\n    'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\r\n  [TeamRole.EDITOR]:\r\n    'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\r\n  [TeamRole.VIEWER]:\r\n    'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',\r\n};\r\n\r\nconst roleLabels = {\r\n  [TeamRole.OWNER]: '소유자',\r\n  [TeamRole.ADMIN]: '관리자',\r\n  [TeamRole.EDITOR]: '편집자',\r\n  [TeamRole.VIEWER]: '보기 전용',\r\n};\r\n\r\nconst roleDescriptions = {\r\n  [TeamRole.OWNER]: '팀의 모든 권한을 가지며, 팀을 관리할 수 있습니다.',\r\n  [TeamRole.ADMIN]: '팀 설정과 멤버를 관리할 수 있습니다.',\r\n  [TeamRole.EDITOR]: '작업을 생성, 수정, 삭제할 수 있습니다.',\r\n  [TeamRole.VIEWER]: '작업을 보고 댓글을 달 수 있습니다.',\r\n};\r\n\r\nexport const TeamInvitationPage: React.FC = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const { user, loading: authLoading } = useAuth();\r\n\r\n  const [invitation, setInvitation] = useState<InvitationDetails | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [result, setResult] = useState<{\r\n    type: 'success' | 'error' | 'expired' | 'invalid';\r\n    message: string;\r\n    teamName?: string;\r\n  } | null>(null);\r\n\r\n  const token = searchParams.get('token');\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      setResult({\r\n        type: 'invalid',\r\n        message: '유효하지 않은 초대 링크입니다.',\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // 실제 환경에서는 토큰을 검증하여 초대 정보를 가져옵니다\r\n    // 여기서는 시연을 위해 임시 데이터를 사용합니다\r\n    setTimeout(() => {\r\n      const mockInvitation: InvitationDetails = {\r\n        teamName: '마케팅팀',\r\n        inviterName: '김철수',\r\n        role: TeamRole.EDITOR,\r\n        message:\r\n          '마케팅팀에 함께하게 되어 기쁩니다! 궁금한 점이 있으면 언제든지 연락해주세요.',\r\n        expiresAt: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5일 후\r\n        isExpired: false,\r\n      };\r\n\r\n      setInvitation(mockInvitation);\r\n      setLoading(false);\r\n    }, 1000);\r\n  }, [token]);\r\n\r\n  const handleAcceptInvitation = async () => {\r\n    if (!user || !token) return;\r\n\r\n    setProcessing(true);\r\n    try {\r\n      const acceptInvitation = httpsCallable(functions, 'acceptTeamInvitation');\r\n      const result = await acceptInvitation({ token });\r\n\r\n      setResult({\r\n        type: 'success',\r\n        message: '팀 초대를 수락했습니다!',\r\n        teamName: (result.data as any).teamName,\r\n      });\r\n\r\n      // 3초 후 홈으로 리다이렉트\r\n      setTimeout(() => {\r\n        navigate('/');\r\n      }, 3000);\r\n    } catch (error: any) {\r\n      console.error('초대 수락 실패:', error);\r\n\r\n      if (error.code === 'functions/deadline-exceeded') {\r\n        setResult({\r\n          type: 'expired',\r\n          message: '초대장이 만료되었습니다.',\r\n        });\r\n      } else {\r\n        setResult({\r\n          type: 'error',\r\n          message: error.message || '초대 수락 중 오류가 발생했습니다.',\r\n        });\r\n      }\r\n    } finally {\r\n      setProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleRejectInvitation = async () => {\r\n    if (!user || !token) return;\r\n\r\n    if (!window.confirm('정말로 팀 초대를 거절하시겠습니까?')) return;\r\n\r\n    setProcessing(true);\r\n    try {\r\n      const rejectInvitation = httpsCallable(functions, 'rejectTeamInvitation');\r\n      await rejectInvitation({ token });\r\n\r\n      setResult({\r\n        type: 'success',\r\n        message: '팀 초대를 거절했습니다.',\r\n      });\r\n\r\n      // 3초 후 홈으로 리다이렉트\r\n      setTimeout(() => {\r\n        navigate('/');\r\n      }, 3000);\r\n    } catch (error: any) {\r\n      console.error('초대 거절 실패:', error);\r\n      setResult({\r\n        type: 'error',\r\n        message: error.message || '초대 거절 중 오류가 발생했습니다.',\r\n      });\r\n    } finally {\r\n      setProcessing(false);\r\n    }\r\n  };\r\n\r\n  if (authLoading || loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-4\">\r\n            초대장을 확인하는 중...\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n        <div className=\"max-w-md mx-auto text-center\">\r\n          <Mail size={64} className=\"mx-auto text-gray-400 mb-4\" />\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\r\n            로그인이 필요합니다\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\r\n            팀 초대를 수락하려면 먼저 로그인해주세요.\r\n          </p>\r\n          <button\r\n            onClick={() => navigate('/login')}\r\n            className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n          >\r\n            로그인하기\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (result) {\r\n    const icons = {\r\n      success: CheckCircle,\r\n      error: XCircle,\r\n      expired: Clock,\r\n      invalid: XCircle,\r\n    };\r\n\r\n    const colors = {\r\n      success: 'text-green-600',\r\n      error: 'text-red-600',\r\n      expired: 'text-orange-600',\r\n      invalid: 'text-red-600',\r\n    };\r\n\r\n    const Icon = icons[result.type];\r\n\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n        <div className=\"max-w-md mx-auto text-center\">\r\n          <Icon size={64} className={`mx-auto mb-4 ${colors[result.type]}`} />\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\r\n            {result.type === 'success'\r\n              ? '완료!'\r\n              : result.type === 'expired'\r\n                ? '만료됨'\r\n                : result.type === 'invalid'\r\n                  ? '유효하지 않음'\r\n                  : '오류'}\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\r\n            {result.message}\r\n          </p>\r\n          {result.type === 'success' && (\r\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n              3초 후 자동으로 홈으로 이동합니다...\r\n            </p>\r\n          )}\r\n          {result.type !== 'success' && (\r\n            <button\r\n              onClick={() => navigate('/')}\r\n              className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n            >\r\n              홈으로 돌아가기\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!invitation) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\r\n        <div className=\"max-w-md mx-auto text-center\">\r\n          <XCircle size={64} className=\"mx-auto text-red-600 mb-4\" />\r\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\r\n            초대장을 찾을 수 없습니다\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\r\n            유효하지 않거나 만료된 초대 링크입니다.\r\n          </p>\r\n          <button\r\n            onClick={() => navigate('/')}\r\n            className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n          >\r\n            홈으로 돌아가기\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const RoleIcon = roleIcons[invitation.role];\r\n  const isExpiringSoon =\r\n    invitation.expiresAt.getTime() - Date.now() < 24 * 60 * 60 * 1000; // 24시간 미만\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-12 px-4\">\r\n      <div className=\"max-w-2xl mx-auto\">\r\n        {/* 헤더 */}\r\n        <div className=\"text-center mb-8\">\r\n          <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n            <Users className=\"text-white\" size={32} />\r\n          </div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\r\n            팀 초대장\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">\r\n            {invitation.inviterName}님이 팀에 초대했습니다\r\n          </p>\r\n        </div>\r\n\r\n        {/* 초대 정보 카드 */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 mb-6\">\r\n          <div className=\"text-center mb-6\">\r\n            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2\">\r\n              {invitation.teamName}\r\n            </h2>\r\n            <div className=\"flex items-center justify-center gap-2\">\r\n              <span\r\n                className={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium ${roleColors[invitation.role]}`}\r\n              >\r\n                <RoleIcon size={16} />\r\n                {roleLabels[invitation.role]}\r\n              </span>\r\n            </div>\r\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm mt-2\">\r\n              {roleDescriptions[invitation.role]}\r\n            </p>\r\n          </div>\r\n\r\n          {/* 초대자 메시지 */}\r\n          {invitation.message && (\r\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 p-4 mb-6\">\r\n              <h3 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\r\n                {invitation.inviterName}님의 메시지:\r\n              </h3>\r\n              <p className=\"text-blue-800 dark:text-blue-200\">\r\n                {invitation.message}\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* 만료 경고 */}\r\n          {isExpiringSoon && !invitation.isExpired && (\r\n            <div className=\"bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-700 rounded-lg p-4 mb-6\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Clock size={16} className=\"text-orange-600\" />\r\n                <span className=\"font-medium text-orange-800 dark:text-orange-200\">\r\n                  곧 만료됩니다\r\n                </span>\r\n              </div>\r\n              <p className=\"text-orange-700 dark:text-orange-300 text-sm mt-1\">\r\n                이 초대장은{' '}\r\n                {invitation.expiresAt.toLocaleDateString('ko-KR', {\r\n                  month: 'long',\r\n                  day: 'numeric',\r\n                  hour: '2-digit',\r\n                  minute: '2-digit',\r\n                })}\r\n                에 만료됩니다.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* 사용자 정보 */}\r\n          <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-6\">\r\n            <h3 className=\"font-medium text-gray-900 dark:text-gray-100 mb-2\">\r\n              초대받은 계정\r\n            </h3>\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\r\n                {(user.name || user.email || 'U').charAt(0).toUpperCase()}\r\n              </div>\r\n              <div>\r\n                <p className=\"font-medium text-gray-900 dark:text-gray-100\">\r\n                  {user.name || user.email}\r\n                </p>\r\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                  {user.email}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 액션 버튼 */}\r\n          <div className=\"flex gap-4\">\r\n            <button\r\n              onClick={handleAcceptInvitation}\r\n              disabled={processing || invitation.isExpired}\r\n              className=\"flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n            >\r\n              {processing ? '처리 중...' : '초대 수락'}\r\n            </button>\r\n            <button\r\n              onClick={handleRejectInvitation}\r\n              disabled={processing || invitation.isExpired}\r\n              className=\"flex-1 bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300 py-3 px-6 rounded-lg font-medium hover:bg-gray-400 dark:hover:bg-gray-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n            >\r\n              거절\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 추가 정보 */}\r\n        <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\r\n          <p>\r\n            문제가 있나요?{' '}\r\n            <a\r\n              href=\"mailto:support@almus.com\"\r\n              className=\"text-blue-600 hover:underline\"\r\n            >\r\n              고객지원\r\n            </a>\r\n            에 문의하세요.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\TeamManagement.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TeamMember' is defined but never used.",
        "line": 4,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 36
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'TeamMember' is defined but never used.",
        "line": 4,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 36
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 33,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 33,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [1326, 1359], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport { Plus, Settings, Users, Edit2, Trash2, Crown } from 'lucide-react';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { Team, TeamRole, TeamMember } from '../types/team';\r\nimport { CreateTeamModal } from './CreateTeamModal';\r\nimport { EditTeamModal } from './EditTeamModal';\r\nimport { ManageTeamMembersModal } from './ManageTeamMembersModal';\r\nimport { useTeams } from '../hooks/useTeams';\r\n\r\nexport const TeamManagement: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const { teams, userTeams, currentTeam, switchTeam, deleteTeam } = useTeams();\r\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n  const [isMembersModalOpen, setIsMembersModalOpen] = useState(false);\r\n  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);\r\n\r\n  const handleEditTeam = (team: Team) => {\r\n    setSelectedTeam(team);\r\n    setIsEditModalOpen(true);\r\n  };\r\n\r\n  const handleManageMembers = (team: Team) => {\r\n    setSelectedTeam(team);\r\n    setIsMembersModalOpen(true);\r\n  };\r\n\r\n  const handleDeleteTeam = async (team: Team) => {\r\n    if (window.confirm(`정말로 \"${team.name}\" 팀을 삭제하시겠습니까?`)) {\r\n      try {\r\n        await deleteTeam(team.id);\r\n      } catch (error) {\r\n        console.error('팀 삭제 실패:', error);\r\n        alert('팀 삭제에 실패했습니다.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const getUserRole = (team: Team): TeamRole => {\r\n    if (team.ownerId === user?.id) return TeamRole.OWNER;\r\n    const membership = userTeams.find(ut => ut.teamId === team.id);\r\n    return membership?.role || TeamRole.VIEWER;\r\n  };\r\n\r\n  const canEdit = (team: Team): boolean => {\r\n    const role = getUserRole(team);\r\n    return role === TeamRole.OWNER || role === TeamRole.ADMIN;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-6xl mx-auto\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\r\n            팀 관리\r\n          </h1>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\r\n            팀을 생성하고 관리하여 효율적으로 협업하세요\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={() => setIsCreateModalOpen(true)}\r\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n        >\r\n          <Plus size={20} />새 팀 만들기\r\n        </button>\r\n      </div>\r\n\r\n      {/* 현재 팀 정보 */}\r\n      {currentTeam && (\r\n        <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg p-6 mb-6 border border-blue-200 dark:border-blue-700\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center\">\r\n                <Crown className=\"text-white\" size={24} />\r\n              </div>\r\n              <div>\r\n                <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">\r\n                  {currentTeam.name}\r\n                </h2>\r\n                <p className=\"text-gray-600 dark:text-gray-400\">\r\n                  현재 활성 팀 • 멤버 {currentTeam.memberCount}명\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              {canEdit(currentTeam) && (\r\n                <>\r\n                  <button\r\n                    onClick={() => handleManageMembers(currentTeam)}\r\n                    className=\"flex items-center gap-2 px-3 py-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/50 rounded-lg transition-colors\"\r\n                  >\r\n                    <Users size={16} />\r\n                    멤버 관리\r\n                  </button>\r\n                  <button\r\n                    onClick={() => handleEditTeam(currentTeam)}\r\n                    className=\"flex items-center gap-2 px-3 py-2 text-blue-600 hover:bg-blue-100 dark:hover:bg-blue-900/50 rounded-lg transition-colors\"\r\n                  >\r\n                    <Settings size={16} />\r\n                    설정\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* 팀 목록 */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n        {teams.map(team => {\r\n          const userRole = getUserRole(team);\r\n          const isCurrentTeam = currentTeam?.id === team.id;\r\n\r\n          return (\r\n            <div\r\n              key={team.id}\r\n              className={`bg-white dark:bg-gray-800 rounded-lg shadow-md border transition-all hover:shadow-lg ${\r\n                isCurrentTeam\r\n                  ? 'border-blue-500 ring-2 ring-blue-500/20'\r\n                  : 'border-gray-200 dark:border-gray-700'\r\n              }`}\r\n            >\r\n              <div className=\"p-6\">\r\n                <div className=\"flex items-start justify-between mb-4\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100\">\r\n                        {team.name}\r\n                      </h3>\r\n                      {userRole === TeamRole.OWNER && (\r\n                        <Crown size={16} className=\"text-yellow-500\" />\r\n                      )}\r\n                      {isCurrentTeam && (\r\n                        <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full\">\r\n                          현재 팀\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                    <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-3 line-clamp-2\">\r\n                      {team.description || '설명이 없습니다.'}\r\n                    </p>\r\n                    <div className=\"flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400\">\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <Users size={14} />\r\n                        {team.memberCount}명\r\n                      </div>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <span\r\n                          className={`w-2 h-2 rounded-full ${\r\n                            team.isActive ? 'bg-green-500' : 'bg-gray-400'\r\n                          }`}\r\n                        />\r\n                        {team.isActive ? '활성' : '비활성'}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  {!isCurrentTeam && (\r\n                    <button\r\n                      onClick={() => switchTeam(team.id)}\r\n                      className=\"flex-1 px-3 py-2 bg-blue-50 text-blue-600 hover:bg-blue-100 dark:bg-blue-900/30 dark:hover:bg-blue-900/50 rounded-lg transition-colors text-sm font-medium\"\r\n                    >\r\n                      팀 전환\r\n                    </button>\r\n                  )}\r\n                  {canEdit(team) && (\r\n                    <div className=\"flex gap-1\">\r\n                      <button\r\n                        onClick={() => handleEditTeam(team)}\r\n                        className=\"p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/30 rounded-lg transition-colors\"\r\n                        title=\"팀 편집\"\r\n                      >\r\n                        <Edit2 size={16} />\r\n                      </button>\r\n                      <button\r\n                        onClick={() => handleManageMembers(team)}\r\n                        className=\"p-2 text-gray-600 hover:text-green-600 hover:bg-green-50 dark:hover:bg-green-900/30 rounded-lg transition-colors\"\r\n                        title=\"멤버 관리\"\r\n                      >\r\n                        <Users size={16} />\r\n                      </button>\r\n                      {userRole === TeamRole.OWNER &&\r\n                        team.id !== currentTeam?.id && (\r\n                          <button\r\n                            onClick={() => handleDeleteTeam(team)}\r\n                            className=\"p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/30 rounded-lg transition-colors\"\r\n                            title=\"팀 삭제\"\r\n                          >\r\n                            <Trash2 size={16} />\r\n                          </button>\r\n                        )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {teams.length === 0 && (\r\n        <div className=\"text-center py-12\">\r\n          <Users size={48} className=\"mx-auto text-gray-400 mb-4\" />\r\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">\r\n            아직 팀이 없습니다\r\n          </h3>\r\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\r\n            첫 번째 팀을 만들어 협업을 시작해보세요\r\n          </p>\r\n          <button\r\n            onClick={() => setIsCreateModalOpen(true)}\r\n            className=\"inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n          >\r\n            <Plus size={20} />팀 만들기\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* 모달들 */}\r\n      <CreateTeamModal\r\n        isOpen={isCreateModalOpen}\r\n        onClose={() => setIsCreateModalOpen(false)}\r\n      />\r\n\r\n      {selectedTeam && (\r\n        <>\r\n          <EditTeamModal\r\n            isOpen={isEditModalOpen}\r\n            onClose={() => {\r\n              setIsEditModalOpen(false);\r\n              setSelectedTeam(null);\r\n            }}\r\n            team={selectedTeam}\r\n          />\r\n\r\n          <ManageTeamMembersModal\r\n            isOpen={isMembersModalOpen}\r\n            onClose={() => {\r\n              setIsMembersModalOpen(false);\r\n              setSelectedTeam(null);\r\n            }}\r\n            team={selectedTeam}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ThemeToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ViewSelector.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\collaboration\\CollaborationDemo.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 58,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 58,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [1805, 1870], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 66,
        "column": 37,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 66,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 70,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 70,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2120, 2123], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2120, 2123], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2239, 2242], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2239, 2242], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 76,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 76,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2283, 2322], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 81,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 81,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2424, 2468], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 275,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 275,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8564, 8567], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8564, 8567], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 297,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 297,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9267, 9270], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9267, 9270], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 322,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 322,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10137, 10140], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10137, 10140], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 337,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 337,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10765, 10768], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10765, 10768], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 359,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 359,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11604, 11607], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11604, 11607], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport { CollaborativeWorkspace } from './CollaborativeWorkspace';\r\nimport { CommentSystem } from './CommentSystem';\r\nimport { MentionNotifications } from './MentionNotifications';\r\nimport { CollaborativeTextEditor } from './CollaborativeTextEditor';\r\nimport { useWebSocket } from '../../services/websocket';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { useUserPresence } from '../../hooks/useUserPresence';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport {\r\n  Users,\r\n  MessageCircle,\r\n  Edit3,\r\n  Bell,\r\n  Wifi,\r\n  WifiOff,\r\n  Play,\r\n  Square,\r\n} from 'lucide-react';\r\n\r\ninterface DemoData {\r\n  title: string;\r\n  description: string;\r\n  content: string;\r\n}\r\n\r\nexport const CollaborationDemo: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const websocket = useWebSocket();\r\n  const { isOnline, onlineUsers, updateStatus } = useUserPresence();\r\n\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [currentDemo, setCurrentDemo] = useState<\r\n    'task' | 'project' | 'document'\r\n  >('task');\r\n  const [demoData, setDemoData] = useState<DemoData>({\r\n    title: '실시간 협업 데모 작업',\r\n    description: '이 작업은 실시간 협업 기능을 시연하기 위한 샘플 작업입니다.',\r\n    content:\r\n      '여기에 작업의 상세 내용을 입력하세요. 다른 사용자와 실시간으로 동시 편집이 가능합니다.',\r\n  });\r\n\r\n  // WebSocket 연결 초기화\r\n  useEffect(() => {\r\n    const initializeDemo = async () => {\r\n      if (!user) return;\r\n\r\n      try {\r\n        if (!websocket.isConnected()) {\r\n          await websocket.connect();\r\n        }\r\n        setIsConnected(true);\r\n        await updateStatus('ONLINE');\r\n      } catch (error) {\r\n        console.error('Failed to initialize collaboration demo:', error);\r\n        setIsConnected(false);\r\n      }\r\n    };\r\n\r\n    initializeDemo();\r\n\r\n    return () => {\r\n      updateStatus('OFFLINE').catch(console.error);\r\n    };\r\n  }, [user, websocket, updateStatus]);\r\n\r\n  const handleDataChange = (data: Record<string, any>) => {\r\n    setDemoData(prev => ({ ...prev, ...data }));\r\n  };\r\n\r\n  const handleSave = async (data: Record<string, any>) => {\r\n    // 실제 저장 로직 (API 호출 등)\r\n    console.log('Saving demo data:', data);\r\n\r\n    // 시뮬레이션: 저장 완료 후 피드백\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        console.log('Demo data saved successfully');\r\n        resolve(data);\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  const getDemoResourceId = () => {\r\n    return `demo-${currentDemo}-${Date.now()}`;\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'ONLINE':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'AWAY':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      case 'BUSY':\r\n        return 'bg-red-100 text-red-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'ONLINE':\r\n        return '🟢';\r\n      case 'AWAY':\r\n        return '🟡';\r\n      case 'BUSY':\r\n        return '🔴';\r\n      default:\r\n        return '⚫';\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-96\">\r\n        <Card className=\"w-96\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"text-center\">\r\n              <h3 className=\"text-lg font-semibold mb-2\">\r\n                로그인이 필요합니다\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                실시간 협업 기능을 사용하려면 먼저 로그인해주세요.\r\n              </p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto p-6 space-y-6\">\r\n      {/* 헤더 */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">실시간 협업 시스템 데모</h1>\r\n          <p className=\"text-gray-600 mt-2\">\r\n            동시 편집, 실시간 댓글, 멘션 시스템을 경험해보세요.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-4\">\r\n          {/* 연결 상태 */}\r\n          <div className=\"flex items-center gap-2\">\r\n            {isConnected ? (\r\n              <Wifi className=\"h-5 w-5 text-green-600\" />\r\n            ) : (\r\n              <WifiOff className=\"h-5 w-5 text-red-600\" />\r\n            )}\r\n            <span\r\n              className={`text-sm font-medium ${isConnected ? 'text-green-600' : 'text-red-600'}`}\r\n            >\r\n              {isConnected ? '연결됨' : '연결 안됨'}\r\n            </span>\r\n          </div>\r\n\r\n          {/* 멘션 알림 */}\r\n          <MentionNotifications />\r\n\r\n          {/* 상태 변경 버튼 */}\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant={isOnline ? 'default' : 'outline'}\r\n              size=\"sm\"\r\n              onClick={() => updateStatus(isOnline ? 'AWAY' : 'ONLINE')}\r\n            >\r\n              {isOnline ? (\r\n                <Square className=\"h-4 w-4\" />\r\n              ) : (\r\n                <Play className=\"h-4 w-4\" />\r\n              )}\r\n              {isOnline ? 'AWAY로 변경' : 'ONLINE으로 변경'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 통계 및 현재 사용자 정보 */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex items-center\">\r\n              <Users className=\"h-8 w-8 text-blue-600\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-2xl font-bold\">{onlineUsers.length}</p>\r\n                <p className=\"text-xs text-gray-600\">온라인 사용자</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex items-center\">\r\n              <MessageCircle className=\"h-8 w-8 text-green-600\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-2xl font-bold\">0</p>\r\n                <p className=\"text-xs text-gray-600\">실시간 댓글</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex items-center\">\r\n              <Edit3 className=\"h-8 w-8 text-purple-600\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-2xl font-bold\">1</p>\r\n                <p className=\"text-xs text-gray-600\">동시 편집 중</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex items-center\">\r\n              <Bell className=\"h-8 w-8 text-orange-600\" />\r\n              <div className=\"ml-4\">\r\n                <p className=\"text-2xl font-bold\">0</p>\r\n                <p className=\"text-xs text-gray-600\">새 멘션</p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* 온라인 사용자 목록 */}\r\n      {onlineUsers.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Users className=\"h-5 w-5\" />\r\n              온라인 사용자 ({onlineUsers.length}명)\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              {onlineUsers.map(user => (\r\n                <Badge\r\n                  key={user.userId}\r\n                  className={getStatusColor(user.status)}\r\n                >\r\n                  <span className=\"mr-1\">{getStatusIcon(user.status)}</span>\r\n                  User {user.userId}\r\n                  {user.isTyping && (\r\n                    <span className=\"ml-1 animate-pulse\">...</span>\r\n                  )}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* 데모 타입 선택 */}\r\n      <div className=\"flex items-center gap-4\">\r\n        <span className=\"font-medium\">데모 타입:</span>\r\n        <div className=\"flex gap-2\">\r\n          {[\r\n            { key: 'task', label: '작업', icon: '📋' },\r\n            { key: 'project', label: '프로젝트', icon: '📁' },\r\n            { key: 'document', label: '문서', icon: '📄' },\r\n          ].map(({ key, label, icon }) => (\r\n            <Button\r\n              key={key}\r\n              variant={currentDemo === key ? 'default' : 'outline'}\r\n              size=\"sm\"\r\n              onClick={() => setCurrentDemo(key as any)}\r\n            >\r\n              <span className=\"mr-1\">{icon}</span>\r\n              {label}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* 메인 데모 영역 */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* 협업 워크스페이스 */}\r\n        <div className=\"lg:col-span-2\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Edit3 className=\"h-5 w-5\" />\r\n                실시간 협업 워크스페이스\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"p-0\">\r\n              <CollaborativeWorkspace\r\n                resourceType={currentDemo.toUpperCase() as any}\r\n                resourceId={getDemoResourceId()}\r\n                title={demoData.title}\r\n                data={demoData}\r\n                onDataChange={handleDataChange}\r\n                onSave={handleSave}\r\n                className=\"border-0 rounded-none\"\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* 사이드바 */}\r\n        <div className=\"space-y-6\">\r\n          {/* 개별 에디터 테스트 */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-lg\">개별 에디터 테스트</CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">\r\n                  제목 편집\r\n                </label>\r\n                <CollaborativeTextEditor\r\n                  resourceType={currentDemo.toUpperCase() as any}\r\n                  resourceId={getDemoResourceId()}\r\n                  fieldPath=\"title\"\r\n                  initialValue={demoData.title}\r\n                  placeholder=\"제목을 입력하세요...\"\r\n                  onValueChange={value => handleDataChange({ title: value })}\r\n                  onSave={value => handleDataChange({ title: value })}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium mb-2\">\r\n                  내용 편집\r\n                </label>\r\n                <CollaborativeTextEditor\r\n                  resourceType={currentDemo.toUpperCase() as any}\r\n                  resourceId={getDemoResourceId()}\r\n                  fieldPath=\"content\"\r\n                  initialValue={demoData.content}\r\n                  placeholder=\"내용을 입력하세요...\"\r\n                  onValueChange={value => handleDataChange({ content: value })}\r\n                  onSave={value => handleDataChange({ content: value })}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* 댓글 시스템 */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <MessageCircle className=\"h-5 w-5\" />\r\n                실시간 댓글\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"p-0\">\r\n              <CommentSystem\r\n                resourceType={currentDemo.toUpperCase() as any}\r\n                resourceId={getDemoResourceId()}\r\n                className=\"border-0 rounded-none max-h-96\"\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 사용 방법 안내 */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>사용 방법</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs defaultValue=\"editing\" className=\"w-full\">\r\n            <TabsList>\r\n              <TabsTrigger value=\"editing\">실시간 편집</TabsTrigger>\r\n              <TabsTrigger value=\"comments\">댓글 시스템</TabsTrigger>\r\n              <TabsTrigger value=\"mentions\">멘션 기능</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"editing\" className=\"mt-4\">\r\n              <div className=\"space-y-3 text-sm\">\r\n                <p>\r\n                  <strong>동시 편집:</strong> 여러 사용자가 동시에 같은 문서를\r\n                  편집할 수 있습니다.\r\n                </p>\r\n                <p>\r\n                  <strong>실시간 동기화:</strong> 변경사항이 실시간으로 다른\r\n                  사용자들에게 반영됩니다.\r\n                </p>\r\n                <p>\r\n                  <strong>충돌 해결:</strong> Operational Transform 알고리즘으로\r\n                  편집 충돌을 자동 해결합니다.\r\n                </p>\r\n                <p>\r\n                  <strong>커서 표시:</strong> 다른 사용자의 커서 위치와 선택\r\n                  영역을 볼 수 있습니다.\r\n                </p>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"comments\" className=\"mt-4\">\r\n              <div className=\"space-y-3 text-sm\">\r\n                <p>\r\n                  <strong>실시간 댓글:</strong> 댓글이 실시간으로\r\n                  업데이트됩니다.\r\n                </p>\r\n                <p>\r\n                  <strong>답글 기능:</strong> 댓글에 답글을 달 수 있습니다.\r\n                </p>\r\n                <p>\r\n                  <strong>반응 기능:</strong> 댓글에 이모지 반응을 추가할 수\r\n                  있습니다.\r\n                </p>\r\n                <p>\r\n                  <strong>편집/삭제:</strong> 자신이 작성한 댓글을 편집하거나\r\n                  삭제할 수 있습니다.\r\n                </p>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"mentions\" className=\"mt-4\">\r\n              <div className=\"space-y-3 text-sm\">\r\n                <p>\r\n                  <strong>멘션 생성:</strong> @사용자명을 입력하여 다른 사용자를\r\n                  멘션할 수 있습니다.\r\n                </p>\r\n                <p>\r\n                  <strong>실시간 알림:</strong> 멘션된 사용자에게 실시간 알림이\r\n                  전송됩니다.\r\n                </p>\r\n                <p>\r\n                  <strong>알림 관리:</strong> 우측 상단의 벨 아이콘으로 멘션\r\n                  알림을 확인할 수 있습니다.\r\n                </p>\r\n                <p>\r\n                  <strong>자동 완성:</strong> @ 입력 시 사용자 목록이 자동으로\r\n                  표시됩니다.\r\n                </p>\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\collaboration\\CollaborativeTextEditor.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ConflictResolver' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ConflictResolver' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'UserPresence' is defined but never used.",
        "line": 15,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 42
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'UserPresence' is defined but never used.",
        "line": 15,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 42
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'localOperations' is assigned a value but never used.",
        "line": 83,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 25
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'localOperations' is assigned a value but never used.",
        "line": 83,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'remoteOperations' is assigned a value but never used.",
        "line": 84,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 26
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'remoteOperations' is assigned a value but never used.",
        "line": 84,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 26
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 141,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 141,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3579, 3625], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 173,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 173,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4446, 4503], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 524,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 524,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14177, 14180], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14177, 14180], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, {\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  useMemo,\r\n} from 'react';\r\nimport { useCollaborativeSession } from '../../hooks/useCollaborativeSession';\r\nimport { useUserPresence } from '../../hooks/useUserPresence';\r\nimport {\r\n  OperationalTransform,\r\n  TextOperation,\r\n  ConflictResolver,\r\n} from '../../utils/operationalTransform';\r\nimport type { EditOperation, UserPresence } from '../../services/websocket';\r\nimport './CollaborativeTextEditor.css';\r\n\r\ninterface CollaborativeTextEditorProps {\r\n  resourceType: 'TASK' | 'PROJECT' | 'DOCUMENT';\r\n  resourceId: string;\r\n  fieldPath: string;\r\n  initialValue: string;\r\n  placeholder?: string;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  onValueChange?: (value: string) => void;\r\n  onSave?: (value: string) => void;\r\n  debounceDelay?: number;\r\n}\r\n\r\ninterface CursorInfo {\r\n  userId: string;\r\n  userName: string;\r\n  position: number;\r\n  color: string;\r\n}\r\n\r\ninterface SelectionInfo {\r\n  userId: string;\r\n  userName: string;\r\n  start: number;\r\n  end: number;\r\n  color: string;\r\n}\r\n\r\nexport const CollaborativeTextEditor: React.FC<\r\n  CollaborativeTextEditorProps\r\n> = ({\r\n  resourceType,\r\n  resourceId,\r\n  fieldPath,\r\n  initialValue,\r\n  placeholder = '',\r\n  className = '',\r\n  disabled = false,\r\n  onValueChange,\r\n  onSave,\r\n  debounceDelay = 300,\r\n}) => {\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const [text, setText] = useState(initialValue);\r\n  const [isComposing, setIsComposing] = useState(false);\r\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\r\n\r\n  // 협업 세션 및 사용자 상태\r\n  const {\r\n    isActive: isSessionActive,\r\n    participants,\r\n    sendEditOperation,\r\n    updateCursor,\r\n    updateSelection,\r\n    setTyping,\r\n  } = useCollaborativeSession({\r\n    resourceType,\r\n    resourceId,\r\n    onEditOperation: handleRemoteEditOperation,\r\n    onConflictDetected: handleConflictDetected,\r\n  });\r\n\r\n  const { isOnline } = useUserPresence();\r\n\r\n  // 로컬 상태 관리\r\n  const [localOperations, setLocalOperations] = useState<EditOperation[]>([]);\r\n  const [remoteOperations, setRemoteOperations] = useState<EditOperation[]>([]);\r\n  const [cursors, setCursors] = useState<CursorInfo[]>([]);\r\n  const [selections, setSelections] = useState<SelectionInfo[]>([]);\r\n  const [typingUsers, setTypingUsers] = useState<Set<string>>(new Set());\r\n\r\n  // 사용자별 색상 매핑\r\n  const userColors = useMemo(() => {\r\n    const colors = [\r\n      '#FF6B6B',\r\n      '#4ECDC4',\r\n      '#45B7D1',\r\n      '#96CEB4',\r\n      '#FFEAA7',\r\n      '#DDA0DD',\r\n      '#98D8C8',\r\n      '#F7DC6F',\r\n      '#AED6F1',\r\n      '#A9DFBF',\r\n    ];\r\n    const colorMap = new Map<string, string>();\r\n\r\n    participants.forEach((participant, index) => {\r\n      colorMap.set(participant.userId, colors[index % colors.length]);\r\n    });\r\n\r\n    return colorMap;\r\n  }, [participants]);\r\n\r\n  // 디바운스된 저장 함수\r\n  const debounceSave = useCallback(\r\n    debounce((value: string) => {\r\n      onSave?.(value);\r\n      setHasUnsavedChanges(false);\r\n    }, debounceDelay),\r\n    [onSave, debounceDelay]\r\n  );\r\n\r\n  // 타이핑 상태 디바운스\r\n  const debounceStopTyping = useCallback(\r\n    debounce(() => {\r\n      setTyping(false, fieldPath);\r\n    }, 1000),\r\n    [setTyping, fieldPath]\r\n  );\r\n\r\n  // 원격 편집 작업 처리\r\n  function handleRemoteEditOperation(operation: EditOperation) {\r\n    if (operation.position.fieldPath !== fieldPath) return;\r\n\r\n    setRemoteOperations(prev => [...prev, operation]);\r\n\r\n    // 작업을 텍스트에 적용\r\n    applyRemoteOperation(operation);\r\n  }\r\n\r\n  // 충돌 감지 처리\r\n  function handleConflictDetected(operations: EditOperation[]) {\r\n    console.log('Conflict detected:', operations);\r\n\r\n    // 타임스탬프 기반으로 충돌 해결\r\n    const sortedOps = operations.sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n    // 각 작업을 순차적으로 적용\r\n    sortedOps.forEach(op => {\r\n      if (op.position.fieldPath === fieldPath) {\r\n        applyRemoteOperation(op);\r\n      }\r\n    });\r\n  }\r\n\r\n  // 원격 작업을 텍스트에 적용\r\n  const applyRemoteOperation = useCallback(\r\n    (operation: EditOperation) => {\r\n      setText(currentText => {\r\n        try {\r\n          // EditOperation을 TextOperation으로 변환\r\n          const textOp = convertEditOperationToTextOperation(\r\n            operation,\r\n            currentText\r\n          );\r\n\r\n          // 작업 적용\r\n          const newText = OperationalTransform.apply(currentText, textOp);\r\n\r\n          // 변경사항 통지\r\n          onValueChange?.(newText);\r\n\r\n          return newText;\r\n        } catch (error) {\r\n          console.error('Error applying remote operation:', error);\r\n          return currentText;\r\n        }\r\n      });\r\n    },\r\n    [onValueChange]\r\n  );\r\n\r\n  // EditOperation을 TextOperation으로 변환\r\n  const convertEditOperationToTextOperation = (\r\n    operation: EditOperation,\r\n    currentText: string\r\n  ): TextOperation => {\r\n    const position = operation.position.column;\r\n    const ops = [];\r\n\r\n    // Retain before position\r\n    if (position > 0) {\r\n      ops.push({ type: 'retain', length: position });\r\n    }\r\n\r\n    // Apply operation\r\n    switch (operation.type) {\r\n      case 'INSERT':\r\n        ops.push({ type: 'insert', text: operation.content || '' });\r\n        break;\r\n      case 'DELETE':\r\n        ops.push({ type: 'delete', length: operation.length || 1 });\r\n        break;\r\n      case 'REPLACE':\r\n        ops.push({ type: 'delete', length: operation.length || 1 });\r\n        ops.push({ type: 'insert', text: operation.content || '' });\r\n        break;\r\n    }\r\n\r\n    // Retain after position\r\n    const remainingLength =\r\n      currentText.length - position - (operation.length || 0);\r\n    if (remainingLength > 0) {\r\n      ops.push({ type: 'retain', length: remainingLength });\r\n    }\r\n\r\n    return {\r\n      ops,\r\n      baseLength: currentText.length,\r\n      targetLength: OperationalTransform.calculateTargetLength(\r\n        currentText.length,\r\n        ops\r\n      ),\r\n    };\r\n  };\r\n\r\n  // 로컬 편집 작업 생성 및 전송\r\n  const createAndSendEditOperation = useCallback(\r\n    (\r\n      type: 'INSERT' | 'DELETE' | 'REPLACE',\r\n      position: number,\r\n      content?: string,\r\n      length?: number\r\n    ) => {\r\n      if (!isSessionActive) return;\r\n\r\n      const operation = {\r\n        type,\r\n        position: {\r\n          line: 0, // 단순 텍스트 에디터에서는 항상 0\r\n          column: position,\r\n          fieldPath,\r\n        },\r\n        content,\r\n        length,\r\n      };\r\n\r\n      sendEditOperation(operation);\r\n\r\n      setLocalOperations(prev => [\r\n        ...prev,\r\n        {\r\n          ...operation,\r\n          id: `local_${Date.now()}`,\r\n          userId: 'current_user',\r\n          timestamp: Date.now(),\r\n        },\r\n      ]);\r\n    },\r\n    [isSessionActive, sendEditOperation, fieldPath]\r\n  );\r\n\r\n  // 텍스트 변경 핸들러\r\n  const handleTextChange = useCallback(\r\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n      if (disabled || isComposing) return;\r\n\r\n      const newValue = event.target.value;\r\n      const oldValue = text;\r\n\r\n      // 변경 감지 및 작업 생성\r\n      const cursorPosition = event.target.selectionStart || 0;\r\n\r\n      if (newValue.length > oldValue.length) {\r\n        // 삽입\r\n        const insertedText = newValue.slice(\r\n          oldValue.length === 0\r\n            ? 0\r\n            : cursorPosition - (newValue.length - oldValue.length),\r\n          cursorPosition\r\n        );\r\n        createAndSendEditOperation(\r\n          'INSERT',\r\n          cursorPosition - insertedText.length,\r\n          insertedText\r\n        );\r\n      } else if (newValue.length < oldValue.length) {\r\n        // 삭제\r\n        const deleteLength = oldValue.length - newValue.length;\r\n        createAndSendEditOperation(\r\n          'DELETE',\r\n          cursorPosition,\r\n          undefined,\r\n          deleteLength\r\n        );\r\n      }\r\n\r\n      setText(newValue);\r\n      onValueChange?.(newValue);\r\n      setHasUnsavedChanges(true);\r\n\r\n      // 타이핑 상태 업데이트\r\n      setTyping(true, fieldPath);\r\n      debounceStopTyping();\r\n\r\n      // 저장 디바운스\r\n      debounceSave(newValue);\r\n    },\r\n    [\r\n      disabled,\r\n      isComposing,\r\n      text,\r\n      createAndSendEditOperation,\r\n      onValueChange,\r\n      setTyping,\r\n      fieldPath,\r\n      debounceStopTyping,\r\n      debounceSave,\r\n    ]\r\n  );\r\n\r\n  // 커서 위치 변경 핸들러\r\n  const handleSelectionChange = useCallback(() => {\r\n    if (!textareaRef.current || !isSessionActive) return;\r\n\r\n    const textarea = textareaRef.current;\r\n    const start = textarea.selectionStart || 0;\r\n    const end = textarea.selectionEnd || 0;\r\n\r\n    // 커서 위치 업데이트\r\n    updateCursor({\r\n      line: 0,\r\n      column: start,\r\n      fieldPath,\r\n    });\r\n\r\n    // 선택 영역이 있는 경우\r\n    if (start !== end) {\r\n      updateSelection({\r\n        start: { line: 0, column: start, fieldPath },\r\n        end: { line: 0, column: end, fieldPath },\r\n      });\r\n    }\r\n  }, [isSessionActive, updateCursor, updateSelection, fieldPath]);\r\n\r\n  // 참가자 상태 업데이트\r\n  useEffect(() => {\r\n    const newCursors: CursorInfo[] = [];\r\n    const newSelections: SelectionInfo[] = [];\r\n    const newTypingUsers = new Set<string>();\r\n\r\n    participants.forEach(participant => {\r\n      const color = userColors.get(participant.userId) || '#999999';\r\n\r\n      // 타이핑 상태\r\n      if (participant.isTyping) {\r\n        newTypingUsers.add(participant.userId);\r\n      }\r\n\r\n      // 커서 위치\r\n      if (participant.cursor && participant.cursor.fieldPath === fieldPath) {\r\n        newCursors.push({\r\n          userId: participant.userId,\r\n          userName: `User ${participant.userId}`, // 실제로는 사용자 이름을 가져와야 함\r\n          position: participant.cursor.column,\r\n          color,\r\n        });\r\n      }\r\n\r\n      // 선택 영역\r\n      if (\r\n        participant.selection &&\r\n        participant.selection.start.fieldPath === fieldPath &&\r\n        participant.selection.end.fieldPath === fieldPath\r\n      ) {\r\n        newSelections.push({\r\n          userId: participant.userId,\r\n          userName: `User ${participant.userId}`,\r\n          start: participant.selection.start.column,\r\n          end: participant.selection.end.column,\r\n          color,\r\n        });\r\n      }\r\n    });\r\n\r\n    setCursors(newCursors);\r\n    setSelections(newSelections);\r\n    setTypingUsers(newTypingUsers);\r\n  }, [participants, userColors, fieldPath]);\r\n\r\n  // 키보드 단축키 처리\r\n  const handleKeyDown = useCallback(\r\n    (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n      // Ctrl+S로 저장\r\n      if (event.ctrlKey && event.key === 's') {\r\n        event.preventDefault();\r\n        onSave?.(text);\r\n        setHasUnsavedChanges(false);\r\n      }\r\n    },\r\n    [onSave, text]\r\n  );\r\n\r\n  // IME 처리\r\n  const handleCompositionStart = useCallback(() => {\r\n    setIsComposing(true);\r\n  }, []);\r\n\r\n  const handleCompositionEnd = useCallback(() => {\r\n    setIsComposing(false);\r\n  }, []);\r\n\r\n  // 초기값 동기화\r\n  useEffect(() => {\r\n    setText(initialValue);\r\n  }, [initialValue]);\r\n\r\n  return (\r\n    <div className={`collaborative-text-editor ${className}`}>\r\n      {/* 협업 상태 표시 */}\r\n      <div className=\"collaboration-status\">\r\n        <div className=\"connection-indicator\">\r\n          <span className={`status-dot ${isOnline ? 'online' : 'offline'}`} />\r\n          <span className=\"status-text\">\r\n            {isOnline ? (isSessionActive ? '협업 중' : '온라인') : '오프라인'}\r\n          </span>\r\n        </div>\r\n\r\n        {participants.length > 0 && (\r\n          <div className=\"participants-list\">\r\n            {participants.map(participant => (\r\n              <div\r\n                key={participant.userId}\r\n                className=\"participant\"\r\n                style={{ borderColor: userColors.get(participant.userId) }}\r\n              >\r\n                <span className=\"participant-name\">\r\n                  User {participant.userId} {/* 실제로는 사용자 이름 표시 */}\r\n                </span>\r\n                {participant.isTyping && (\r\n                  <span className=\"typing-indicator\">입력 중...</span>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 텍스트 에디터 */}\r\n      <div className=\"editor-container\">\r\n        <textarea\r\n          ref={textareaRef}\r\n          value={text}\r\n          onChange={handleTextChange}\r\n          onSelect={handleSelectionChange}\r\n          onKeyDown={handleKeyDown}\r\n          onCompositionStart={handleCompositionStart}\r\n          onCompositionEnd={handleCompositionEnd}\r\n          placeholder={placeholder}\r\n          disabled={disabled}\r\n          className=\"editor-textarea\"\r\n        />\r\n\r\n        {/* 다른 사용자의 커서 표시 */}\r\n        {cursors.map(cursor => (\r\n          <div\r\n            key={cursor.userId}\r\n            className=\"remote-cursor\"\r\n            style={{\r\n              borderColor: cursor.color,\r\n              left: `${getCursorPixelPosition(cursor.position)}px`,\r\n            }}\r\n          >\r\n            <div\r\n              className=\"cursor-label\"\r\n              style={{ backgroundColor: cursor.color }}\r\n            >\r\n              {cursor.userName}\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n        {/* 다른 사용자의 선택 영역 표시 */}\r\n        {selections.map(selection => (\r\n          <div\r\n            key={selection.userId}\r\n            className=\"remote-selection\"\r\n            style={{\r\n              backgroundColor: `${selection.color}33`,\r\n              left: `${getCursorPixelPosition(selection.start)}px`,\r\n              width: `${getCursorPixelPosition(selection.end) - getCursorPixelPosition(selection.start)}px`,\r\n            }}\r\n          >\r\n            <div\r\n              className=\"selection-label\"\r\n              style={{ backgroundColor: selection.color }}\r\n            >\r\n              {selection.userName}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* 상태 바 */}\r\n      <div className=\"editor-status\">\r\n        <div className=\"status-left\">\r\n          {hasUnsavedChanges && (\r\n            <span className=\"unsaved-indicator\">저장되지 않은 변경사항</span>\r\n          )}\r\n          {typingUsers.size > 0 && (\r\n            <span className=\"typing-users\">\r\n              {Array.from(typingUsers).join(', ')}님이 입력 중...\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div className=\"status-right\">\r\n          <span className=\"character-count\">{text.length} 글자</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 유틸리티 함수들\r\n\r\nfunction debounce<T extends (...args: any[]) => void>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: number | undefined;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout);\r\n    timeout = window.setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n\r\n// 커서 위치를 픽셀 단위로 변환 (간단한 구현)\r\nfunction getCursorPixelPosition(position: number): number {\r\n  // 실제로는 텍스트 렌더링을 기반으로 정확한 위치를 계산해야 함\r\n  // 여기서는 간단히 문자당 8px로 가정\r\n  return position * 8;\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\collaboration\\CollaborativeWorkspace.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [755, 758], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [755, 758], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 17,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 17,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [801, 804], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [801, 804], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [850, 853], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [850, 853], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'userId' is defined but never used.",
        "line": 32,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 9
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'userId' is defined but never used.",
        "line": 32,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'joinSession' is assigned a value but never used.",
        "line": 94,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 16
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'joinSession' is assigned a value but never used.",
        "line": 94,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'leaveSession' is assigned a value but never used.",
        "line": 95,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 17
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'leaveSession' is assigned a value but never used.",
        "line": 95,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'sendEditOperation' is assigned a value but never used.",
        "line": 96,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 22
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'sendEditOperation' is assigned a value but never used.",
        "line": 96,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 96,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'updateCursor' is assigned a value but never used.",
        "line": 97,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 17
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'updateCursor' is assigned a value but never used.",
        "line": 97,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'updateSelection' is assigned a value but never used.",
        "line": 98,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 20
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'updateSelection' is assigned a value but never used.",
        "line": 98,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 98,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'currentUserPresence' is assigned a value but never used.",
        "line": 111,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 24
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'currentUserPresence' is assigned a value but never used.",
        "line": 111,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'updatePresenceCursor' is assigned a value but never used.",
        "line": 115,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 39
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'updatePresenceCursor' is assigned a value but never used.",
        "line": 115,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'updatePresenceSelection' is assigned a value but never used.",
        "line": 116,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 45
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'updatePresenceSelection' is assigned a value but never used.",
        "line": 116,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 45
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 164,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 164,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4314, 4374], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 176,
        "column": 37,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 176,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 182,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 182,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4796, 4799], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4796, 4799], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 183,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 183,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4808, 4859], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 211,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 211,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5460, 5463], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5460, 5463], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 212,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 212,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5474, 5520], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 227,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 227,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5859, 5862], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5859, 5862], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 245,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 245,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6315, 6354], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 247,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 247,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6385, 6430], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useCallback } from 'react';\r\nimport { CollaborativeTextEditor } from './CollaborativeTextEditor';\r\nimport { CommentSystem } from './CommentSystem';\r\nimport { MentionNotifications } from './MentionNotifications';\r\nimport { useCollaborativeSession } from '../../hooks/useCollaborativeSession';\r\nimport { useUserPresence } from '../../hooks/useUserPresence';\r\nimport { useWebSocket } from '../../services/websocket';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport type { CommentType } from '@almus/shared-types';\r\nimport './CollaborativeWorkspace.css';\r\n\r\ninterface CollaborativeWorkspaceProps {\r\n  resourceType: 'TASK' | 'PROJECT' | 'DOCUMENT';\r\n  resourceId: string;\r\n  title?: string;\r\n  data: Record<string, any>;\r\n  onDataChange?: (data: Record<string, any>) => void;\r\n  onSave?: (data: Record<string, any>) => void;\r\n  className?: string;\r\n}\r\n\r\ninterface PresenceIndicatorProps {\r\n  userId: string;\r\n  userName: string;\r\n  color: string;\r\n  status: 'ONLINE' | 'AWAY' | 'BUSY' | 'OFFLINE';\r\n  isTyping: boolean;\r\n  currentField?: string;\r\n}\r\n\r\nconst PresenceIndicator: React.FC<PresenceIndicatorProps> = ({\r\n  userId,\r\n  userName,\r\n  color,\r\n  status,\r\n  isTyping,\r\n  currentField,\r\n}) => {\r\n  const getStatusIcon = () => {\r\n    switch (status) {\r\n      case 'ONLINE':\r\n        return '🟢';\r\n      case 'AWAY':\r\n        return '🟡';\r\n      case 'BUSY':\r\n        return '🔴';\r\n      default:\r\n        return '⚫';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"presence-indicator\" style={{ borderColor: color }}>\r\n      <div className=\"presence-avatar\" style={{ backgroundColor: color }}>\r\n        {userName.charAt(0).toUpperCase()}\r\n      </div>\r\n      <div className=\"presence-info\">\r\n        <div className=\"presence-name\">\r\n          <span className=\"status-icon\">{getStatusIcon()}</span>\r\n          {userName}\r\n        </div>\r\n        {isTyping && currentField && (\r\n          <div className=\"presence-activity\">{currentField}에서 입력 중...</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CollaborativeWorkspace: React.FC<CollaborativeWorkspaceProps> = ({\r\n  resourceType,\r\n  resourceId,\r\n  title,\r\n  data,\r\n  onDataChange,\r\n  onSave,\r\n  className = '',\r\n}) => {\r\n  const { user } = useAuth();\r\n  const websocket = useWebSocket();\r\n\r\n  const [localData, setLocalData] = useState(data);\r\n  const [activeTab, setActiveTab] = useState<'edit' | 'comments'>('edit');\r\n  const [isConnecting, setIsConnecting] = useState(true);\r\n  const [connectionError, setConnectionError] = useState<string | null>(null);\r\n\r\n  // 협업 세션 관리\r\n  const {\r\n    sessionId,\r\n    participants,\r\n    isActive: isSessionActive,\r\n    isConnecting: isSessionConnecting,\r\n    error: sessionError,\r\n    joinSession,\r\n    leaveSession,\r\n    sendEditOperation,\r\n    updateCursor,\r\n    updateSelection,\r\n    setTyping,\r\n    getTypingParticipants,\r\n  } = useCollaborativeSession({\r\n    resourceType,\r\n    resourceId,\r\n    autoJoin: true,\r\n    onEditOperation: handleEditOperation,\r\n    onConflictDetected: handleConflictDetected,\r\n  });\r\n\r\n  // 사용자 상태 관리\r\n  const {\r\n    currentUserPresence,\r\n    onlineUsers,\r\n    isOnline,\r\n    updateStatus,\r\n    updateCursor: updatePresenceCursor,\r\n    updateSelection: updatePresenceSelection,\r\n    setTyping: setPresenceTyping,\r\n  } = useUserPresence({\r\n    enableAutoUpdate: true,\r\n    enableRealtime: true,\r\n  });\r\n\r\n  // 사용자별 색상 매핑\r\n  const userColors = React.useMemo(() => {\r\n    const colors = [\r\n      '#FF6B6B',\r\n      '#4ECDC4',\r\n      '#45B7D1',\r\n      '#96CEB4',\r\n      '#FFEAA7',\r\n      '#DDA0DD',\r\n      '#98D8C8',\r\n      '#F7DC6F',\r\n      '#AED6F1',\r\n      '#A9DFBF',\r\n    ];\r\n    const colorMap = new Map<string, string>();\r\n\r\n    participants.forEach((participant, index) => {\r\n      colorMap.set(participant.userId, colors[index % colors.length]);\r\n    });\r\n\r\n    return colorMap;\r\n  }, [participants]);\r\n\r\n  // WebSocket 연결 초기화\r\n  useEffect(() => {\r\n    const initializeConnection = async () => {\r\n      if (!user) return;\r\n\r\n      setIsConnecting(true);\r\n      setConnectionError(null);\r\n\r\n      try {\r\n        if (!websocket.isConnected()) {\r\n          await websocket.connect();\r\n        }\r\n\r\n        // 상태를 온라인으로 설정\r\n        await updateStatus('ONLINE');\r\n\r\n        setIsConnecting(false);\r\n      } catch (error) {\r\n        console.error('Failed to initialize collaboration:', error);\r\n        setConnectionError(\r\n          error instanceof Error ? error.message : 'Connection failed'\r\n        );\r\n        setIsConnecting(false);\r\n      }\r\n    };\r\n\r\n    initializeConnection();\r\n\r\n    return () => {\r\n      // 정리\r\n      updateStatus('OFFLINE').catch(console.error);\r\n      websocket.disconnect();\r\n    };\r\n  }, [user, websocket, updateStatus]);\r\n\r\n  // 편집 작업 처리\r\n  function handleEditOperation(operation: any) {\r\n    console.log('Received edit operation:', operation);\r\n\r\n    // 실제 데이터 업데이트 로직\r\n    if (\r\n      operation.position.fieldPath &&\r\n      localData[operation.position.fieldPath] !== undefined\r\n    ) {\r\n      const updatedData = { ...localData };\r\n\r\n      // 작업 타입에 따른 처리\r\n      switch (operation.type) {\r\n        case 'INSERT':\r\n          // 텍스트 삽입 로직\r\n          break;\r\n        case 'DELETE':\r\n          // 텍스트 삭제 로직\r\n          break;\r\n        case 'REPLACE':\r\n          // 텍스트 교체 로직\r\n          break;\r\n      }\r\n\r\n      setLocalData(updatedData);\r\n      onDataChange?.(updatedData);\r\n    }\r\n  }\r\n\r\n  // 충돌 처리\r\n  function handleConflictDetected(operations: any[]) {\r\n    console.log('Conflict detected:', operations);\r\n\r\n    // 충돌 해결 UI 표시 또는 자동 해결\r\n    // 여기서는 간단히 타임스탬프 기반으로 해결\r\n    const resolvedOperations = operations.sort(\r\n      (a, b) => a.timestamp - b.timestamp\r\n    );\r\n\r\n    resolvedOperations.forEach(op => {\r\n      handleEditOperation(op);\r\n    });\r\n  }\r\n\r\n  // 데이터 변경 핸들러\r\n  const handleDataChange = useCallback(\r\n    (field: string, value: any) => {\r\n      const updatedData = { ...localData, [field]: value };\r\n      setLocalData(updatedData);\r\n      onDataChange?.(updatedData);\r\n\r\n      // 타이핑 상태 업데이트\r\n      setTyping(true, field);\r\n      setPresenceTyping(true, field);\r\n    },\r\n    [localData, onDataChange, setTyping, setPresenceTyping]\r\n  );\r\n\r\n  // 저장 핸들러\r\n  const handleSave = useCallback(async () => {\r\n    try {\r\n      await onSave?.(localData);\r\n\r\n      // 성공 피드백 (토스트 메시지 등)\r\n      console.log('Data saved successfully');\r\n    } catch (error) {\r\n      console.error('Failed to save data:', error);\r\n      // 에러 피드백\r\n    }\r\n  }, [localData, onSave]);\r\n\r\n  // 타이핑 참가자 목록\r\n  const typingParticipants = getTypingParticipants();\r\n\r\n  if (isConnecting) {\r\n    return (\r\n      <div className={`collaborative-workspace loading ${className}`}>\r\n        <div className=\"loading-content\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <p>협업 환경을 초기화하는 중...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (connectionError) {\r\n    return (\r\n      <div className={`collaborative-workspace error ${className}`}>\r\n        <div className=\"error-content\">\r\n          <div className=\"error-icon\">⚠️</div>\r\n          <h3>연결 오류</h3>\r\n          <p>{connectionError}</p>\r\n          <button\r\n            className=\"retry-btn\"\r\n            onClick={() => {\r\n              setConnectionError(null);\r\n              // 재연결 시도 로직\r\n            }}\r\n          >\r\n            다시 시도\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`collaborative-workspace ${className}`}>\r\n      {/* 헤더 */}\r\n      <div className=\"workspace-header\">\r\n        <div className=\"header-left\">\r\n          <h2 className=\"workspace-title\">{title}</h2>\r\n          <div className=\"collaboration-status\">\r\n            <div\r\n              className={`connection-indicator ${isOnline ? 'online' : 'offline'}`}\r\n            >\r\n              <span className=\"status-dot\"></span>\r\n              <span className=\"status-text\">\r\n                {isOnline ? '온라인' : '오프라인'}\r\n              </span>\r\n            </div>\r\n            {isSessionActive && (\r\n              <div className=\"session-info\">\r\n                <span className=\"session-id\">세션: {sessionId?.slice(-8)}</span>\r\n                <span className=\"participant-count\">\r\n                  {participants.length + 1}명 참여\r\n                </span>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"header-right\">\r\n          <MentionNotifications />\r\n          <button\r\n            className=\"save-btn\"\r\n            onClick={handleSave}\r\n            disabled={isSessionConnecting}\r\n          >\r\n            저장\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* 참가자 목록 */}\r\n      {participants.length > 0 && (\r\n        <div className=\"participants-bar\">\r\n          <div className=\"participants-label\">참가자:</div>\r\n          <div className=\"participants-list\">\r\n            {participants.map(participant => (\r\n              <PresenceIndicator\r\n                key={participant.userId}\r\n                userId={participant.userId}\r\n                userName={`User ${participant.userId}`} // 실제로는 사용자 이름 표시\r\n                color={userColors.get(participant.userId) || '#999999'}\r\n                status={participant.status}\r\n                isTyping={participant.isTyping}\r\n                currentField={participant.cursor?.fieldPath}\r\n              />\r\n            ))}\r\n          </div>\r\n\r\n          {typingParticipants.length > 0 && (\r\n            <div className=\"typing-indicator\">\r\n              {typingParticipants.map(p => `User ${p.userId}`).join(', ')}님이\r\n              입력 중...\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* 탭 네비게이션 */}\r\n      <div className=\"workspace-tabs\">\r\n        <button\r\n          className={`tab-btn ${activeTab === 'edit' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('edit')}\r\n        >\r\n          편집\r\n        </button>\r\n        <button\r\n          className={`tab-btn ${activeTab === 'comments' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('comments')}\r\n        >\r\n          댓글\r\n        </button>\r\n      </div>\r\n\r\n      {/* 콘텐츠 영역 */}\r\n      <div className=\"workspace-content\">\r\n        {activeTab === 'edit' ? (\r\n          <div className=\"edit-panel\">\r\n            {/* 제목 편집 */}\r\n            {localData.title !== undefined && (\r\n              <div className=\"field-group\">\r\n                <label htmlFor=\"title-editor\">제목</label>\r\n                <CollaborativeTextEditor\r\n                  resourceType={resourceType}\r\n                  resourceId={resourceId}\r\n                  fieldPath=\"title\"\r\n                  initialValue={localData.title || ''}\r\n                  placeholder=\"제목을 입력하세요...\"\r\n                  onValueChange={value => handleDataChange('title', value)}\r\n                  onSave={value => handleDataChange('title', value)}\r\n                  className=\"title-editor\"\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* 설명 편집 */}\r\n            {localData.description !== undefined && (\r\n              <div className=\"field-group\">\r\n                <label htmlFor=\"description-editor\">설명</label>\r\n                <CollaborativeTextEditor\r\n                  resourceType={resourceType}\r\n                  resourceId={resourceId}\r\n                  fieldPath=\"description\"\r\n                  initialValue={localData.description || ''}\r\n                  placeholder=\"설명을 입력하세요...\"\r\n                  onValueChange={value =>\r\n                    handleDataChange('description', value)\r\n                  }\r\n                  onSave={value => handleDataChange('description', value)}\r\n                  className=\"description-editor\"\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* 추가 필드들 */}\r\n            {Object.entries(localData).map(([key, value]) => {\r\n              if (key === 'title' || key === 'description') return null;\r\n              if (typeof value !== 'string') return null;\r\n\r\n              return (\r\n                <div key={key} className=\"field-group\">\r\n                  <label htmlFor={`${key}-editor`}>\r\n                    {key.charAt(0).toUpperCase() + key.slice(1)}\r\n                  </label>\r\n                  <CollaborativeTextEditor\r\n                    resourceType={resourceType}\r\n                    resourceId={resourceId}\r\n                    fieldPath={key}\r\n                    initialValue={value}\r\n                    placeholder={`${key}을(를) 입력하세요...`}\r\n                    onValueChange={newValue => handleDataChange(key, newValue)}\r\n                    onSave={newValue => handleDataChange(key, newValue)}\r\n                    className=\"field-editor\"\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div className=\"comments-panel\">\r\n            <CommentSystem\r\n              resourceType={resourceType as CommentType}\r\n              resourceId={resourceId}\r\n              className=\"workspace-comments\"\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 상태 바 */}\r\n      <div className=\"workspace-footer\">\r\n        <div className=\"footer-left\">\r\n          {sessionError && (\r\n            <div className=\"error-message\">세션 오류: {sessionError}</div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"footer-right\">\r\n          <div className=\"workspace-stats\">\r\n            <span>온라인: {onlineUsers.length}명</span>\r\n            <span>세션: {isSessionActive ? '활성' : '비활성'}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\collaboration\\CommentSystem.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'useMemo' is defined but never used.",
        "line": 1,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 53
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useMemo' is defined but never used.",
        "line": 1,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 53
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'FirestoreCommentReaction' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 27
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'FirestoreCommentReaction' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'mentionQuery' is assigned a value but never used.",
        "line": 52,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 22
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'mentionQuery' is assigned a value but never used.",
        "line": 52,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'cursorPosition' is assigned a value but never used.",
        "line": 53,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 24
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'cursorPosition' is assigned a value but never used.",
        "line": 53,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 24
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 68,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 68,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2058, 2114], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 76,
        "column": 38,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 76,
        "endColumn": 51
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·resourceType:·string;·resourceId:·string;·comment:·FirestoreComment` with `␍⏎······resourceType:·string;␍⏎······resourceId:·string;␍⏎······comment:·FirestoreComment;␍⏎···`",
        "line": 82,
        "column": 40,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 82,
        "endColumn": 108,
        "fix": {
          "range": [2394, 2462],
          "text": "\r\n      resourceType: string;\r\n      resourceId: string;\r\n      comment: FirestoreComment;\r\n   "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·resourceType:·string;·resourceId:·string;·comment:·FirestoreComment` with `␍⏎······resourceType:·string;␍⏎······resourceId:·string;␍⏎······comment:·FirestoreComment;␍⏎···`",
        "line": 92,
        "column": 42,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 92,
        "endColumn": 110,
        "fix": {
          "range": [2777, 2845],
          "text": "\r\n      resourceType: string;\r\n      resourceId: string;\r\n      comment: FirestoreComment;\r\n   "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·resourceType:·string;·resourceId:·string;·commentId:·string` with `␍⏎······resourceType:·string;␍⏎······resourceId:·string;␍⏎······commentId:·string;␍⏎···`",
        "line": 102,
        "column": 42,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 102,
        "endColumn": 102,
        "fix": {
          "range": [3171, 3231],
          "text": "\r\n      resourceType: string;\r\n      resourceId: string;\r\n      commentId: string;\r\n   "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `{·userId:·'user1',·emoji:·'👍',·createdAt:·{·seconds:·Math.floor(Date.now()·/·1000),·nanoseconds:·0,·toDate:·()·=>·new·Date(),·toMillis:·()·=>·Date.now(),·isEqual:·()·=>·false,·toJSON:·()·=>·new·Date().toISOString()·}·}` with `␍⏎············{␍⏎··············userId:·'user1',␍⏎··············emoji:·'👍',␍⏎··············createdAt:·{␍⏎················seconds:·Math.floor(Date.now()·/·1000),␍⏎················nanoseconds:·0,␍⏎················toDate:·()·=>·new·Date(),␍⏎················toMillis:·()·=>·Date.now(),␍⏎················isEqual:·()·=>·false,␍⏎················toJSON:·()·=>·new·Date().toISOString(),␍⏎··············},␍⏎············},␍⏎··········`",
        "line": 157,
        "column": 23,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 157,
        "endColumn": 242,
        "fix": {
          "range": [4903, 5122],
          "text": "\r\n            {\r\n              userId: 'user1',\r\n              emoji: '👍',\r\n              createdAt: {\r\n                seconds: Math.floor(Date.now() / 1000),\r\n                nanoseconds: 0,\r\n                toDate: () => new Date(),\r\n                toMillis: () => Date.now(),\r\n                isEqual: () => false,\r\n                toJSON: () => new Date().toISOString(),\r\n              },\r\n            },\r\n          "
        }
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 172,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 172,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5499, 5548], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 368,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 368,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [11252, 11300], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 380,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 380,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [11579, 11627], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 390,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 390,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [11835, 11885], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 396,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 396,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [12007, 12050], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 4,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { useWebSocket } from '../../services/websocket';\r\nimport type {\r\n  FirestoreComment,\r\n  FirestoreCommentReaction,\r\n  CommentType,\r\n} from '@almus/shared-types';\r\nimport { Timestamp } from 'firebase/firestore';\r\n\r\ninterface CommentSystemProps {\r\n  resourceType: CommentType;\r\n  resourceId: string;\r\n  className?: string;\r\n}\r\n\r\ninterface Comment\r\n  extends Omit<\r\n    FirestoreComment,\r\n    'createdAt' | 'updatedAt' | 'editedAt' | 'deletedAt'\r\n  > {\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  editedAt?: Date;\r\n  deletedAt?: Date;\r\n  author?: {\r\n    id: string;\r\n    name: string;\r\n    avatar?: string;\r\n  };\r\n  replies?: Comment[];\r\n}\r\n\r\nexport const CommentSystem: React.FC<CommentSystemProps> = ({\r\n  resourceType,\r\n  resourceId,\r\n  className = '',\r\n}) => {\r\n  const { user } = useAuth();\r\n  const websocket = useWebSocket();\r\n\r\n  const [comments, setComments] = useState<Comment[]>([]);\r\n  const [newComment, setNewComment] = useState('');\r\n  const [replyingTo, setReplyingTo] = useState<string | null>(null);\r\n  const [editingComment, setEditingComment] = useState<string | null>(null);\r\n  const [editContent, setEditContent] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [mentionUsers, setMentionUsers] = useState<\r\n    Array<{ id: string; name: string; email: string }>\r\n  >([]);\r\n  const [showMentionDropdown, setShowMentionDropdown] = useState(false);\r\n  const [mentionQuery, setMentionQuery] = useState('');\r\n  const [cursorPosition, setCursorPosition] = useState(0);\r\n\r\n  const commentInputRef = useRef<HTMLTextAreaElement>(null);\r\n  const mentionDropdownRef = useRef<HTMLDivElement>(null);\r\n\r\n  // 댓글 목록 로드\r\n  useEffect(() => {\r\n    loadComments();\r\n\r\n    // WebSocket 연결 및 세션 참여\r\n    const initializeCollaboration = async () => {\r\n      if (websocket.isConnected()) {\r\n        try {\r\n          await websocket.joinSession(resourceType, resourceId);\r\n        } catch (error) {\r\n          console.error('Failed to join comment session:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    initializeCollaboration();\r\n\r\n    return () => {\r\n      websocket.leaveSession().catch(console.error);\r\n    };\r\n  }, [resourceType, resourceId, websocket]);\r\n\r\n  // WebSocket 이벤트 리스너\r\n  useEffect(() => {\r\n    const handleCommentAdded = (data: { resourceType: string; resourceId: string; comment: FirestoreComment }) => {\r\n      if (\r\n        data.resourceType === resourceType &&\r\n        data.resourceId === resourceId\r\n      ) {\r\n        const newComment = transformFirestoreComment(data.comment);\r\n        setComments(prev => addCommentToTree(prev, newComment));\r\n      }\r\n    };\r\n\r\n    const handleCommentUpdated = (data: { resourceType: string; resourceId: string; comment: FirestoreComment }) => {\r\n      if (\r\n        data.resourceType === resourceType &&\r\n        data.resourceId === resourceId\r\n      ) {\r\n        const updatedComment = transformFirestoreComment(data.comment);\r\n        setComments(prev => updateCommentInTree(prev, updatedComment));\r\n      }\r\n    };\r\n\r\n    const handleCommentDeleted = (data: { resourceType: string; resourceId: string; commentId: string }) => {\r\n      if (\r\n        data.resourceType === resourceType &&\r\n        data.resourceId === resourceId\r\n      ) {\r\n        setComments(prev => deleteCommentFromTree(prev, data.commentId));\r\n      }\r\n    };\r\n\r\n    websocket.on('comment-added', handleCommentAdded);\r\n    websocket.on('comment-updated', handleCommentUpdated);\r\n    websocket.on('comment-deleted', handleCommentDeleted);\r\n\r\n    return () => {\r\n      websocket.off('comment-added', handleCommentAdded);\r\n      websocket.off('comment-updated', handleCommentUpdated);\r\n      websocket.off('comment-deleted', handleCommentDeleted);\r\n    };\r\n  }, [websocket, resourceType, resourceId]);\r\n\r\n  const loadComments = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // useComments 훅을 사용하여 실제 댓글 로드\r\n      // 임시로 빈 배열로 설정 (실제 구현에서는 Firebase에서 로드)\r\n      const mockComments: Comment[] = [\r\n        {\r\n          id: '1',\r\n          resourceType,\r\n          resourceId,\r\n          authorId: 'user1',\r\n          content: '첫 번째 댓글입니다.',\r\n          mentions: [],\r\n          isEdited: false,\r\n          isDeleted: false,\r\n          reactions: [],\r\n          attachments: [],\r\n          createdAt: new Date(Date.now() - 3600000),\r\n          updatedAt: new Date(Date.now() - 3600000),\r\n          author: {\r\n            id: 'user1',\r\n            name: 'John Doe',\r\n            avatar: undefined,\r\n          },\r\n          replies: [],\r\n        },\r\n        {\r\n          id: '2',\r\n          resourceType,\r\n          resourceId,\r\n          authorId: 'user2',\r\n          content: '두 번째 댓글입니다. @John 확인해주세요!',\r\n          mentions: ['user1'],\r\n          isEdited: false,\r\n          isDeleted: false,\r\n          reactions: [{ userId: 'user1', emoji: '👍', createdAt: { seconds: Math.floor(Date.now() / 1000), nanoseconds: 0, toDate: () => new Date(), toMillis: () => Date.now(), isEqual: () => false, toJSON: () => new Date().toISOString() } }],\r\n          attachments: [],\r\n          createdAt: new Date(Date.now() - 1800000),\r\n          updatedAt: new Date(Date.now() - 1800000),\r\n          author: {\r\n            id: 'user2',\r\n            name: 'Jane Smith',\r\n            avatar: undefined,\r\n          },\r\n          replies: [],\r\n        },\r\n      ];\r\n\r\n      setComments(mockComments);\r\n    } catch (error) {\r\n      console.error('Failed to load comments:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const transformFirestoreComment = (\r\n    firestoreComment: FirestoreComment\r\n  ): Comment => {\r\n    return {\r\n      ...firestoreComment,\r\n      createdAt:\r\n        firestoreComment.createdAt instanceof Timestamp\r\n          ? firestoreComment.createdAt.toDate()\r\n          : new Date(firestoreComment.createdAt as string | number),\r\n      updatedAt:\r\n        firestoreComment.updatedAt instanceof Timestamp\r\n          ? firestoreComment.updatedAt.toDate()\r\n          : new Date(firestoreComment.updatedAt as string | number),\r\n      editedAt:\r\n        firestoreComment.editedAt instanceof Timestamp\r\n          ? firestoreComment.editedAt.toDate()\r\n          : firestoreComment.editedAt\r\n            ? new Date(firestoreComment.editedAt as string | number)\r\n            : undefined,\r\n      deletedAt:\r\n        firestoreComment.deletedAt instanceof Timestamp\r\n          ? firestoreComment.deletedAt.toDate()\r\n          : firestoreComment.deletedAt\r\n            ? new Date(firestoreComment.deletedAt as string | number)\r\n            : undefined,\r\n      replies: [],\r\n    };\r\n  };\r\n\r\n  const addCommentToTree = (\r\n    comments: Comment[],\r\n    newComment: Comment\r\n  ): Comment[] => {\r\n    if (!newComment.parentCommentId) {\r\n      return [...comments, newComment];\r\n    }\r\n\r\n    return comments.map(comment => {\r\n      if (comment.id === newComment.parentCommentId) {\r\n        return {\r\n          ...comment,\r\n          replies: [...(comment.replies || []), newComment],\r\n        };\r\n      }\r\n      if (comment.replies && comment.replies.length > 0) {\r\n        return {\r\n          ...comment,\r\n          replies: addCommentToTree(comment.replies, newComment),\r\n        };\r\n      }\r\n      return comment;\r\n    });\r\n  };\r\n\r\n  const updateCommentInTree = (\r\n    comments: Comment[],\r\n    updatedComment: Comment\r\n  ): Comment[] => {\r\n    return comments.map(comment => {\r\n      if (comment.id === updatedComment.id) {\r\n        return { ...comment, ...updatedComment };\r\n      }\r\n      if (comment.replies && comment.replies.length > 0) {\r\n        return {\r\n          ...comment,\r\n          replies: updateCommentInTree(comment.replies, updatedComment),\r\n        };\r\n      }\r\n      return comment;\r\n    });\r\n  };\r\n\r\n  const deleteCommentFromTree = (\r\n    comments: Comment[],\r\n    commentId: string\r\n  ): Comment[] => {\r\n    return comments.reduce((acc, comment) => {\r\n      if (comment.id === commentId) {\r\n        // 댓글을 삭제된 상태로 표시\r\n        acc.push({\r\n          ...comment,\r\n          isDeleted: true,\r\n          deletedAt: new Date(),\r\n          content: '[삭제된 댓글입니다]',\r\n        });\r\n      } else {\r\n        if (comment.replies && comment.replies.length > 0) {\r\n          acc.push({\r\n            ...comment,\r\n            replies: deleteCommentFromTree(comment.replies, commentId),\r\n          });\r\n        } else {\r\n          acc.push(comment);\r\n        }\r\n      }\r\n      return acc;\r\n    }, [] as Comment[]);\r\n  };\r\n\r\n  // 멘션 기능\r\n  const handleInputChange = (value: string) => {\r\n    setNewComment(value);\r\n\r\n    // @ 멘션 감지\r\n    const cursorPos = commentInputRef.current?.selectionStart || 0;\r\n    const textBeforeCursor = value.slice(0, cursorPos);\r\n    const mentionMatch = textBeforeCursor.match(/@(\\w*)$/);\r\n\r\n    if (mentionMatch) {\r\n      setMentionQuery(mentionMatch[1]);\r\n      setShowMentionDropdown(true);\r\n      setCursorPosition(cursorPos);\r\n      // 실제로는 사용자 검색 API 호출\r\n      searchUsers(mentionMatch[1]);\r\n    } else {\r\n      setShowMentionDropdown(false);\r\n      setMentionQuery('');\r\n    }\r\n  };\r\n\r\n  const searchUsers = async (query: string) => {\r\n    // 임시 사용자 목록 (실제로는 API에서 가져와야 함)\r\n    const mockUsers = [\r\n      { id: '1', name: 'John Doe', email: 'john@example.com' },\r\n      { id: '2', name: 'Jane Smith', email: 'jane@example.com' },\r\n      { id: '3', name: 'Mike Johnson', email: 'mike@example.com' },\r\n    ];\r\n\r\n    const filtered = mockUsers.filter(user =>\r\n      user.name.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n    setMentionUsers(filtered);\r\n  };\r\n\r\n  const insertMention = (user: { id: string; name: string; email: string }) => {\r\n    if (!commentInputRef.current) return;\r\n\r\n    const cursorPos = commentInputRef.current.selectionStart || 0;\r\n    const textBeforeCursor = newComment.slice(0, cursorPos);\r\n    const textAfterCursor = newComment.slice(cursorPos);\r\n\r\n    // @ 이후의 텍스트를 멘션으로 교체\r\n    const beforeMention = textBeforeCursor.replace(/@\\w*$/, '');\r\n    const mentionText = `@${user.name} `;\r\n    const newText = beforeMention + mentionText + textAfterCursor;\r\n\r\n    setNewComment(newText);\r\n    setShowMentionDropdown(false);\r\n    setMentionQuery('');\r\n\r\n    // 커서 위치를 멘션 다음으로 이동\r\n    setTimeout(() => {\r\n      if (commentInputRef.current) {\r\n        const newCursorPos = beforeMention.length + mentionText.length;\r\n        commentInputRef.current.setSelectionRange(newCursorPos, newCursorPos);\r\n        commentInputRef.current.focus();\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  const extractMentions = (content: string): string[] => {\r\n    const mentionRegex = /@(\\w+)/g;\r\n    const mentions = [];\r\n    let match;\r\n\r\n    while ((match = mentionRegex.exec(content)) !== null) {\r\n      mentions.push(match[1]);\r\n    }\r\n\r\n    return mentions;\r\n  };\r\n\r\n  const handleSubmitComment = async () => {\r\n    if (!newComment.trim() || !user) return;\r\n\r\n    const mentions = extractMentions(newComment);\r\n\r\n    const commentData = {\r\n      resourceType,\r\n      resourceId,\r\n      content: newComment.trim(),\r\n      mentions,\r\n      parentCommentId: replyingTo,\r\n    };\r\n\r\n    try {\r\n      websocket.sendComment(commentData);\r\n      setNewComment('');\r\n      setReplyingTo(null);\r\n    } catch (error) {\r\n      console.error('Failed to send comment:', error);\r\n    }\r\n  };\r\n\r\n  const handleEditComment = async (commentId: string) => {\r\n    if (!editContent.trim()) return;\r\n\r\n    try {\r\n      websocket.updateComment(commentId, editContent.trim());\r\n      setEditingComment(null);\r\n      setEditContent('');\r\n    } catch (error) {\r\n      console.error('Failed to edit comment:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteComment = async (commentId: string) => {\r\n    if (!confirm('댓글을 삭제하시겠습니까?')) return;\r\n\r\n    try {\r\n      websocket.deleteComment(commentId);\r\n    } catch (error) {\r\n      console.error('Failed to delete comment:', error);\r\n    }\r\n  };\r\n\r\n  const handleReaction = async (commentId: string, emoji: string) => {\r\n    // 실제로는 reaction API 호출\r\n    console.log('Reaction:', commentId, emoji);\r\n  };\r\n\r\n  const renderComment = (comment: Comment, level: number = 0) => {\r\n    const isEditing = editingComment === comment.id;\r\n    const canEdit = comment.authorId === user?.id && !comment.isDeleted;\r\n    const canDelete = comment.authorId === user?.id && !comment.isDeleted;\r\n\r\n    return (\r\n      <div\r\n        key={comment.id}\r\n        className={`comment ${level > 0 ? 'reply' : ''}`}\r\n        style={{ marginLeft: level * 20 }}\r\n      >\r\n        <div className=\"comment-header\">\r\n          <div className=\"comment-author\">\r\n            {comment.author?.avatar && (\r\n              <img src={comment.author.avatar} alt=\"\" className=\"avatar\" />\r\n            )}\r\n            <span className=\"author-name\">\r\n              {comment.author?.name || 'Unknown User'}\r\n            </span>\r\n            <span className=\"comment-time\">\r\n              {comment.createdAt.toLocaleString()}\r\n              {comment.isEdited && (\r\n                <span className=\"edited-indicator\"> (편집됨)</span>\r\n              )}\r\n            </span>\r\n          </div>\r\n\r\n          {!comment.isDeleted && (\r\n            <div className=\"comment-actions\">\r\n              <button\r\n                onClick={() => setReplyingTo(comment.id)}\r\n                className=\"reply-btn\"\r\n              >\r\n                답글\r\n              </button>\r\n              {canEdit && (\r\n                <button\r\n                  onClick={() => {\r\n                    setEditingComment(comment.id);\r\n                    setEditContent(comment.content);\r\n                  }}\r\n                  className=\"edit-btn\"\r\n                >\r\n                  편집\r\n                </button>\r\n              )}\r\n              {canDelete && (\r\n                <button\r\n                  onClick={() => handleDeleteComment(comment.id)}\r\n                  className=\"delete-btn\"\r\n                >\r\n                  삭제\r\n                </button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"comment-content\">\r\n          {isEditing ? (\r\n            <div className=\"edit-form\">\r\n              <textarea\r\n                value={editContent}\r\n                onChange={e => setEditContent(e.target.value)}\r\n                className=\"edit-textarea\"\r\n              />\r\n              <div className=\"edit-actions\">\r\n                <button\r\n                  onClick={() => handleEditComment(comment.id)}\r\n                  className=\"save-btn\"\r\n                >\r\n                  저장\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    setEditingComment(null);\r\n                    setEditContent('');\r\n                  }}\r\n                  className=\"cancel-btn\"\r\n                >\r\n                  취소\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"comment-text\">\r\n                {renderCommentWithMentions(comment.content)}\r\n              </div>\r\n\r\n              {!comment.isDeleted && (\r\n                <div className=\"comment-reactions\">\r\n                  {comment.reactions.map((reaction, index) => (\r\n                    <button\r\n                      key={index}\r\n                      className={`reaction ${reaction.userId === user?.id ? 'active' : ''}`}\r\n                      onClick={() => handleReaction(comment.id, reaction.emoji)}\r\n                    >\r\n                      {reaction.emoji}\r\n                    </button>\r\n                  ))}\r\n                  <button\r\n                    className=\"add-reaction\"\r\n                    onClick={() => handleReaction(comment.id, '👍')}\r\n                  >\r\n                    +\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {comment.replies &&\r\n          comment.replies.map(reply => renderComment(reply, level + 1))}\r\n\r\n        {replyingTo === comment.id && (\r\n          <div className=\"reply-form\" style={{ marginLeft: 20 }}>\r\n            <textarea\r\n              value={newComment}\r\n              onChange={e => handleInputChange(e.target.value)}\r\n              placeholder=\"답글을 입력하세요...\"\r\n              className=\"reply-textarea\"\r\n              ref={commentInputRef}\r\n            />\r\n            {showMentionDropdown && (\r\n              <div className=\"mention-dropdown\" ref={mentionDropdownRef}>\r\n                {mentionUsers.map(user => (\r\n                  <div\r\n                    key={user.id}\r\n                    className=\"mention-item\"\r\n                    onClick={() => insertMention(user)}\r\n                  >\r\n                    <span className=\"mention-name\">{user.name}</span>\r\n                    <span className=\"mention-email\">{user.email}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n            <div className=\"reply-actions\">\r\n              <button onClick={handleSubmitComment} className=\"submit-btn\">\r\n                답글 작성\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                  setReplyingTo(null);\r\n                  setNewComment('');\r\n                }}\r\n                className=\"cancel-btn\"\r\n              >\r\n                취소\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderCommentWithMentions = (content: string) => {\r\n    const mentionRegex = /@(\\w+)/g;\r\n    const parts = content.split(mentionRegex);\r\n\r\n    return parts.map((part, index) => {\r\n      if (index % 2 === 1) {\r\n        // 멘션 부분\r\n        return (\r\n          <span key={index} className=\"mention\">\r\n            @{part}\r\n          </span>\r\n        );\r\n      }\r\n      return part;\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div className=\"loading\">댓글을 불러오는 중...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={`comment-system ${className}`}>\r\n      <div className=\"comment-header\">\r\n        <h3>댓글 ({comments.length})</h3>\r\n      </div>\r\n\r\n      <div className=\"new-comment-form\">\r\n        <textarea\r\n          ref={commentInputRef}\r\n          value={newComment}\r\n          onChange={e => handleInputChange(e.target.value)}\r\n          placeholder=\"댓글을 입력하세요... (@를 입력하여 사용자를 멘션할 수 있습니다)\"\r\n          className=\"comment-textarea\"\r\n          rows={3}\r\n        />\r\n\r\n        {showMentionDropdown && (\r\n          <div className=\"mention-dropdown\" ref={mentionDropdownRef}>\r\n            {mentionUsers.map(user => (\r\n              <div\r\n                key={user.id}\r\n                className=\"mention-item\"\r\n                onClick={() => insertMention(user)}\r\n              >\r\n                <span className=\"mention-name\">{user.name}</span>\r\n                <span className=\"mention-email\">{user.email}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"comment-actions\">\r\n          <button\r\n            onClick={handleSubmitComment}\r\n            disabled={!newComment.trim()}\r\n            className=\"submit-btn\"\r\n          >\r\n            댓글 작성\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"comments-list\">\r\n        {comments.length === 0 ? (\r\n          <div className=\"no-comments\">첫 번째 댓글을 작성해보세요!</div>\r\n        ) : (\r\n          comments.map(comment => renderComment(comment))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\collaboration\\MentionNotifications.tsx",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 36,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 36,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [1051, 1107], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport { useMentions } from '../../hooks/useMentions';\r\nimport { formatDistanceToNow } from 'date-fns/formatDistanceToNow';\r\nimport { ko } from 'date-fns/locale';\r\n\r\ninterface MentionNotificationsProps {\r\n  className?: string;\r\n  maxHeight?: string;\r\n  showMarkAllAsRead?: boolean;\r\n}\r\n\r\nexport const MentionNotifications: React.FC<MentionNotificationsProps> = ({\r\n  className = '',\r\n  maxHeight = '400px',\r\n  showMarkAllAsRead = true,\r\n}) => {\r\n  const { mentions, unreadCount, isLoading, error, markAsRead, markAllAsRead } =\r\n    useMentions({ enableRealtime: true });\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleMentionClick = async (\r\n    mentionId: string,\r\n    resourceType: string,\r\n    resourceId: string\r\n  ) => {\r\n    try {\r\n      await markAsRead(mentionId);\r\n\r\n      // 해당 리소스로 이동\r\n      const baseUrl = getResourceUrl(resourceType, resourceId);\r\n      if (baseUrl) {\r\n        window.location.href = `${baseUrl}#comment-${mentionId}`;\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to handle mention click:', error);\r\n    }\r\n  };\r\n\r\n  const getResourceUrl = (\r\n    resourceType: string,\r\n    resourceId: string\r\n  ): string | null => {\r\n    switch (resourceType) {\r\n      case 'TASK':\r\n        return `/tasks/${resourceId}`;\r\n      case 'PROJECT':\r\n        return `/projects/${resourceId}`;\r\n      case 'DOCUMENT':\r\n        return `/documents/${resourceId}`;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getResourceTypeName = (resourceType: string): string => {\r\n    switch (resourceType) {\r\n      case 'TASK':\r\n        return '작업';\r\n      case 'PROJECT':\r\n        return '프로젝트';\r\n      case 'DOCUMENT':\r\n        return '문서';\r\n      default:\r\n        return '항목';\r\n    }\r\n  };\r\n\r\n  const truncateContent = (\r\n    content: string,\r\n    maxLength: number = 100\r\n  ): string => {\r\n    if (content.length <= maxLength) return content;\r\n    return content.slice(0, maxLength) + '...';\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`mention-notifications error ${className}`}>\r\n        <div className=\"error-message\">\r\n          멘션을 불러오는 중 오류가 발생했습니다.\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`mention-notifications ${className}`}>\r\n      {/* 알림 트리거 버튼 */}\r\n      <button\r\n        className={`mention-trigger ${unreadCount > 0 ? 'has-unread' : ''}`}\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        title=\"멘션 알림\"\r\n      >\r\n        <svg\r\n          width=\"20\"\r\n          height=\"20\"\r\n          viewBox=\"0 0 20 20\"\r\n          fill=\"currentColor\"\r\n          className=\"mention-icon\"\r\n        >\r\n          <path\r\n            fillRule=\"evenodd\"\r\n            d=\"M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z\"\r\n            clipRule=\"evenodd\"\r\n          />\r\n        </svg>\r\n        {unreadCount > 0 && (\r\n          <span className=\"unread-badge\">\r\n            {unreadCount > 99 ? '99+' : unreadCount}\r\n          </span>\r\n        )}\r\n      </button>\r\n\r\n      {/* 알림 드롭다운 */}\r\n      {isOpen && (\r\n        <div className=\"mention-dropdown\">\r\n          <div className=\"mention-header\">\r\n            <h3>멘션 알림</h3>\r\n            {showMarkAllAsRead && unreadCount > 0 && (\r\n              <button\r\n                className=\"mark-all-read-btn\"\r\n                onClick={markAllAsRead}\r\n                title=\"모두 읽음으로 표시\"\r\n              >\r\n                모두 읽음\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"mention-list\" style={{ maxHeight }}>\r\n            {isLoading ? (\r\n              <div className=\"loading-state\">\r\n                <div className=\"loading-spinner\"></div>\r\n                <span>멘션을 불러오는 중...</span>\r\n              </div>\r\n            ) : mentions.length === 0 ? (\r\n              <div className=\"empty-state\">\r\n                <svg\r\n                  width=\"48\"\r\n                  height=\"48\"\r\n                  viewBox=\"0 0 20 20\"\r\n                  fill=\"currentColor\"\r\n                  className=\"empty-icon\"\r\n                >\r\n                  <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z\"\r\n                    clipRule=\"evenodd\"\r\n                  />\r\n                </svg>\r\n                <p>멘션이 없습니다</p>\r\n                <span>누군가 당신을 멘션하면 여기에 표시됩니다.</span>\r\n              </div>\r\n            ) : (\r\n              mentions.map(mention => (\r\n                <div\r\n                  key={mention.id}\r\n                  className={`mention-item ${!mention.isRead ? 'unread' : ''}`}\r\n                  onClick={() =>\r\n                    handleMentionClick(\r\n                      mention.id,\r\n                      mention.comment?.resourceType || '',\r\n                      mention.comment?.resourceId || ''\r\n                    )\r\n                  }\r\n                >\r\n                  {!mention.isRead && <div className=\"unread-indicator\"></div>}\r\n\r\n                  <div className=\"mention-avatar\">\r\n                    {mention.mentionedByUser?.avatar ? (\r\n                      <img\r\n                        src={mention.mentionedByUser.avatar}\r\n                        alt={mention.mentionedByUser.name}\r\n                        className=\"avatar-image\"\r\n                      />\r\n                    ) : (\r\n                      <div className=\"avatar-placeholder\">\r\n                        {mention.mentionedByUser?.name\r\n                          ?.charAt(0)\r\n                          .toUpperCase() || '?'}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"mention-content\">\r\n                    <div className=\"mention-header-info\">\r\n                      <span className=\"mentioned-by\">\r\n                        {mention.mentionedByUser?.name || '알 수 없는 사용자'}\r\n                      </span>\r\n                      <span className=\"mention-action\">님이</span>\r\n                      <span className=\"resource-type\">\r\n                        {getResourceTypeName(\r\n                          mention.comment?.resourceType || ''\r\n                        )}\r\n                      </span>\r\n                      <span className=\"mention-action\">에서 멘션했습니다</span>\r\n                    </div>\r\n\r\n                    <div className=\"mention-comment\">\r\n                      {truncateContent(mention.comment?.content || '')}\r\n                    </div>\r\n\r\n                    <div className=\"mention-meta\">\r\n                      <span className=\"mention-time\">\r\n                        {formatDistanceToNow(mention.createdAt, {\r\n                          addSuffix: true,\r\n                          locale: ko,\r\n                        })}\r\n                      </span>\r\n                      {mention.isRead && (\r\n                        <span className=\"read-indicator\">읽음</span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"mention-actions\">\r\n                    <button\r\n                      className=\"action-btn\"\r\n                      onClick={e => {\r\n                        e.stopPropagation();\r\n                        markAsRead(mention.id);\r\n                      }}\r\n                      title=\"읽음으로 표시\"\r\n                    >\r\n                      <svg\r\n                        width=\"16\"\r\n                        height=\"16\"\r\n                        viewBox=\"0 0 20 20\"\r\n                        fill=\"currentColor\"\r\n                      >\r\n                        <path\r\n                          fillRule=\"evenodd\"\r\n                          d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\r\n                          clipRule=\"evenodd\"\r\n                        />\r\n                      </svg>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n\r\n          {mentions.length > 0 && (\r\n            <div className=\"mention-footer\">\r\n              <button\r\n                className=\"view-all-btn\"\r\n                onClick={() => {\r\n                  setIsOpen(false);\r\n                  // 전체 멘션 페이지로 이동\r\n                  window.location.href = '/mentions';\r\n                }}\r\n              >\r\n                모든 멘션 보기\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* 오버레이 */}\r\n      {isOpen && (\r\n        <div className=\"mention-overlay\" onClick={() => setIsOpen(false)} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\collaboration\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\common\\ActionButton.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'operator' is assigned a value but never used.",
        "line": 274,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 274,
        "endColumn": 11
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'operator' is assigned a value but never used.",
        "line": 274,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 274,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\r\nimport { Button, ButtonProps } from '../ui/button';\r\nimport {\r\n  PermissionGate,\r\n  TeamPermissionGate,\r\n  ProjectPermissionGate,\r\n  TaskPermissionGate,\r\n} from './PermissionGate';\r\nimport { PermissionAction, ResourceType } from '../../types/team';\r\nimport { cn } from '../../lib/utils';\r\n\r\ninterface BaseActionButtonProps extends Omit<ButtonProps, 'children'> {\r\n  children: React.ReactNode;\r\n  fallback?: React.ReactNode;\r\n  showFallback?: boolean;\r\n  tooltip?: string;\r\n}\r\n\r\ninterface PermissionActionButtonProps extends BaseActionButtonProps {\r\n  resourceType: ResourceType;\r\n  resourceId: string;\r\n  action: PermissionAction;\r\n}\r\n\r\ninterface TeamActionButtonProps extends BaseActionButtonProps {\r\n  teamId?: string;\r\n  action: PermissionAction;\r\n}\r\n\r\ninterface ProjectActionButtonProps extends BaseActionButtonProps {\r\n  projectId: string;\r\n  action: PermissionAction;\r\n}\r\n\r\ninterface TaskActionButtonProps extends BaseActionButtonProps {\r\n  taskId: string;\r\n  action: PermissionAction;\r\n}\r\n\r\n/**\r\n * 권한 기반 액션 버튼 컴포넌트\r\n * 권한이 없으면 비활성화되거나 대체 컴포넌트를 표시\r\n */\r\nexport const PermissionActionButton: React.FC<PermissionActionButtonProps> = ({\r\n  children,\r\n  resourceType,\r\n  resourceId,\r\n  action,\r\n  fallback,\r\n  showFallback = true,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <PermissionGate\r\n      resourceType={resourceType}\r\n      resourceId={resourceId}\r\n      action={action}\r\n      fallback={\r\n        fallback || (\r\n          <Button\r\n            {...props}\r\n            disabled\r\n            className={cn('opacity-50', className)}\r\n            title=\"권한이 없습니다\"\r\n          >\r\n            {children}\r\n          </Button>\r\n        )\r\n      }\r\n      showFallback={showFallback}\r\n    >\r\n      <Button {...props} className={className}>\r\n        {children}\r\n      </Button>\r\n    </PermissionGate>\r\n  );\r\n};\r\n\r\n/**\r\n * 팀 권한 기반 액션 버튼\r\n */\r\nexport const TeamActionButton: React.FC<TeamActionButtonProps> = ({\r\n  children,\r\n  teamId,\r\n  action,\r\n  fallback,\r\n  showFallback = true,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <TeamPermissionGate\r\n      teamId={teamId}\r\n      action={action}\r\n      fallback={\r\n        fallback || (\r\n          <Button\r\n            {...props}\r\n            disabled\r\n            className={cn('opacity-50', className)}\r\n            title=\"권한이 없습니다\"\r\n          >\r\n            {children}\r\n          </Button>\r\n        )\r\n      }\r\n      showFallback={showFallback}\r\n    >\r\n      <Button {...props} className={className}>\r\n        {children}\r\n      </Button>\r\n    </TeamPermissionGate>\r\n  );\r\n};\r\n\r\n/**\r\n * 프로젝트 권한 기반 액션 버튼\r\n */\r\nexport const ProjectActionButton: React.FC<ProjectActionButtonProps> = ({\r\n  children,\r\n  projectId,\r\n  action,\r\n  fallback,\r\n  showFallback = true,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <ProjectPermissionGate\r\n      projectId={projectId}\r\n      action={action}\r\n      fallback={\r\n        fallback || (\r\n          <Button\r\n            {...props}\r\n            disabled\r\n            className={cn('opacity-50', className)}\r\n            title=\"권한이 없습니다\"\r\n          >\r\n            {children}\r\n          </Button>\r\n        )\r\n      }\r\n      showFallback={showFallback}\r\n    >\r\n      <Button {...props} className={className}>\r\n        {children}\r\n      </Button>\r\n    </ProjectPermissionGate>\r\n  );\r\n};\r\n\r\n/**\r\n * 작업 권한 기반 액션 버튼\r\n */\r\nexport const TaskActionButton: React.FC<TaskActionButtonProps> = ({\r\n  children,\r\n  taskId,\r\n  action,\r\n  fallback,\r\n  showFallback = true,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <TaskPermissionGate\r\n      taskId={taskId}\r\n      action={action}\r\n      fallback={\r\n        fallback || (\r\n          <Button\r\n            {...props}\r\n            disabled\r\n            className={cn('opacity-50', className)}\r\n            title=\"권한이 없습니다\"\r\n          >\r\n            {children}\r\n          </Button>\r\n        )\r\n      }\r\n      showFallback={showFallback}\r\n    >\r\n      <Button {...props} className={className}>\r\n        {children}\r\n      </Button>\r\n    </TaskPermissionGate>\r\n  );\r\n};\r\n\r\n/**\r\n * 권한 기반 위험한 액션 버튼 (삭제 등)\r\n * 특별한 스타일과 확인 다이얼로그를 포함\r\n */\r\ninterface DangerousActionButtonProps extends PermissionActionButtonProps {\r\n  confirmMessage?: string;\r\n  onConfirm?: () => void;\r\n}\r\n\r\nexport const DangerousActionButton: React.FC<DangerousActionButtonProps> = ({\r\n  children,\r\n  resourceType,\r\n  resourceId,\r\n  action,\r\n  confirmMessage = '이 작업을 실행하시겠습니까?',\r\n  onConfirm,\r\n  onClick,\r\n  className,\r\n  ...props\r\n}) => {\r\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (confirmMessage && window.confirm(confirmMessage)) {\r\n      onConfirm?.();\r\n      onClick?.(e);\r\n    } else if (!confirmMessage) {\r\n      onClick?.(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PermissionActionButton\r\n      {...props}\r\n      resourceType={resourceType}\r\n      resourceId={resourceId}\r\n      action={action}\r\n      onClick={handleClick}\r\n      className={cn('bg-red-600 hover:bg-red-700 text-white', className)}\r\n    >\r\n      {children}\r\n    </PermissionActionButton>\r\n  );\r\n};\r\n\r\n/**\r\n * 권한이 없을 때 대신 표시할 정보 메시지 버튼\r\n */\r\nexport const RestrictedActionButton: React.FC<{\r\n  children: React.ReactNode;\r\n  reason?: string;\r\n  className?: string;\r\n}> = ({ children, reason = '권한이 없습니다', className }) => {\r\n  return (\r\n    <Button\r\n      disabled\r\n      variant=\"outline\"\r\n      className={cn('opacity-50 cursor-not-allowed', className)}\r\n      title={reason}\r\n    >\r\n      {children}\r\n    </Button>\r\n  );\r\n};\r\n\r\n/**\r\n * 조건부 액션 버튼 그룹\r\n * 여러 권한 중 하나라도 만족하면 표시\r\n */\r\ninterface ConditionalActionGroupProps {\r\n  children: React.ReactNode;\r\n  conditions: Array<{\r\n    resourceType: ResourceType;\r\n    resourceId: string;\r\n    action: PermissionAction;\r\n  }>;\r\n  operator?: 'AND' | 'OR';\r\n  fallback?: React.ReactNode;\r\n}\r\n\r\nexport const ConditionalActionGroup: React.FC<ConditionalActionGroupProps> = ({\r\n  children,\r\n  conditions,\r\n  operator = 'OR',\r\n  fallback = null,\r\n}) => {\r\n  // MultiPermissionGate를 사용하여 구현할 수 있지만,\r\n  // 여기서는 간단한 버전으로 첫 번째 조건만 확인\r\n  const firstCondition = conditions[0];\r\n\r\n  if (!firstCondition) {\r\n    return <>{fallback}</>;\r\n  }\r\n\r\n  return (\r\n    <PermissionGate\r\n      resourceType={firstCondition.resourceType}\r\n      resourceId={firstCondition.resourceId}\r\n      action={firstCondition.action}\r\n      fallback={fallback}\r\n    >\r\n      {children}\r\n    </PermissionGate>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\common\\PermissionGate.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\common\\ProtectedRoute.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\ProjectPermissionEditModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 22,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 22,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 88,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 88,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2502, 2536], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `␍⏎····················?·format(expiresAt,·'PPP')␍⏎···················` with `·?·format(expiresAt,·'PPP')`",
        "line": 196,
        "column": 29,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 198,
        "endColumn": 20,
        "fix": { "range": [6223, 6292], "text": " ? format(expiresAt, 'PPP')" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `{'·'}␍⏎··················{expiresAt␍⏎····················?·format(expiresAt,·'PPP')␍⏎···················` with `·{expiresAt·?·format(expiresAt,·'PPP')`",
        "line": 259,
        "column": 20,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 262,
        "endColumn": 20,
        "fix": {
          "range": [8543, 8647],
          "text": " {expiresAt ? format(expiresAt, 'PPP')"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Label } from '../ui/label';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '../ui/select';\r\nimport { Calendar } from '../ui/calendar';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\nimport { CalendarIcon, Edit } from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ko } from 'date-fns/locale';\r\nimport { cn } from '../../lib/utils';\r\nimport {\r\n  ProjectRole,\r\n  ProjectPermission,\r\n  UpdateProjectPermissionInput,\r\n} from '../../types/team';\r\n\r\ninterface ProjectPermissionEditModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  permission: ProjectPermission;\r\n  onSave: (input: UpdateProjectPermissionInput) => Promise<void>;\r\n}\r\n\r\nexport const ProjectPermissionEditModal: React.FC<\r\n  ProjectPermissionEditModalProps\r\n> = ({ isOpen, onClose, permission, onSave }) => {\r\n  const [selectedRole, setSelectedRole] = useState<ProjectRole>(\r\n    permission.role\r\n  );\r\n  const [expiresAt, setExpiresAt] = useState<Date | undefined>(\r\n    permission.expiresAt || undefined\r\n  );\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const roleLabels: Record<ProjectRole, string> = {\r\n    [ProjectRole.PROJECT_MANAGER]: '프로젝트 매니저',\r\n    [ProjectRole.PROJECT_LEAD]: '프로젝트 리드',\r\n    [ProjectRole.CONTRIBUTOR]: '기여자',\r\n    [ProjectRole.OBSERVER]: '관찰자',\r\n  };\r\n\r\n  const roleDescriptions: Record<ProjectRole, string> = {\r\n    [ProjectRole.PROJECT_MANAGER]: '프로젝트 전체 관리 및 권한 부여 가능',\r\n    [ProjectRole.PROJECT_LEAD]: '프로젝트 운영 관리 및 작업 배정 가능',\r\n    [ProjectRole.CONTRIBUTOR]: '프로젝트 참여 및 작업 수행 가능',\r\n    [ProjectRole.OBSERVER]: '프로젝트 조회 및 댓글만 가능',\r\n  };\r\n\r\n  // 모달이 열릴 때마다 초기값 설정\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setSelectedRole(permission.role);\r\n      setExpiresAt(permission.expiresAt || undefined);\r\n    }\r\n  }, [isOpen, permission]);\r\n\r\n  const handleSubmit = async () => {\r\n    const hasChanges =\r\n      selectedRole !== permission.role || expiresAt !== permission.expiresAt;\r\n\r\n    if (!hasChanges) {\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const input: UpdateProjectPermissionInput = {\r\n        id: permission.id,\r\n        role: selectedRole,\r\n        expiresAt,\r\n      };\r\n      await onSave(input);\r\n    } catch (error) {\r\n      console.error('권한 수정 실패:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const isExpired = permission.expiresAt && permission.expiresAt < new Date();\r\n  const isExpiringSoon =\r\n    permission.expiresAt &&\r\n    permission.expiresAt <= new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) &&\r\n    permission.expiresAt > new Date();\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Edit className=\"h-5 w-5\" />\r\n            프로젝트 권한 수정\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-6\">\r\n          {/* 사용자 정보 (읽기 전용) */}\r\n          <div className=\"space-y-2\">\r\n            <Label>사용자</Label>\r\n            <div className=\"flex items-center gap-2 p-3 bg-gray-50 rounded-md\">\r\n              <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                U\r\n              </div>\r\n              <div>\r\n                <div className=\"font-medium\">사용자 {permission.userId}</div>\r\n                <div className=\"text-sm text-gray-500\">user@example.com</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 현재 상태 표시 */}\r\n          {(isExpired || isExpiringSoon) && (\r\n            <div\r\n              className={cn(\r\n                'p-3 rounded-md border',\r\n                isExpired\r\n                  ? 'bg-red-50 border-red-200'\r\n                  : 'bg-orange-50 border-orange-200'\r\n              )}\r\n            >\r\n              <div\r\n                className={cn(\r\n                  'text-sm font-medium',\r\n                  isExpired ? 'text-red-800' : 'text-orange-800'\r\n                )}\r\n              >\r\n                {isExpired\r\n                  ? '⚠️ 이 권한은 만료되었습니다'\r\n                  : '🔔 이 권한이 곧 만료됩니다'}\r\n              </div>\r\n              {permission.expiresAt && (\r\n                <div\r\n                  className={cn(\r\n                    'text-sm mt-1',\r\n                    isExpired ? 'text-red-600' : 'text-orange-600'\r\n                  )}\r\n                >\r\n                  만료일: {format(permission.expiresAt, 'PPP')}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {/* 역할 선택 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>역할</Label>\r\n            <Select\r\n              value={selectedRole}\r\n              onValueChange={value => setSelectedRole(value as ProjectRole)}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {Object.entries(roleLabels).map(([role, label]) => (\r\n                  <SelectItem key={role} value={role}>\r\n                    <div>\r\n                      <div className=\"font-medium\">{label}</div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        {roleDescriptions[role as ProjectRole]}\r\n                      </div>\r\n                    </div>\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* 만료일 수정 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>만료일</Label>\r\n            <Popover>\r\n              <PopoverTrigger asChild>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  className={cn(\r\n                    'w-full justify-start text-left font-normal',\r\n                    !expiresAt && 'text-muted-foreground'\r\n                  )}\r\n                >\r\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                  {expiresAt\r\n                    ? format(expiresAt, 'PPP')\r\n                    : '만료일 없음'}\r\n                </Button>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                <Calendar\r\n                  mode=\"single\"\r\n                  selected={expiresAt}\r\n                  onSelect={setExpiresAt}\r\n                  disabled={date => date < new Date()}\r\n                  initialFocus\r\n                />\r\n                <div className=\"p-3 border-t space-y-2\">\r\n                  {expiresAt && (\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setExpiresAt(undefined)}\r\n                      className=\"w-full\"\r\n                    >\r\n                      만료일 제거\r\n                    </Button>\r\n                  )}\r\n                  {isExpired && (\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        const oneMonthFromNow = new Date();\r\n                        oneMonthFromNow.setMonth(\r\n                          oneMonthFromNow.getMonth() + 1\r\n                        );\r\n                        setExpiresAt(oneMonthFromNow);\r\n                      }}\r\n                      className=\"w-full\"\r\n                    >\r\n                      1개월 연장\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </PopoverContent>\r\n            </Popover>\r\n          </div>\r\n\r\n          {/* 변경 사항 요약 */}\r\n          <div className=\"bg-blue-50 p-3 rounded-md\">\r\n            <div className=\"text-sm font-medium text-blue-800 mb-1\">\r\n              변경 사항\r\n            </div>\r\n            <div className=\"text-sm text-blue-700 space-y-1\">\r\n              {selectedRole !== permission.role && (\r\n                <div>\r\n                  역할: {roleLabels[permission.role]} →{' '}\r\n                  {roleLabels[selectedRole]}\r\n                </div>\r\n              )}\r\n              {expiresAt !== permission.expiresAt && (\r\n                <div>\r\n                  만료일:{' '}\r\n                  {permission.expiresAt\r\n                    ? format(permission.expiresAt, 'PPP')\r\n                    : '없음'}{' '}\r\n                  →{' '}\r\n                  {expiresAt\r\n                    ? format(expiresAt, 'PPP')\r\n                    : '없음'}\r\n                </div>\r\n              )}\r\n              {selectedRole === permission.role &&\r\n                expiresAt === permission.expiresAt && (\r\n                  <div className=\"text-gray-500\">변경 사항이 없습니다</div>\r\n                )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            취소\r\n          </Button>\r\n          <Button onClick={handleSubmit} disabled={isLoading}>\r\n            {isLoading ? '저장 중...' : '저장'}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\ProjectPermissionList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Clock' is defined but never used.",
        "line": 33,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 8
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Clock' is defined but never used.",
        "line": 33,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Calendar' is defined but never used.",
        "line": 36,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 11
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Calendar' is defined but never used.",
        "line": 36,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 39,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 39,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 12
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 113,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 113,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3186, 3220], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 130,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 130,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3640, 3674], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '../ui/table';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '../ui/dropdown-menu';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from '../ui/alert-dialog';\r\nimport {\r\n  MoreVertical,\r\n  UserX,\r\n  Edit,\r\n  Clock,\r\n  AlertTriangle,\r\n  Shield,\r\n  Calendar,\r\n} from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ko } from 'date-fns/locale';\r\nimport { cn } from '../../lib/utils';\r\nimport {\r\n  ProjectPermission,\r\n  ProjectRole,\r\n  UpdateProjectPermissionInput,\r\n} from '../../types/team';\r\nimport { useProjectPermissions } from '../../hooks/useProjectPermissions';\r\nimport { ProjectPermissionEditModal } from './ProjectPermissionEditModal';\r\n\r\ninterface ProjectPermissionListProps {\r\n  projectId: string;\r\n  permissions: ProjectPermission[];\r\n  loading: boolean;\r\n  canManagePermissions: boolean;\r\n}\r\n\r\nexport const ProjectPermissionList: React.FC<ProjectPermissionListProps> = ({\r\n  projectId,\r\n  permissions,\r\n  loading,\r\n  canManagePermissions,\r\n}) => {\r\n  const { revokePermission, updatePermission } =\r\n    useProjectPermissions(projectId);\r\n  const [selectedPermission, setSelectedPermission] =\r\n    useState<ProjectPermission | null>(null);\r\n  const [showRevokeDialog, setShowRevokeDialog] = useState(false);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n  const [isRevoking, setIsRevoking] = useState(false);\r\n\r\n  const roleLabels: Record<ProjectRole, string> = {\r\n    [ProjectRole.PROJECT_MANAGER]: '프로젝트 매니저',\r\n    [ProjectRole.PROJECT_LEAD]: '프로젝트 리드',\r\n    [ProjectRole.CONTRIBUTOR]: '기여자',\r\n    [ProjectRole.OBSERVER]: '관찰자',\r\n  };\r\n\r\n  const getRoleBadgeColor = (role: ProjectRole) => {\r\n    switch (role) {\r\n      case ProjectRole.PROJECT_MANAGER:\r\n        return 'bg-red-100 text-red-800';\r\n      case ProjectRole.PROJECT_LEAD:\r\n        return 'bg-orange-100 text-orange-800';\r\n      case ProjectRole.CONTRIBUTOR:\r\n        return 'bg-blue-100 text-blue-800';\r\n      case ProjectRole.OBSERVER:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const isExpired = (permission: ProjectPermission) => {\r\n    return permission.expiresAt && permission.expiresAt < new Date();\r\n  };\r\n\r\n  const isExpiringSoon = (permission: ProjectPermission) => {\r\n    if (!permission.expiresAt) return false;\r\n    const sevenDaysFromNow = new Date();\r\n    sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);\r\n    return (\r\n      permission.expiresAt <= sevenDaysFromNow &&\r\n      permission.expiresAt > new Date()\r\n    );\r\n  };\r\n\r\n  const handleRevoke = async () => {\r\n    if (!selectedPermission) return;\r\n\r\n    setIsRevoking(true);\r\n    try {\r\n      await revokePermission(selectedPermission.id);\r\n      setShowRevokeDialog(false);\r\n      setSelectedPermission(null);\r\n    } catch (error) {\r\n      console.error('권한 취소 실패:', error);\r\n    } finally {\r\n      setIsRevoking(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (permission: ProjectPermission) => {\r\n    setSelectedPermission(permission);\r\n    setShowEditModal(true);\r\n  };\r\n\r\n  const handleEditSave = async (input: UpdateProjectPermissionInput) => {\r\n    try {\r\n      await updatePermission(input);\r\n      setShowEditModal(false);\r\n      setSelectedPermission(null);\r\n    } catch (error) {\r\n      console.error('권한 수정 실패:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-32\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (permissions.length === 0) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        <Shield className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\r\n        <p>아직 부여된 프로젝트 권한이 없습니다.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"border rounded-lg\">\r\n        <Table>\r\n          <TableHeader>\r\n            <TableRow>\r\n              <TableHead>사용자</TableHead>\r\n              <TableHead>역할</TableHead>\r\n              <TableHead>부여일</TableHead>\r\n              <TableHead>만료일</TableHead>\r\n              <TableHead>상태</TableHead>\r\n              {canManagePermissions && (\r\n                <TableHead className=\"w-[50px]\"></TableHead>\r\n              )}\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {permissions.map(permission => (\r\n              <TableRow\r\n                key={permission.id}\r\n                className={cn(isExpired(permission) && 'opacity-50 bg-red-50')}\r\n              >\r\n                <TableCell className=\"font-medium\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                      {/* TODO: 실제 사용자 정보 표시 */}U\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"font-medium\">\r\n                        사용자 {permission.userId}\r\n                      </div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        user@example.com\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Badge className={getRoleBadgeColor(permission.role)}>\r\n                    {roleLabels[permission.role]}\r\n                  </Badge>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div className=\"text-sm\">\r\n                    {format(permission.grantedAt, 'PPP')}\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  {permission.expiresAt ? (\r\n                    <div className=\"flex items-center gap-1\">\r\n                      {isExpiringSoon(permission) && (\r\n                        <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\r\n                      )}\r\n                      <div\r\n                        className={cn(\r\n                          'text-sm',\r\n                          isExpired(permission) && 'text-red-600 font-medium',\r\n                          isExpiringSoon(permission) &&\r\n                            'text-orange-600 font-medium'\r\n                        )}\r\n                      >\r\n                        {format(permission.expiresAt, 'PPP')}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"text-sm text-gray-500\">만료일 없음</div>\r\n                  )}\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {isExpired(permission) ? (\r\n                      <Badge variant=\"destructive\">만료됨</Badge>\r\n                    ) : isExpiringSoon(permission) ? (\r\n                      <Badge\r\n                        variant=\"outline\"\r\n                        className=\"border-orange-200 text-orange-700\"\r\n                      >\r\n                        곧 만료\r\n                      </Badge>\r\n                    ) : (\r\n                      <Badge\r\n                        variant=\"outline\"\r\n                        className=\"border-green-200 text-green-700\"\r\n                      >\r\n                        활성\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </TableCell>\r\n                {canManagePermissions && (\r\n                  <TableCell>\r\n                    <DropdownMenu>\r\n                      <DropdownMenuTrigger asChild>\r\n                        <Button variant=\"ghost\" size=\"sm\">\r\n                          <MoreVertical className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </DropdownMenuTrigger>\r\n                      <DropdownMenuContent align=\"end\">\r\n                        <DropdownMenuItem\r\n                          onClick={() => handleEdit(permission)}\r\n                          className=\"flex items-center gap-2\"\r\n                        >\r\n                          <Edit className=\"h-4 w-4\" />\r\n                          수정\r\n                        </DropdownMenuItem>\r\n                        <DropdownMenuSeparator />\r\n                        <DropdownMenuItem\r\n                          onClick={() => {\r\n                            setSelectedPermission(permission);\r\n                            setShowRevokeDialog(true);\r\n                          }}\r\n                          className=\"flex items-center gap-2 text-red-600\"\r\n                        >\r\n                          <UserX className=\"h-4 w-4\" />\r\n                          권한 취소\r\n                        </DropdownMenuItem>\r\n                      </DropdownMenuContent>\r\n                    </DropdownMenu>\r\n                  </TableCell>\r\n                )}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* 권한 취소 확인 다이얼로그 */}\r\n      <AlertDialog open={showRevokeDialog} onOpenChange={setShowRevokeDialog}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>권한 취소 확인</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              {selectedPermission && (\r\n                <>\r\n                  사용자 <strong>{selectedPermission.userId}</strong>의 프로젝트\r\n                  권한을 취소하시겠습니까?\r\n                  <br />이 작업은 되돌릴 수 없습니다.\r\n                </>\r\n              )}\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>취소</AlertDialogCancel>\r\n            <AlertDialogAction\r\n              onClick={handleRevoke}\r\n              disabled={isRevoking}\r\n              className=\"bg-red-600 hover:bg-red-700\"\r\n            >\r\n              {isRevoking ? '취소 중...' : '권한 취소'}\r\n            </AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n\r\n      {/* 권한 수정 모달 */}\r\n      {selectedPermission && (\r\n        <ProjectPermissionEditModal\r\n          isOpen={showEditModal}\r\n          onClose={() => {\r\n            setShowEditModal(false);\r\n            setSelectedPermission(null);\r\n          }}\r\n          permission={selectedPermission}\r\n          onSave={handleEditSave}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\ProjectPermissionModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 24,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 24,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 156,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 156,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4357, 4391], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `␍⏎····················?·format(expiresAt,·'PPP')␍⏎···················` with `·?·format(expiresAt,·'PPP')`",
        "line": 273,
        "column": 29,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 275,
        "endColumn": 20,
        "fix": { "range": [8735, 8804], "text": " ? format(expiresAt, 'PPP')" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '../ui/select';\r\nimport { Badge } from '../ui/badge';\r\nimport { Calendar } from '../ui/calendar';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\nimport { CalendarIcon, UserPlus, X, Search } from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ko } from 'date-fns/locale';\r\nimport { cn } from '../../lib/utils';\r\nimport {\r\n  ProjectRole,\r\n  CreateProjectPermissionInput,\r\n  User,\r\n} from '../../types/team';\r\nimport { useProjectPermissions } from '../../hooks/useProjectPermissions';\r\nimport { toast } from '../../utils/toast';\r\n\r\ninterface ProjectPermissionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  projectId: string;\r\n  projectName: string;\r\n}\r\n\r\nexport const ProjectPermissionModal: React.FC<ProjectPermissionModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  projectId,\r\n  projectName,\r\n}) => {\r\n  const { grantPermission } = useProjectPermissions(projectId);\r\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);\r\n  const [selectedRole, setSelectedRole] = useState<ProjectRole>(\r\n    ProjectRole.CONTRIBUTOR\r\n  );\r\n  const [expiresAt, setExpiresAt] = useState<Date | undefined>();\r\n  const [userSearch, setUserSearch] = useState('');\r\n  const [searchResults, setSearchResults] = useState<User[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const roleLabels: Record<ProjectRole, string> = {\r\n    [ProjectRole.PROJECT_MANAGER]: '프로젝트 매니저',\r\n    [ProjectRole.PROJECT_LEAD]: '프로젝트 리드',\r\n    [ProjectRole.CONTRIBUTOR]: '기여자',\r\n    [ProjectRole.OBSERVER]: '관찰자',\r\n  };\r\n\r\n  const roleDescriptions: Record<ProjectRole, string> = {\r\n    [ProjectRole.PROJECT_MANAGER]: '프로젝트 전체 관리 및 권한 부여 가능',\r\n    [ProjectRole.PROJECT_LEAD]: '프로젝트 운영 관리 및 작업 배정 가능',\r\n    [ProjectRole.CONTRIBUTOR]: '프로젝트 참여 및 작업 수행 가능',\r\n    [ProjectRole.OBSERVER]: '프로젝트 조회 및 댓글만 가능',\r\n  };\r\n\r\n  // 사용자 검색 (실제로는 팀 멤버에서만 검색)\r\n  const searchUsers = async (query: string) => {\r\n    if (!query.trim()) {\r\n      setSearchResults([]);\r\n      return;\r\n    }\r\n\r\n    // TODO: 실제 팀 멤버 검색 로직 구현\r\n    // 현재는 모의 데이터 사용\r\n    const mockUsers: User[] = [\r\n      {\r\n        id: 'user1',\r\n        email: 'john@example.com',\r\n        name: 'John Doe',\r\n        displayName: 'John Doe',\r\n        photoURL: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        isActive: true,\r\n      },\r\n      {\r\n        id: 'user2',\r\n        email: 'jane@example.com',\r\n        name: 'Jane Smith',\r\n        displayName: 'Jane Smith',\r\n        photoURL: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        isActive: true,\r\n      },\r\n    ];\r\n\r\n    const filtered = mockUsers.filter(\r\n      user =>\r\n        user.displayName?.toLowerCase().includes(query.toLowerCase()) ||\r\n        user.email.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n\r\n    setSearchResults(filtered);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const debounceTimer = setTimeout(() => {\r\n      searchUsers(userSearch);\r\n    }, 300);\r\n\r\n    return () => clearTimeout(debounceTimer);\r\n  }, [userSearch]);\r\n\r\n  const handleAddUser = (user: User) => {\r\n    if (!selectedUsers.find(u => u.id === user.id)) {\r\n      setSelectedUsers([...selectedUsers, user]);\r\n      setUserSearch('');\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveUser = (userId: string) => {\r\n    setSelectedUsers(selectedUsers.filter(u => u.id !== userId));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (selectedUsers.length === 0) {\r\n      toast.error('권한을 부여할 사용자를 선택해주세요.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      for (const user of selectedUsers) {\r\n        const input: CreateProjectPermissionInput = {\r\n          projectId,\r\n          userId: user.id,\r\n          role: selectedRole,\r\n          expiresAt,\r\n        };\r\n        await grantPermission(input);\r\n      }\r\n\r\n      toast.success(\r\n        `${selectedUsers.length}명에게 프로젝트 권한이 부여되었습니다.`\r\n      );\r\n      onClose();\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('권한 부여 실패:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setSelectedUsers([]);\r\n    setSelectedRole(ProjectRole.CONTRIBUTOR);\r\n    setExpiresAt(undefined);\r\n    setUserSearch('');\r\n    setSearchResults([]);\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-2xl\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <UserPlus className=\"h-5 w-5\" />\r\n            프로젝트 권한 부여 - {projectName}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-6\">\r\n          {/* 사용자 선택 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>사용자 선택</Label>\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"팀 멤버 검색 (이름 또는 이메일)\"\r\n                value={userSearch}\r\n                onChange={e => setUserSearch(e.target.value)}\r\n                className=\"pl-9\"\r\n              />\r\n              {searchResults.length > 0 && (\r\n                <div className=\"absolute top-full left-0 right-0 z-10 mt-1 bg-white border rounded-md shadow-lg max-h-48 overflow-y-auto\">\r\n                  {searchResults.map(user => (\r\n                    <button\r\n                      key={user.id}\r\n                      onClick={() => handleAddUser(user)}\r\n                      className=\"w-full px-3 py-2 text-left hover:bg-gray-50 flex items-center gap-2\"\r\n                    >\r\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                        {user.displayName?.[0] || user.email[0]}\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"font-medium\">\r\n                          {user.displayName || user.email}\r\n                        </div>\r\n                        <div className=\"text-sm text-gray-500\">\r\n                          {user.email}\r\n                        </div>\r\n                      </div>\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* 선택된 사용자들 */}\r\n            {selectedUsers.length > 0 && (\r\n              <div className=\"flex flex-wrap gap-2 mt-2\">\r\n                {selectedUsers.map(user => (\r\n                  <Badge key={user.id} variant=\"secondary\" className=\"gap-1\">\r\n                    {user.displayName || user.email}\r\n                    <button\r\n                      onClick={() => handleRemoveUser(user.id)}\r\n                      className=\"ml-1 hover:bg-gray-200 rounded-full p-0.5\"\r\n                    >\r\n                      <X className=\"h-3 w-3\" />\r\n                    </button>\r\n                  </Badge>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* 역할 선택 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>역할</Label>\r\n            <Select\r\n              value={selectedRole}\r\n              onValueChange={value => setSelectedRole(value as ProjectRole)}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {Object.entries(roleLabels).map(([role, label]) => (\r\n                  <SelectItem key={role} value={role}>\r\n                    <div>\r\n                      <div className=\"font-medium\">{label}</div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        {roleDescriptions[role as ProjectRole]}\r\n                      </div>\r\n                    </div>\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* 만료일 선택 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>만료일 (선택사항)</Label>\r\n            <Popover>\r\n              <PopoverTrigger asChild>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  className={cn(\r\n                    'w-full justify-start text-left font-normal',\r\n                    !expiresAt && 'text-muted-foreground'\r\n                  )}\r\n                >\r\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                  {expiresAt\r\n                    ? format(expiresAt, 'PPP')\r\n                    : '만료일 없음'}\r\n                </Button>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                <Calendar\r\n                  mode=\"single\"\r\n                  selected={expiresAt}\r\n                  onSelect={setExpiresAt}\r\n                  disabled={date => date < new Date()}\r\n                  initialFocus\r\n                />\r\n                {expiresAt && (\r\n                  <div className=\"p-3 border-t\">\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setExpiresAt(undefined)}\r\n                      className=\"w-full\"\r\n                    >\r\n                      만료일 제거\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </PopoverContent>\r\n            </Popover>\r\n          </div>\r\n        </div>\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            취소\r\n          </Button>\r\n          <Button\r\n            onClick={handleSubmit}\r\n            disabled={selectedUsers.length === 0 || isLoading}\r\n          >\r\n            {isLoading ? '권한 부여 중...' : '권한 부여'}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\ProjectPermissionsPanel.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TrendingUp' is defined but never used.",
        "line": 10,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 13
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'TrendingUp' is defined but never used.",
        "line": 10,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport {\r\n  UserPlus,\r\n  Shield,\r\n  AlertTriangle,\r\n  TrendingUp,\r\n  Users,\r\n  Clock,\r\n  BarChart3,\r\n} from 'lucide-react';\r\nimport { useProjectPermissions } from '../../hooks/useProjectPermissions';\r\nimport { usePermissions } from '../../hooks/usePermissions';\r\nimport { ProjectPermissionModal } from './ProjectPermissionModal';\r\nimport { ProjectPermissionList } from './ProjectPermissionList';\r\nimport { ProjectRole } from '../../types/team';\r\n\r\ninterface ProjectPermissionsPanelProps {\r\n  projectId: string;\r\n  projectName: string;\r\n}\r\n\r\nexport const ProjectPermissionsPanel: React.FC<\r\n  ProjectPermissionsPanelProps\r\n> = ({ projectId, projectName }) => {\r\n  const {\r\n    permissions,\r\n    loading,\r\n    getPermissionsByRole,\r\n    getExpiredPermissions,\r\n    getExpiringPermissions,\r\n    getPermissionStats,\r\n  } = useProjectPermissions(projectId);\r\n  const { canManageProjectPermissions } = usePermissions();\r\n  const [showGrantModal, setShowGrantModal] = useState(false);\r\n\r\n  const stats = getPermissionStats();\r\n  const expiredPermissions = getExpiredPermissions();\r\n  const expiringPermissions = getExpiringPermissions();\r\n  const canManage = canManageProjectPermissions(projectId);\r\n\r\n  const roleLabels: Record<ProjectRole, string> = {\r\n    [ProjectRole.PROJECT_MANAGER]: '프로젝트 매니저',\r\n    [ProjectRole.PROJECT_LEAD]: '프로젝트 리드',\r\n    [ProjectRole.CONTRIBUTOR]: '기여자',\r\n    [ProjectRole.OBSERVER]: '관찰자',\r\n  };\r\n\r\n  const StatCard: React.FC<{\r\n    title: string;\r\n    value: number | string;\r\n    icon: React.ReactNode;\r\n    color?: string;\r\n    description?: string;\r\n  }> = ({ title, value, icon, color = 'text-blue-600', description }) => (\r\n    <Card>\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className={`${color} p-2 rounded-lg bg-opacity-10`}>{icon}</div>\r\n          <div>\r\n            <div className=\"text-2xl font-bold\">{value}</div>\r\n            <div className=\"text-sm text-gray-600\">{title}</div>\r\n            {description && (\r\n              <div className=\"text-xs text-gray-500 mt-1\">{description}</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* 헤더 */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\r\n            <Shield className=\"h-6 w-6\" />\r\n            프로젝트 권한 관리\r\n          </h2>\r\n          <p className=\"text-gray-600 mt-1\">{projectName}</p>\r\n        </div>\r\n        {canManage && (\r\n          <Button onClick={() => setShowGrantModal(true)} className=\"gap-2\">\r\n            <UserPlus className=\"h-4 w-4\" />\r\n            권한 부여\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      {/* 통계 카드 */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <StatCard\r\n          title=\"전체 권한\"\r\n          value={stats.totalPermissions}\r\n          icon={<Users className=\"h-5 w-5\" />}\r\n          color=\"text-blue-600\"\r\n        />\r\n        <StatCard\r\n          title=\"곧 만료\"\r\n          value={stats.expiringCount}\r\n          icon={<Clock className=\"h-5 w-5\" />}\r\n          color=\"text-orange-600\"\r\n          description={stats.expiringCount > 0 ? '7일 내 만료' : undefined}\r\n        />\r\n        <StatCard\r\n          title=\"만료됨\"\r\n          value={stats.expiredCount}\r\n          icon={<AlertTriangle className=\"h-5 w-5\" />}\r\n          color=\"text-red-600\"\r\n          description={stats.expiredCount > 0 ? '즉시 갱신 필요' : undefined}\r\n        />\r\n        <StatCard\r\n          title=\"매니저\"\r\n          value={stats.roleStats[ProjectRole.PROJECT_MANAGER]}\r\n          icon={<BarChart3 className=\"h-5 w-5\" />}\r\n          color=\"text-purple-600\"\r\n        />\r\n      </div>\r\n\r\n      {/* 알림 배너 */}\r\n      {(expiredPermissions.length > 0 || expiringPermissions.length > 0) && (\r\n        <div className=\"space-y-2\">\r\n          {expiredPermissions.length > 0 && (\r\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n              <div className=\"flex items-center gap-2 text-red-800\">\r\n                <AlertTriangle className=\"h-5 w-5\" />\r\n                <span className=\"font-medium\">\r\n                  {expiredPermissions.length}개의 권한이 만료되었습니다\r\n                </span>\r\n              </div>\r\n              <p className=\"text-red-700 text-sm mt-1\">\r\n                만료된 권한을 가진 사용자는 프로젝트에 접근할 수 없습니다.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {expiringPermissions.length > 0 && (\r\n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\r\n              <div className=\"flex items-center gap-2 text-orange-800\">\r\n                <Clock className=\"h-5 w-5\" />\r\n                <span className=\"font-medium\">\r\n                  {expiringPermissions.length}개의 권한이 곧 만료됩니다\r\n                </span>\r\n              </div>\r\n              <p className=\"text-orange-700 text-sm mt-1\">\r\n                7일 이내에 만료되는 권한이 있습니다. 필요시 연장해주세요.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* 탭 컨텐츠 */}\r\n      <Tabs defaultValue=\"all\" className=\"w-full\">\r\n        <TabsList className=\"grid w-full grid-cols-5\">\r\n          <TabsTrigger value=\"all\" className=\"gap-1\">\r\n            전체\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {permissions.length}\r\n            </Badge>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"managers\" className=\"gap-1\">\r\n            매니저\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {stats.roleStats[ProjectRole.PROJECT_MANAGER]}\r\n            </Badge>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"leads\" className=\"gap-1\">\r\n            리드\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {stats.roleStats[ProjectRole.PROJECT_LEAD]}\r\n            </Badge>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"contributors\" className=\"gap-1\">\r\n            기여자\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {stats.roleStats[ProjectRole.CONTRIBUTOR]}\r\n            </Badge>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"observers\" className=\"gap-1\">\r\n            관찰자\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {stats.roleStats[ProjectRole.OBSERVER]}\r\n            </Badge>\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"all\" className=\"mt-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>모든 권한</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <ProjectPermissionList\r\n                projectId={projectId}\r\n                permissions={permissions}\r\n                loading={loading}\r\n                canManagePermissions={canManage}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {Object.entries(ProjectRole).map(([key, role]) => (\r\n          <TabsContent key={role} value={key.toLowerCase()} className=\"mt-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>{roleLabels[role]} 권한</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ProjectPermissionList\r\n                  projectId={projectId}\r\n                  permissions={getPermissionsByRole(role)}\r\n                  loading={loading}\r\n                  canManagePermissions={canManage}\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        ))}\r\n      </Tabs>\r\n\r\n      {/* 권한 부여 모달 */}\r\n      <ProjectPermissionModal\r\n        isOpen={showGrantModal}\r\n        onClose={() => setShowGrantModal(false)}\r\n        projectId={projectId}\r\n        projectName={projectName}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\TaskPermissionEditModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 22,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 22,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 113,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 113,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3259, 3293], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `␍⏎····················?·format(expiresAt,·'PPP')␍⏎···················` with `·?·format(expiresAt,·'PPP')`",
        "line": 257,
        "column": 29,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 259,
        "endColumn": 20,
        "fix": { "range": [8299, 8368], "text": " ? format(expiresAt, 'PPP')" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `{'·'}␍⏎··················{expiresAt␍⏎····················?·format(expiresAt,·'PPP')␍⏎···················` with `·{expiresAt·?·format(expiresAt,·'PPP')`",
        "line": 320,
        "column": 20,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 323,
        "endColumn": 20,
        "fix": {
          "range": [10619, 10723],
          "text": " {expiresAt ? format(expiresAt, 'PPP')"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Label } from '../ui/label';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '../ui/select';\r\nimport { Calendar } from '../ui/calendar';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\nimport { CalendarIcon, Edit } from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ko } from 'date-fns/locale';\r\nimport { cn } from '../../lib/utils';\r\nimport {\r\n  TaskRole,\r\n  TaskPermission,\r\n  UpdateTaskPermissionInput,\r\n} from '../../types/team';\r\nimport { useTaskPermissions } from '../../hooks/useTaskPermissions';\r\n\r\ninterface TaskPermissionEditModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  permission: TaskPermission;\r\n  onSave: (input: UpdateTaskPermissionInput) => Promise<void>;\r\n}\r\n\r\nexport const TaskPermissionEditModal: React.FC<\r\n  TaskPermissionEditModalProps\r\n> = ({ isOpen, onClose, permission, onSave }) => {\r\n  const { getPermissionsByRole } = useTaskPermissions(permission.taskId);\r\n  const [selectedRole, setSelectedRole] = useState<TaskRole>(permission.role);\r\n  const [expiresAt, setExpiresAt] = useState<Date | undefined>(\r\n    permission.expiresAt || undefined\r\n  );\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const roleLabels: Record<TaskRole, string> = {\r\n    [TaskRole.ASSIGNEE]: '담당자',\r\n    [TaskRole.REVIEWER]: '리뷰어',\r\n    [TaskRole.COLLABORATOR]: '협업자',\r\n    [TaskRole.WATCHER]: '관찰자',\r\n  };\r\n\r\n  const roleDescriptions: Record<TaskRole, string> = {\r\n    [TaskRole.ASSIGNEE]: '작업 수행 및 완료 권한 (단일 사용자만 가능)',\r\n    [TaskRole.REVIEWER]: '작업 검토 및 승인 권한',\r\n    [TaskRole.COLLABORATOR]: '작업 편집 및 협업 권한',\r\n    [TaskRole.WATCHER]: '작업 조회 및 댓글만 가능',\r\n  };\r\n\r\n  // 모달이 열릴 때마다 초기값 설정\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setSelectedRole(permission.role);\r\n      setExpiresAt(permission.expiresAt || undefined);\r\n    }\r\n  }, [isOpen, permission]);\r\n\r\n  const handleSubmit = async () => {\r\n    const hasChanges =\r\n      selectedRole !== permission.role || expiresAt !== permission.expiresAt;\r\n\r\n    if (!hasChanges) {\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    // 담당자 역할로 변경시 기존 담당자 확인\r\n    if (\r\n      selectedRole === TaskRole.ASSIGNEE &&\r\n      selectedRole !== permission.role\r\n    ) {\r\n      const existingAssignees = getPermissionsByRole(TaskRole.ASSIGNEE);\r\n      if (existingAssignees.length > 0) {\r\n        const confirmReplace = window.confirm(\r\n          '이미 다른 담당자가 지정되어 있습니다. 기존 담당자를 이 사용자로 교체하시겠습니까?'\r\n        );\r\n        if (!confirmReplace) return;\r\n      }\r\n    }\r\n\r\n    // 담당자에서 다른 역할로 변경시 확인\r\n    if (\r\n      permission.role === TaskRole.ASSIGNEE &&\r\n      selectedRole !== TaskRole.ASSIGNEE\r\n    ) {\r\n      const confirmChange = window.confirm(\r\n        '담당자 권한을 다른 역할로 변경하면 이 작업에 담당자가 없게 됩니다. 계속하시겠습니까?'\r\n      );\r\n      if (!confirmChange) return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const input: UpdateTaskPermissionInput = {\r\n        id: permission.id,\r\n        role: selectedRole,\r\n        expiresAt,\r\n      };\r\n      await onSave(input);\r\n    } catch (error) {\r\n      console.error('권한 수정 실패:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const isExpired = permission.expiresAt && permission.expiresAt < new Date();\r\n  const isExpiringSoon =\r\n    permission.expiresAt &&\r\n    permission.expiresAt <= new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) &&\r\n    permission.expiresAt > new Date();\r\n\r\n  const isRoleChangingToAssignee =\r\n    selectedRole === TaskRole.ASSIGNEE && permission.role !== TaskRole.ASSIGNEE;\r\n  const isRoleChangingFromAssignee =\r\n    permission.role === TaskRole.ASSIGNEE && selectedRole !== TaskRole.ASSIGNEE;\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Edit className=\"h-5 w-5\" />\r\n            작업 권한 수정\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-6\">\r\n          {/* 사용자 정보 (읽기 전용) */}\r\n          <div className=\"space-y-2\">\r\n            <Label>사용자</Label>\r\n            <div className=\"flex items-center gap-2 p-3 bg-gray-50 rounded-md\">\r\n              <div\r\n                className={cn(\r\n                  'w-8 h-8 rounded-full flex items-center justify-center',\r\n                  permission.role === TaskRole.ASSIGNEE\r\n                    ? 'bg-green-100'\r\n                    : 'bg-blue-100'\r\n                )}\r\n              >\r\n                U\r\n              </div>\r\n              <div>\r\n                <div className=\"font-medium\">사용자 {permission.userId}</div>\r\n                <div className=\"text-sm text-gray-500\">user@example.com</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 현재 상태 표시 */}\r\n          {(isExpired || isExpiringSoon) && (\r\n            <div\r\n              className={cn(\r\n                'p-3 rounded-md border',\r\n                isExpired\r\n                  ? 'bg-red-50 border-red-200'\r\n                  : 'bg-orange-50 border-orange-200'\r\n              )}\r\n            >\r\n              <div\r\n                className={cn(\r\n                  'text-sm font-medium',\r\n                  isExpired ? 'text-red-800' : 'text-orange-800'\r\n                )}\r\n              >\r\n                {isExpired\r\n                  ? '⚠️ 이 권한은 만료되었습니다'\r\n                  : '🔔 이 권한이 곧 만료됩니다'}\r\n              </div>\r\n              {permission.expiresAt && (\r\n                <div\r\n                  className={cn(\r\n                    'text-sm mt-1',\r\n                    isExpired ? 'text-red-600' : 'text-orange-600'\r\n                  )}\r\n                >\r\n                  만료일: {format(permission.expiresAt, 'PPP')}\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {/* 역할 변경 경고 */}\r\n          {isRoleChangingToAssignee && (\r\n            <div className=\"bg-yellow-50 border border-yellow-200 p-3 rounded-md\">\r\n              <div className=\"text-sm font-medium text-yellow-800\">\r\n                ⚠️ 담당자 역할로 변경\r\n              </div>\r\n              <div className=\"text-sm text-yellow-700 mt-1\">\r\n                담당자는 한 명만 지정할 수 있습니다. 기존 담당자가 있다면\r\n                교체됩니다.\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {isRoleChangingFromAssignee && (\r\n            <div className=\"bg-orange-50 border border-orange-200 p-3 rounded-md\">\r\n              <div className=\"text-sm font-medium text-orange-800\">\r\n                ⚠️ 담당자 권한 해제\r\n              </div>\r\n              <div className=\"text-sm text-orange-700 mt-1\">\r\n                담당자 권한을 해제하면 이 작업에 담당자가 없게 됩니다.\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* 역할 선택 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>역할</Label>\r\n            <Select\r\n              value={selectedRole}\r\n              onValueChange={value => setSelectedRole(value as TaskRole)}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {Object.entries(roleLabels).map(([role, label]) => (\r\n                  <SelectItem key={role} value={role}>\r\n                    <div>\r\n                      <div className=\"font-medium\">{label}</div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        {roleDescriptions[role as TaskRole]}\r\n                      </div>\r\n                    </div>\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* 만료일 수정 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>만료일</Label>\r\n            <Popover>\r\n              <PopoverTrigger asChild>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  className={cn(\r\n                    'w-full justify-start text-left font-normal',\r\n                    !expiresAt && 'text-muted-foreground'\r\n                  )}\r\n                >\r\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                  {expiresAt\r\n                    ? format(expiresAt, 'PPP')\r\n                    : '만료일 없음'}\r\n                </Button>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                <Calendar\r\n                  mode=\"single\"\r\n                  selected={expiresAt}\r\n                  onSelect={setExpiresAt}\r\n                  disabled={date => date < new Date()}\r\n                  initialFocus\r\n                />\r\n                <div className=\"p-3 border-t space-y-2\">\r\n                  {expiresAt && (\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setExpiresAt(undefined)}\r\n                      className=\"w-full\"\r\n                    >\r\n                      만료일 제거\r\n                    </Button>\r\n                  )}\r\n                  {isExpired && (\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        const oneMonthFromNow = new Date();\r\n                        oneMonthFromNow.setMonth(\r\n                          oneMonthFromNow.getMonth() + 1\r\n                        );\r\n                        setExpiresAt(oneMonthFromNow);\r\n                      }}\r\n                      className=\"w-full\"\r\n                    >\r\n                      1개월 연장\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </PopoverContent>\r\n            </Popover>\r\n          </div>\r\n\r\n          {/* 변경 사항 요약 */}\r\n          <div className=\"bg-blue-50 p-3 rounded-md\">\r\n            <div className=\"text-sm font-medium text-blue-800 mb-1\">\r\n              변경 사항\r\n            </div>\r\n            <div className=\"text-sm text-blue-700 space-y-1\">\r\n              {selectedRole !== permission.role && (\r\n                <div>\r\n                  역할: {roleLabels[permission.role]} →{' '}\r\n                  {roleLabels[selectedRole]}\r\n                </div>\r\n              )}\r\n              {expiresAt !== permission.expiresAt && (\r\n                <div>\r\n                  만료일:{' '}\r\n                  {permission.expiresAt\r\n                    ? format(permission.expiresAt, 'PPP')\r\n                    : '없음'}{' '}\r\n                  →{' '}\r\n                  {expiresAt\r\n                    ? format(expiresAt, 'PPP')\r\n                    : '없음'}\r\n                </div>\r\n              )}\r\n              {selectedRole === permission.role &&\r\n                expiresAt === permission.expiresAt && (\r\n                  <div className=\"text-gray-500\">변경 사항이 없습니다</div>\r\n                )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            취소\r\n          </Button>\r\n          <Button onClick={handleSubmit} disabled={isLoading}>\r\n            {isLoading ? '저장 중...' : '저장'}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\TaskPermissionList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Clock' is defined but never used.",
        "line": 33,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 8
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Clock' is defined but never used.",
        "line": 33,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 41,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 41,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 12
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 129,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 129,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3718, 3752], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 146,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 146,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4166, 4200], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '../ui/table';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '../ui/dropdown-menu';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from '../ui/alert-dialog';\r\nimport {\r\n  MoreVertical,\r\n  UserX,\r\n  Edit,\r\n  Clock,\r\n  AlertTriangle,\r\n  UserCheck,\r\n  Eye,\r\n  GitPullRequest,\r\n  Users,\r\n} from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ko } from 'date-fns/locale';\r\nimport { cn } from '../../lib/utils';\r\nimport {\r\n  TaskPermission,\r\n  TaskRole,\r\n  UpdateTaskPermissionInput,\r\n} from '../../types/team';\r\nimport { useTaskPermissions } from '../../hooks/useTaskPermissions';\r\nimport { TaskPermissionEditModal } from './TaskPermissionEditModal';\r\n\r\ninterface TaskPermissionListProps {\r\n  taskId: string;\r\n  permissions: TaskPermission[];\r\n  loading: boolean;\r\n  canManagePermissions: boolean;\r\n}\r\n\r\nexport const TaskPermissionList: React.FC<TaskPermissionListProps> = ({\r\n  taskId,\r\n  permissions,\r\n  loading,\r\n  canManagePermissions,\r\n}) => {\r\n  const { revokePermission, updatePermission } = useTaskPermissions(taskId);\r\n  const [selectedPermission, setSelectedPermission] =\r\n    useState<TaskPermission | null>(null);\r\n  const [showRevokeDialog, setShowRevokeDialog] = useState(false);\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n  const [isRevoking, setIsRevoking] = useState(false);\r\n\r\n  const roleLabels: Record<TaskRole, string> = {\r\n    [TaskRole.ASSIGNEE]: '담당자',\r\n    [TaskRole.REVIEWER]: '리뷰어',\r\n    [TaskRole.COLLABORATOR]: '협업자',\r\n    [TaskRole.WATCHER]: '관찰자',\r\n  };\r\n\r\n  const roleIcons: Record<TaskRole, React.ReactNode> = {\r\n    [TaskRole.ASSIGNEE]: <UserCheck className=\"h-4 w-4\" />,\r\n    [TaskRole.REVIEWER]: <GitPullRequest className=\"h-4 w-4\" />,\r\n    [TaskRole.COLLABORATOR]: <Users className=\"h-4 w-4\" />,\r\n    [TaskRole.WATCHER]: <Eye className=\"h-4 w-4\" />,\r\n  };\r\n\r\n  const getRoleBadgeColor = (role: TaskRole) => {\r\n    switch (role) {\r\n      case TaskRole.ASSIGNEE:\r\n        return 'bg-green-100 text-green-800 border-green-200';\r\n      case TaskRole.REVIEWER:\r\n        return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      case TaskRole.COLLABORATOR:\r\n        return 'bg-orange-100 text-orange-800 border-orange-200';\r\n      case TaskRole.WATCHER:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const isExpired = (permission: TaskPermission) => {\r\n    return permission.expiresAt && permission.expiresAt < new Date();\r\n  };\r\n\r\n  const isExpiringSoon = (permission: TaskPermission) => {\r\n    if (!permission.expiresAt) return false;\r\n    const sevenDaysFromNow = new Date();\r\n    sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);\r\n    return (\r\n      permission.expiresAt <= sevenDaysFromNow &&\r\n      permission.expiresAt > new Date()\r\n    );\r\n  };\r\n\r\n  const handleRevoke = async () => {\r\n    if (!selectedPermission) return;\r\n\r\n    const isAssignee = selectedPermission.role === TaskRole.ASSIGNEE;\r\n    if (isAssignee) {\r\n      const confirmRevoke = window.confirm(\r\n        '담당자 권한을 취소하면 이 작업에 담당자가 없게 됩니다. 계속하시겠습니까?'\r\n      );\r\n      if (!confirmRevoke) return;\r\n    }\r\n\r\n    setIsRevoking(true);\r\n    try {\r\n      await revokePermission(selectedPermission.id);\r\n      setShowRevokeDialog(false);\r\n      setSelectedPermission(null);\r\n    } catch (error) {\r\n      console.error('권한 취소 실패:', error);\r\n    } finally {\r\n      setIsRevoking(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (permission: TaskPermission) => {\r\n    setSelectedPermission(permission);\r\n    setShowEditModal(true);\r\n  };\r\n\r\n  const handleEditSave = async (input: UpdateTaskPermissionInput) => {\r\n    try {\r\n      await updatePermission(input);\r\n      setShowEditModal(false);\r\n      setSelectedPermission(null);\r\n    } catch (error) {\r\n      console.error('권한 수정 실패:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-32\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (permissions.length === 0) {\r\n    return (\r\n      <div className=\"text-center py-8 text-gray-500\">\r\n        <Users className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\r\n        <p>아직 부여된 작업 권한이 없습니다.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"border rounded-lg\">\r\n        <Table>\r\n          <TableHeader>\r\n            <TableRow>\r\n              <TableHead>사용자</TableHead>\r\n              <TableHead>역할</TableHead>\r\n              <TableHead>부여일</TableHead>\r\n              <TableHead>만료일</TableHead>\r\n              <TableHead>상태</TableHead>\r\n              {canManagePermissions && (\r\n                <TableHead className=\"w-[50px]\"></TableHead>\r\n              )}\r\n            </TableRow>\r\n          </TableHeader>\r\n          <TableBody>\r\n            {permissions.map(permission => (\r\n              <TableRow\r\n                key={permission.id}\r\n                className={cn(\r\n                  isExpired(permission) && 'opacity-50 bg-red-50',\r\n                  permission.role === TaskRole.ASSIGNEE && 'bg-green-50'\r\n                )}\r\n              >\r\n                <TableCell className=\"font-medium\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div\r\n                      className={cn(\r\n                        'w-8 h-8 rounded-full flex items-center justify-center',\r\n                        permission.role === TaskRole.ASSIGNEE\r\n                          ? 'bg-green-100'\r\n                          : 'bg-blue-100'\r\n                      )}\r\n                    >\r\n                      {/* TODO: 실제 사용자 정보 표시 */}U\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"font-medium\">\r\n                        사용자 {permission.userId}\r\n                      </div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        user@example.com\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge className={getRoleBadgeColor(permission.role)}>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        {roleIcons[permission.role]}\r\n                        {roleLabels[permission.role]}\r\n                      </div>\r\n                    </Badge>\r\n                    {permission.role === TaskRole.ASSIGNEE && (\r\n                      <Badge\r\n                        variant=\"outline\"\r\n                        className=\"text-xs border-green-200 text-green-700\"\r\n                      >\r\n                        주담당\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div className=\"text-sm\">\r\n                    {format(permission.grantedAt, 'PPP')}\r\n                  </div>\r\n                </TableCell>\r\n                <TableCell>\r\n                  {permission.expiresAt ? (\r\n                    <div className=\"flex items-center gap-1\">\r\n                      {isExpiringSoon(permission) && (\r\n                        <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\r\n                      )}\r\n                      <div\r\n                        className={cn(\r\n                          'text-sm',\r\n                          isExpired(permission) && 'text-red-600 font-medium',\r\n                          isExpiringSoon(permission) &&\r\n                            'text-orange-600 font-medium'\r\n                        )}\r\n                      >\r\n                        {format(permission.expiresAt, 'PPP')}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"text-sm text-gray-500\">만료일 없음</div>\r\n                  )}\r\n                </TableCell>\r\n                <TableCell>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {isExpired(permission) ? (\r\n                      <Badge variant=\"destructive\">만료됨</Badge>\r\n                    ) : isExpiringSoon(permission) ? (\r\n                      <Badge\r\n                        variant=\"outline\"\r\n                        className=\"border-orange-200 text-orange-700\"\r\n                      >\r\n                        곧 만료\r\n                      </Badge>\r\n                    ) : (\r\n                      <Badge\r\n                        variant=\"outline\"\r\n                        className=\"border-green-200 text-green-700\"\r\n                      >\r\n                        활성\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </TableCell>\r\n                {canManagePermissions && (\r\n                  <TableCell>\r\n                    <DropdownMenu>\r\n                      <DropdownMenuTrigger asChild>\r\n                        <Button variant=\"ghost\" size=\"sm\">\r\n                          <MoreVertical className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </DropdownMenuTrigger>\r\n                      <DropdownMenuContent align=\"end\">\r\n                        <DropdownMenuItem\r\n                          onClick={() => handleEdit(permission)}\r\n                          className=\"flex items-center gap-2\"\r\n                        >\r\n                          <Edit className=\"h-4 w-4\" />\r\n                          수정\r\n                        </DropdownMenuItem>\r\n                        <DropdownMenuSeparator />\r\n                        <DropdownMenuItem\r\n                          onClick={() => {\r\n                            setSelectedPermission(permission);\r\n                            setShowRevokeDialog(true);\r\n                          }}\r\n                          className=\"flex items-center gap-2 text-red-600\"\r\n                        >\r\n                          <UserX className=\"h-4 w-4\" />\r\n                          권한 취소\r\n                        </DropdownMenuItem>\r\n                      </DropdownMenuContent>\r\n                    </DropdownMenu>\r\n                  </TableCell>\r\n                )}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n\r\n      {/* 권한 취소 확인 다이얼로그 */}\r\n      <AlertDialog open={showRevokeDialog} onOpenChange={setShowRevokeDialog}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>권한 취소 확인</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              {selectedPermission && (\r\n                <>\r\n                  사용자 <strong>{selectedPermission.userId}</strong>의 작업\r\n                  권한을 취소하시겠습니까?\r\n                  {selectedPermission.role === TaskRole.ASSIGNEE && (\r\n                    <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-yellow-800 text-sm\">\r\n                      ⚠️ 담당자 권한을 취소하면 이 작업에 담당자가 없게 됩니다.\r\n                    </div>\r\n                  )}\r\n                  <br />이 작업은 되돌릴 수 없습니다.\r\n                </>\r\n              )}\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>취소</AlertDialogCancel>\r\n            <AlertDialogAction\r\n              onClick={handleRevoke}\r\n              disabled={isRevoking}\r\n              className=\"bg-red-600 hover:bg-red-700\"\r\n            >\r\n              {isRevoking ? '취소 중...' : '권한 취소'}\r\n            </AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n\r\n      {/* 권한 수정 모달 */}\r\n      {selectedPermission && (\r\n        <TaskPermissionEditModal\r\n          isOpen={showEditModal}\r\n          onClose={() => {\r\n            setShowEditModal(false);\r\n            setSelectedPermission(null);\r\n          }}\r\n          permission={selectedPermission}\r\n          onSave={handleEditSave}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\TaskPermissionModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 24,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 24,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 188,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 188,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5344, 5378], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `␍⏎····················?·format(expiresAt,·'PPP')␍⏎···················` with `·?·format(expiresAt,·'PPP')`",
        "line": 330,
        "column": 29,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 332,
        "endColumn": 20,
        "fix": {
          "range": [10715, 10784],
          "text": " ? format(expiresAt, 'PPP')"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogFooter,\r\n} from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '../ui/select';\r\nimport { Badge } from '../ui/badge';\r\nimport { Calendar } from '../ui/calendar';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\nimport { CalendarIcon, UserPlus, X, Search } from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ko } from 'date-fns/locale';\r\nimport { cn } from '../../lib/utils';\r\nimport { TaskRole, CreateTaskPermissionInput, User } from '../../types/team';\r\nimport { useTaskPermissions } from '../../hooks/useTaskPermissions';\r\nimport { toast } from '../../utils/toast';\r\n\r\ninterface TaskPermissionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  taskId: string;\r\n  taskTitle: string;\r\n}\r\n\r\nexport const TaskPermissionModal: React.FC<TaskPermissionModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  taskId,\r\n  taskTitle,\r\n}) => {\r\n  const { grantPermission, getPermissionsByRole } = useTaskPermissions(taskId);\r\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);\r\n  const [selectedRole, setSelectedRole] = useState<TaskRole>(\r\n    TaskRole.COLLABORATOR\r\n  );\r\n  const [expiresAt, setExpiresAt] = useState<Date | undefined>();\r\n  const [userSearch, setUserSearch] = useState('');\r\n  const [searchResults, setSearchResults] = useState<User[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const roleLabels: Record<TaskRole, string> = {\r\n    [TaskRole.ASSIGNEE]: '담당자',\r\n    [TaskRole.REVIEWER]: '리뷰어',\r\n    [TaskRole.COLLABORATOR]: '협업자',\r\n    [TaskRole.WATCHER]: '관찰자',\r\n  };\r\n\r\n  const roleDescriptions: Record<TaskRole, string> = {\r\n    [TaskRole.ASSIGNEE]: '작업 수행 및 완료 권한 (단일 사용자만 가능)',\r\n    [TaskRole.REVIEWER]: '작업 검토 및 승인 권한',\r\n    [TaskRole.COLLABORATOR]: '작업 편집 및 협업 권한',\r\n    [TaskRole.WATCHER]: '작업 조회 및 댓글만 가능',\r\n  };\r\n\r\n  // 사용자 검색 (실제로는 프로젝트 멤버에서만 검색)\r\n  const searchUsers = async (query: string) => {\r\n    if (!query.trim()) {\r\n      setSearchResults([]);\r\n      return;\r\n    }\r\n\r\n    // TODO: 실제 프로젝트 멤버 검색 로직 구현\r\n    // 현재는 모의 데이터 사용\r\n    const mockUsers: User[] = [\r\n      {\r\n        id: 'user1',\r\n        email: 'john@example.com',\r\n        name: 'John Doe',\r\n        displayName: 'John Doe',\r\n        photoURL: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        isActive: true,\r\n      },\r\n      {\r\n        id: 'user2',\r\n        email: 'jane@example.com',\r\n        name: 'Jane Smith',\r\n        displayName: 'Jane Smith',\r\n        photoURL: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        isActive: true,\r\n      },\r\n      {\r\n        id: 'user3',\r\n        email: 'mike@example.com',\r\n        name: 'Mike Johnson',\r\n        displayName: 'Mike Johnson',\r\n        photoURL: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        isActive: true,\r\n      },\r\n    ];\r\n\r\n    const filtered = mockUsers.filter(\r\n      user =>\r\n        user.displayName?.toLowerCase().includes(query.toLowerCase()) ||\r\n        user.email.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n\r\n    setSearchResults(filtered);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const debounceTimer = setTimeout(() => {\r\n      searchUsers(userSearch);\r\n    }, 300);\r\n\r\n    return () => clearTimeout(debounceTimer);\r\n  }, [userSearch]);\r\n\r\n  const handleAddUser = (user: User) => {\r\n    if (!selectedUsers.find(u => u.id === user.id)) {\r\n      // 담당자 역할의 경우 단일 사용자만 선택 가능\r\n      if (selectedRole === TaskRole.ASSIGNEE) {\r\n        setSelectedUsers([user]);\r\n      } else {\r\n        setSelectedUsers([...selectedUsers, user]);\r\n      }\r\n      setUserSearch('');\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveUser = (userId: string) => {\r\n    setSelectedUsers(selectedUsers.filter(u => u.id !== userId));\r\n  };\r\n\r\n  const handleRoleChange = (newRole: TaskRole) => {\r\n    setSelectedRole(newRole);\r\n\r\n    // 담당자 역할로 변경시 첫 번째 사용자만 유지\r\n    if (newRole === TaskRole.ASSIGNEE && selectedUsers.length > 1) {\r\n      setSelectedUsers(selectedUsers.slice(0, 1));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (selectedUsers.length === 0) {\r\n      toast.error('권한을 부여할 사용자를 선택해주세요.');\r\n      return;\r\n    }\r\n\r\n    // 담당자 역할의 경우 기존 담당자 확인\r\n    if (selectedRole === TaskRole.ASSIGNEE) {\r\n      const existingAssignees = getPermissionsByRole(TaskRole.ASSIGNEE);\r\n      if (existingAssignees.length > 0) {\r\n        const confirmReplace = window.confirm(\r\n          '이미 담당자가 지정되어 있습니다. 기존 담당자를 새로운 담당자로 교체하시겠습니까?'\r\n        );\r\n        if (!confirmReplace) return;\r\n      }\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      for (const user of selectedUsers) {\r\n        const input: CreateTaskPermissionInput = {\r\n          taskId,\r\n          userId: user.id,\r\n          role: selectedRole,\r\n          expiresAt,\r\n        };\r\n        await grantPermission(input);\r\n      }\r\n\r\n      const roleLabel = roleLabels[selectedRole];\r\n      toast.success(\r\n        `${selectedUsers.length}명에게 ${roleLabel} 권한이 부여되었습니다.`\r\n      );\r\n      onClose();\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('권한 부여 실패:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setSelectedUsers([]);\r\n    setSelectedRole(TaskRole.COLLABORATOR);\r\n    setExpiresAt(undefined);\r\n    setUserSearch('');\r\n    setSearchResults([]);\r\n  };\r\n\r\n  const isAssigneeRole = selectedRole === TaskRole.ASSIGNEE;\r\n  const maxUsers = isAssigneeRole ? 1 : undefined;\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-2xl\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <UserPlus className=\"h-5 w-5\" />\r\n            작업 권한 부여 - {taskTitle}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-6\">\r\n          {/* 역할 선택 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>역할</Label>\r\n            <Select\r\n              value={selectedRole}\r\n              onValueChange={value => handleRoleChange(value as TaskRole)}\r\n            >\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {Object.entries(roleLabels).map(([role, label]) => (\r\n                  <SelectItem key={role} value={role}>\r\n                    <div>\r\n                      <div className=\"font-medium\">{label}</div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        {roleDescriptions[role as TaskRole]}\r\n                      </div>\r\n                    </div>\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n            {isAssigneeRole && (\r\n              <div className=\"text-sm text-orange-600 bg-orange-50 p-2 rounded\">\r\n                ⚠️ 담당자는 한 명만 지정할 수 있습니다. 기존 담당자가 있다면\r\n                교체됩니다.\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* 사용자 선택 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>\r\n              사용자 선택\r\n              {maxUsers && (\r\n                <span className=\"text-sm text-gray-500 ml-1\">\r\n                  (최대 {maxUsers}명)\r\n                </span>\r\n              )}\r\n            </Label>\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"프로젝트 멤버 검색 (이름 또는 이메일)\"\r\n                value={userSearch}\r\n                onChange={e => setUserSearch(e.target.value)}\r\n                className=\"pl-9\"\r\n                disabled={maxUsers && selectedUsers.length >= maxUsers}\r\n              />\r\n              {searchResults.length > 0 && (\r\n                <div className=\"absolute top-full left-0 right-0 z-10 mt-1 bg-white border rounded-md shadow-lg max-h-48 overflow-y-auto\">\r\n                  {searchResults.map(user => {\r\n                    const isDisabled =\r\n                      maxUsers && selectedUsers.length >= maxUsers;\r\n                    return (\r\n                      <button\r\n                        key={user.id}\r\n                        onClick={() => handleAddUser(user)}\r\n                        disabled={isDisabled}\r\n                        className={cn(\r\n                          'w-full px-3 py-2 text-left hover:bg-gray-50 flex items-center gap-2',\r\n                          isDisabled && 'opacity-50 cursor-not-allowed'\r\n                        )}\r\n                      >\r\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                          {user.displayName?.[0] || user.email[0]}\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"font-medium\">\r\n                            {user.displayName || user.email}\r\n                          </div>\r\n                          <div className=\"text-sm text-gray-500\">\r\n                            {user.email}\r\n                          </div>\r\n                        </div>\r\n                      </button>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* 선택된 사용자들 */}\r\n            {selectedUsers.length > 0 && (\r\n              <div className=\"flex flex-wrap gap-2 mt-2\">\r\n                {selectedUsers.map(user => (\r\n                  <Badge key={user.id} variant=\"secondary\" className=\"gap-1\">\r\n                    {user.displayName || user.email}\r\n                    <button\r\n                      onClick={() => handleRemoveUser(user.id)}\r\n                      className=\"ml-1 hover:bg-gray-200 rounded-full p-0.5\"\r\n                    >\r\n                      <X className=\"h-3 w-3\" />\r\n                    </button>\r\n                  </Badge>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* 만료일 선택 */}\r\n          <div className=\"space-y-2\">\r\n            <Label>만료일 (선택사항)</Label>\r\n            <Popover>\r\n              <PopoverTrigger asChild>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  className={cn(\r\n                    'w-full justify-start text-left font-normal',\r\n                    !expiresAt && 'text-muted-foreground'\r\n                  )}\r\n                >\r\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n                  {expiresAt\r\n                    ? format(expiresAt, 'PPP')\r\n                    : '만료일 없음'}\r\n                </Button>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                <Calendar\r\n                  mode=\"single\"\r\n                  selected={expiresAt}\r\n                  onSelect={setExpiresAt}\r\n                  disabled={date => date < new Date()}\r\n                  initialFocus\r\n                />\r\n                {expiresAt && (\r\n                  <div className=\"p-3 border-t\">\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setExpiresAt(undefined)}\r\n                      className=\"w-full\"\r\n                    >\r\n                      만료일 제거\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </PopoverContent>\r\n            </Popover>\r\n          </div>\r\n\r\n          {/* 역할별 추가 안내 */}\r\n          {selectedRole === TaskRole.ASSIGNEE && (\r\n            <div className=\"bg-blue-50 p-3 rounded-md\">\r\n              <div className=\"text-sm font-medium text-blue-800 mb-1\">\r\n                담당자 권한\r\n              </div>\r\n              <div className=\"text-sm text-blue-700\">\r\n                • 작업을 완료할 수 있습니다\r\n                <br />\r\n                • 작업 상태를 변경할 수 있습니다\r\n                <br />\r\n                • 작업 내용을 편집할 수 있습니다\r\n                <br />• 한 번에 한 명만 지정 가능합니다\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <DialogFooter>\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            취소\r\n          </Button>\r\n          <Button\r\n            onClick={handleSubmit}\r\n            disabled={selectedUsers.length === 0 || isLoading}\r\n          >\r\n            {isLoading ? '권한 부여 중...' : '권한 부여'}\r\n          </Button>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\TaskPermissionsPanel.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'changeAssignee' is assigned a value but never used.",
        "line": 37,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'changeAssignee' is assigned a value but never used.",
        "line": 37,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'addReviewer' is assigned a value but never used.",
        "line": 38,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 16
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'addReviewer' is assigned a value but never used.",
        "line": 38,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'addCollaborator' is assigned a value but never used.",
        "line": 39,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 20
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'addCollaborator' is assigned a value but never used.",
        "line": 39,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'addWatcher' is assigned a value but never used.",
        "line": 40,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 15
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'addWatcher' is assigned a value but never used.",
        "line": 40,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'key' is defined but never used.",
        "line": 230,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 230,
        "endColumn": 44
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'key' is defined but never used.",
        "line": 230,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 230,
        "endColumn": 44
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport {\r\n  UserPlus,\r\n  Users,\r\n  UserCheck,\r\n  Eye,\r\n  GitPullRequest,\r\n  Clock,\r\n  AlertTriangle,\r\n} from 'lucide-react';\r\nimport { useTaskPermissions } from '../../hooks/useTaskPermissions';\r\nimport { usePermissions } from '../../hooks/usePermissions';\r\nimport { TaskPermissionModal } from './TaskPermissionModal';\r\nimport { TaskPermissionList } from './TaskPermissionList';\r\nimport { TaskRole } from '../../types/team';\r\n\r\ninterface TaskPermissionsPanelProps {\r\n  taskId: string;\r\n  taskTitle: string;\r\n}\r\n\r\nexport const TaskPermissionsPanel: React.FC<TaskPermissionsPanelProps> = ({\r\n  taskId,\r\n  taskTitle,\r\n}) => {\r\n  const {\r\n    permissions,\r\n    loading,\r\n    getPermissionsByRole,\r\n    getExpiredPermissions,\r\n    getExpiringPermissions,\r\n    getPermissionStats,\r\n    changeAssignee,\r\n    addReviewer,\r\n    addCollaborator,\r\n    addWatcher,\r\n  } = useTaskPermissions(taskId);\r\n  const { canManageTaskPermissions } = usePermissions();\r\n  const [showGrantModal, setShowGrantModal] = useState(false);\r\n\r\n  const stats = getPermissionStats();\r\n  const expiredPermissions = getExpiredPermissions();\r\n  const expiringPermissions = getExpiringPermissions();\r\n  const canManage = canManageTaskPermissions(taskId);\r\n\r\n  const roleLabels: Record<TaskRole, string> = {\r\n    [TaskRole.ASSIGNEE]: '담당자',\r\n    [TaskRole.REVIEWER]: '리뷰어',\r\n    [TaskRole.COLLABORATOR]: '협업자',\r\n    [TaskRole.WATCHER]: '관찰자',\r\n  };\r\n\r\n  const roleIcons: Record<TaskRole, React.ReactNode> = {\r\n    [TaskRole.ASSIGNEE]: <UserCheck className=\"h-4 w-4\" />,\r\n    [TaskRole.REVIEWER]: <GitPullRequest className=\"h-4 w-4\" />,\r\n    [TaskRole.COLLABORATOR]: <Users className=\"h-4 w-4\" />,\r\n    [TaskRole.WATCHER]: <Eye className=\"h-4 w-4\" />,\r\n  };\r\n\r\n  const getRoleBadgeColor = (role: TaskRole) => {\r\n    switch (role) {\r\n      case TaskRole.ASSIGNEE:\r\n        return 'bg-green-100 text-green-800';\r\n      case TaskRole.REVIEWER:\r\n        return 'bg-blue-100 text-blue-800';\r\n      case TaskRole.COLLABORATOR:\r\n        return 'bg-orange-100 text-orange-800';\r\n      case TaskRole.WATCHER:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const StatCard: React.FC<{\r\n    title: string;\r\n    value: number | string;\r\n    icon: React.ReactNode;\r\n    color?: string;\r\n    description?: string;\r\n  }> = ({ title, value, icon, color = 'text-blue-600', description }) => (\r\n    <Card>\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className={`${color} p-2 rounded-lg bg-opacity-10`}>{icon}</div>\r\n          <div>\r\n            <div className=\"text-2xl font-bold\">{value}</div>\r\n            <div className=\"text-sm text-gray-600\">{title}</div>\r\n            {description && (\r\n              <div className=\"text-xs text-gray-500 mt-1\">{description}</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const QuickActionButton: React.FC<{\r\n    role: TaskRole;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n  }> = ({ role, onClick, disabled }) => (\r\n    <Button\r\n      variant=\"outline\"\r\n      size=\"sm\"\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      className=\"gap-2\"\r\n    >\r\n      {roleIcons[role]}\r\n      {roleLabels[role]} 추가\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* 헤더 */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\r\n            <Users className=\"h-6 w-6\" />\r\n            작업 권한 관리\r\n          </h2>\r\n          <p className=\"text-gray-600 mt-1\">{taskTitle}</p>\r\n        </div>\r\n        {canManage && (\r\n          <div className=\"flex gap-2\">\r\n            <QuickActionButton\r\n              role={TaskRole.ASSIGNEE}\r\n              onClick={() => {\r\n                /* TODO: 담당자 변경 모달 */\r\n              }}\r\n            />\r\n            <QuickActionButton\r\n              role={TaskRole.REVIEWER}\r\n              onClick={() => {\r\n                /* TODO: 리뷰어 추가 모달 */\r\n              }}\r\n            />\r\n            <Button onClick={() => setShowGrantModal(true)} className=\"gap-2\">\r\n              <UserPlus className=\"h-4 w-4\" />\r\n              권한 부여\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 통계 카드 */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <StatCard\r\n          title=\"전체 권한\"\r\n          value={stats.totalPermissions}\r\n          icon={<Users className=\"h-5 w-5\" />}\r\n          color=\"text-blue-600\"\r\n        />\r\n        <StatCard\r\n          title=\"담당자\"\r\n          value={stats.roleStats[TaskRole.ASSIGNEE]}\r\n          icon={<UserCheck className=\"h-5 w-5\" />}\r\n          color=\"text-green-600\"\r\n          description={\r\n            stats.roleStats[TaskRole.ASSIGNEE] === 0 ? '담당자 없음' : undefined\r\n          }\r\n        />\r\n        <StatCard\r\n          title=\"리뷰어\"\r\n          value={stats.roleStats[TaskRole.REVIEWER]}\r\n          icon={<GitPullRequest className=\"h-5 w-5\" />}\r\n          color=\"text-blue-600\"\r\n        />\r\n        <StatCard\r\n          title=\"관찰자\"\r\n          value={stats.roleStats[TaskRole.WATCHER]}\r\n          icon={<Eye className=\"h-5 w-5\" />}\r\n          color=\"text-gray-600\"\r\n        />\r\n      </div>\r\n\r\n      {/* 알림 배너 */}\r\n      {stats.roleStats[TaskRole.ASSIGNEE] === 0 && (\r\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\r\n          <div className=\"flex items-center gap-2 text-yellow-800\">\r\n            <AlertTriangle className=\"h-5 w-5\" />\r\n            <span className=\"font-medium\">\r\n              이 작업에 담당자가 지정되지 않았습니다\r\n            </span>\r\n          </div>\r\n          <p className=\"text-yellow-700 text-sm mt-1\">\r\n            작업을 진행하려면 담당자를 지정해주세요.\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {(expiredPermissions.length > 0 || expiringPermissions.length > 0) && (\r\n        <div className=\"space-y-2\">\r\n          {expiredPermissions.length > 0 && (\r\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n              <div className=\"flex items-center gap-2 text-red-800\">\r\n                <AlertTriangle className=\"h-5 w-5\" />\r\n                <span className=\"font-medium\">\r\n                  {expiredPermissions.length}개의 권한이 만료되었습니다\r\n                </span>\r\n              </div>\r\n              <p className=\"text-red-700 text-sm mt-1\">\r\n                만료된 권한을 가진 사용자는 작업에 접근할 수 없습니다.\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {expiringPermissions.length > 0 && (\r\n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\r\n              <div className=\"flex items-center gap-2 text-orange-800\">\r\n                <Clock className=\"h-5 w-5\" />\r\n                <span className=\"font-medium\">\r\n                  {expiringPermissions.length}개의 권한이 곧 만료됩니다\r\n                </span>\r\n              </div>\r\n              <p className=\"text-orange-700 text-sm mt-1\">\r\n                7일 이내에 만료되는 권한이 있습니다. 필요시 연장해주세요.\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* 역할별 요약 카드 */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        {Object.entries(TaskRole).map(([key, role]) => {\r\n          const rolePermissions = getPermissionsByRole(role);\r\n          const isAssignee = role === TaskRole.ASSIGNEE;\r\n\r\n          return (\r\n            <Card\r\n              key={role}\r\n              className={\r\n                rolePermissions.length === 0 && isAssignee\r\n                  ? 'border-yellow-200'\r\n                  : ''\r\n              }\r\n            >\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-sm flex items-center gap-2\">\r\n                  {roleIcons[role]}\r\n                  {roleLabels[role]}\r\n                  <Badge className={getRoleBadgeColor(role)}>\r\n                    {rolePermissions.length}\r\n                  </Badge>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"pt-0\">\r\n                {rolePermissions.length === 0 ? (\r\n                  <div className=\"text-sm text-gray-500\">\r\n                    {isAssignee ? '담당자 없음' : `${roleLabels[role]} 없음`}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"space-y-1\">\r\n                    {rolePermissions.slice(0, 2).map(permission => (\r\n                      <div key={permission.id} className=\"text-sm\">\r\n                        사용자 {permission.userId}\r\n                      </div>\r\n                    ))}\r\n                    {rolePermissions.length > 2 && (\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        외 {rolePermissions.length - 2}명\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* 탭 컨텐츠 */}\r\n      <Tabs defaultValue=\"all\" className=\"w-full\">\r\n        <TabsList className=\"grid w-full grid-cols-5\">\r\n          <TabsTrigger value=\"all\" className=\"gap-1\">\r\n            전체\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {permissions.length}\r\n            </Badge>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"assignees\" className=\"gap-1\">\r\n            담당자\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {stats.roleStats[TaskRole.ASSIGNEE]}\r\n            </Badge>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"reviewers\" className=\"gap-1\">\r\n            리뷰어\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {stats.roleStats[TaskRole.REVIEWER]}\r\n            </Badge>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"collaborators\" className=\"gap-1\">\r\n            협업자\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {stats.roleStats[TaskRole.COLLABORATOR]}\r\n            </Badge>\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"watchers\" className=\"gap-1\">\r\n            관찰자\r\n            <Badge variant=\"secondary\" className=\"ml-1\">\r\n              {stats.roleStats[TaskRole.WATCHER]}\r\n            </Badge>\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"all\" className=\"mt-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>모든 권한</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <TaskPermissionList\r\n                taskId={taskId}\r\n                permissions={permissions}\r\n                loading={loading}\r\n                canManagePermissions={canManage}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {Object.entries(TaskRole).map(([key, role]) => (\r\n          <TabsContent key={role} value={key.toLowerCase()} className=\"mt-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  {roleIcons[role]}\r\n                  {roleLabels[role]} 권한\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <TaskPermissionList\r\n                  taskId={taskId}\r\n                  permissions={getPermissionsByRole(role)}\r\n                  loading={loading}\r\n                  canManagePermissions={canManage}\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        ))}\r\n      </Tabs>\r\n\r\n      {/* 권한 부여 모달 */}\r\n      <TaskPermissionModal\r\n        isOpen={showGrantModal}\r\n        onClose={() => setShowGrantModal(false)}\r\n        taskId={taskId}\r\n        taskTitle={taskTitle}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\permissions\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\project\\ProjectCard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Settings' is defined but never used.",
        "line": 20,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 11
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Settings' is defined but never used.",
        "line": 20,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 25,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 25,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 12
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `␍⏎················시작:·{format(project.startDate,·'PPP')}␍⏎··············` with `시작:·{format(project.startDate,·'PPP')}`",
        "line": 262,
        "column": 21,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 264,
        "endColumn": 15,
        "fix": {
          "range": [8668, 8740],
          "text": "시작: {format(project.startDate, 'PPP')}"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `␍⏎················종료:·{format(project.endDate,·'PPP')}␍⏎··············` with `종료:·{format(project.endDate,·'PPP')}`",
        "line": 275,
        "column": 21,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 277,
        "endColumn": 15,
        "fix": {
          "range": [9071, 9141],
          "text": "종료: {format(project.endDate, 'PPP')}"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 2,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '../ui/dropdown-menu';\r\nimport {\r\n  Calendar,\r\n  Users,\r\n  CheckCircle,\r\n  Circle,\r\n  MoreVertical,\r\n  Edit,\r\n  Trash,\r\n  Settings,\r\n  UserPlus,\r\n  BarChart3,\r\n} from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ko } from 'date-fns/locale';\r\nimport { cn } from '../../lib/utils';\r\nimport {\r\n  Project,\r\n  ProjectStatus,\r\n  PermissionAction,\r\n  ResourceType,\r\n} from '../../types/team';\r\nimport {\r\n  ProjectPermissionGate,\r\n  PermissionGate,\r\n} from '../common/PermissionGate';\r\n\r\ninterface ProjectCardProps {\r\n  project: Project;\r\n  onEdit?: (project: Project) => void;\r\n  onDelete?: (projectId: string) => void;\r\n  onManagePermissions?: (projectId: string) => void;\r\n  onViewAnalytics?: (projectId: string) => void;\r\n}\r\n\r\nexport const ProjectCard: React.FC<ProjectCardProps> = ({\r\n  project,\r\n  onEdit,\r\n  onDelete,\r\n  onManagePermissions,\r\n  onViewAnalytics,\r\n}) => {\r\n  const [showFullDescription, setShowFullDescription] = useState(false);\r\n\r\n  const getStatusColor = (status: ProjectStatus) => {\r\n    switch (status) {\r\n      case ProjectStatus.ACTIVE:\r\n        return 'bg-green-100 text-green-800 border-green-200';\r\n      case ProjectStatus.PLANNING:\r\n        return 'bg-blue-100 text-blue-800 border-blue-200';\r\n      case ProjectStatus.ON_HOLD:\r\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case ProjectStatus.COMPLETED:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n      case ProjectStatus.CANCELLED:\r\n        return 'bg-red-100 text-red-800 border-red-200';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getStatusLabel = (status: ProjectStatus) => {\r\n    switch (status) {\r\n      case ProjectStatus.ACTIVE:\r\n        return '진행중';\r\n      case ProjectStatus.PLANNING:\r\n        return '계획중';\r\n      case ProjectStatus.ON_HOLD:\r\n        return '보류';\r\n      case ProjectStatus.COMPLETED:\r\n        return '완료';\r\n      case ProjectStatus.CANCELLED:\r\n        return '취소';\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  const progressPercentage = Math.round(project.progress || 0);\r\n  const isOverdue =\r\n    project.endDate &&\r\n    project.endDate < new Date() &&\r\n    project.status !== ProjectStatus.COMPLETED;\r\n\r\n  return (\r\n    <Card\r\n      className={cn(\r\n        'h-full transition-all hover:shadow-md',\r\n        isOverdue && 'border-red-200'\r\n      )}\r\n    >\r\n      <CardHeader className=\"pb-3\">\r\n        <div className=\"flex items-start justify-between\">\r\n          <div className=\"flex-1 min-w-0\">\r\n            <CardTitle className=\"text-lg font-semibold truncate mb-2\">\r\n              {project.name}\r\n            </CardTitle>\r\n            <div className=\"flex items-center gap-2 flex-wrap\">\r\n              <Badge className={getStatusColor(project.status)}>\r\n                {getStatusLabel(project.status)}\r\n              </Badge>\r\n              {isOverdue && (\r\n                <Badge variant=\"destructive\" className=\"text-xs\">\r\n                  지연됨\r\n                </Badge>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* 권한 기반 액션 메뉴 */}\r\n          <PermissionGate\r\n            resourceType={ResourceType.PROJECT}\r\n            resourceId={project.id}\r\n            action={PermissionAction.UPDATE}\r\n            fallback={null}\r\n            showFallback={false}\r\n          >\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\r\n                  <MoreVertical className=\"h-4 w-4\" />\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align=\"end\">\r\n                {/* 프로젝트 수정 - UPDATE 권한 필요 */}\r\n                <ProjectPermissionGate\r\n                  projectId={project.id}\r\n                  action={PermissionAction.UPDATE}\r\n                >\r\n                  <DropdownMenuItem\r\n                    onClick={() => onEdit?.(project)}\r\n                    className=\"flex items-center gap-2\"\r\n                  >\r\n                    <Edit className=\"h-4 w-4\" />\r\n                    프로젝트 수정\r\n                  </DropdownMenuItem>\r\n                </ProjectPermissionGate>\r\n\r\n                {/* 분석 보기 - READ 권한 필요 */}\r\n                <ProjectPermissionGate\r\n                  projectId={project.id}\r\n                  action={PermissionAction.READ}\r\n                >\r\n                  <DropdownMenuItem\r\n                    onClick={() => onViewAnalytics?.(project.id)}\r\n                    className=\"flex items-center gap-2\"\r\n                  >\r\n                    <BarChart3 className=\"h-4 w-4\" />\r\n                    분석 보기\r\n                  </DropdownMenuItem>\r\n                </ProjectPermissionGate>\r\n\r\n                <DropdownMenuSeparator />\r\n\r\n                {/* 권한 관리 - MANAGE_PERMISSIONS 권한 필요 */}\r\n                <ProjectPermissionGate\r\n                  projectId={project.id}\r\n                  action={PermissionAction.MANAGE_PERMISSIONS}\r\n                >\r\n                  <DropdownMenuItem\r\n                    onClick={() => onManagePermissions?.(project.id)}\r\n                    className=\"flex items-center gap-2\"\r\n                  >\r\n                    <UserPlus className=\"h-4 w-4\" />\r\n                    권한 관리\r\n                  </DropdownMenuItem>\r\n                </ProjectPermissionGate>\r\n\r\n                {/* 프로젝트 삭제 - DELETE 권한 필요 */}\r\n                <ProjectPermissionGate\r\n                  projectId={project.id}\r\n                  action={PermissionAction.DELETE}\r\n                >\r\n                  <DropdownMenuSeparator />\r\n                  <DropdownMenuItem\r\n                    onClick={() => onDelete?.(project.id)}\r\n                    className=\"flex items-center gap-2 text-red-600\"\r\n                  >\r\n                    <Trash className=\"h-4 w-4\" />\r\n                    프로젝트 삭제\r\n                  </DropdownMenuItem>\r\n                </ProjectPermissionGate>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          </PermissionGate>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"pt-0\">\r\n        {/* 프로젝트 설명 */}\r\n        {project.description && (\r\n          <div className=\"mb-4\">\r\n            <p\r\n              className={cn(\r\n                'text-sm text-gray-600',\r\n                !showFullDescription && 'line-clamp-2'\r\n              )}\r\n            >\r\n              {project.description}\r\n            </p>\r\n            {project.description.length > 100 && (\r\n              <button\r\n                onClick={() => setShowFullDescription(!showFullDescription)}\r\n                className=\"text-xs text-blue-600 hover:text-blue-800 mt-1\"\r\n              >\r\n                {showFullDescription ? '접기' : '더 보기'}\r\n              </button>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* 진행률 표시 */}\r\n        <div className=\"mb-4\">\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <span className=\"text-sm font-medium\">진행도</span>\r\n            <span className=\"text-sm text-gray-600\">{progressPercentage}%</span>\r\n          </div>\r\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n            <div\r\n              className={cn(\r\n                'h-2 rounded-full transition-all',\r\n                progressPercentage < 30\r\n                  ? 'bg-red-500'\r\n                  : progressPercentage < 70\r\n                    ? 'bg-yellow-500'\r\n                    : 'bg-green-500'\r\n              )}\r\n              style={{ width: `${progressPercentage}%` }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* 작업 통계 */}\r\n        <div className=\"flex items-center gap-4 mb-4 text-sm text-gray-600\">\r\n          <div className=\"flex items-center gap-1\">\r\n            <CheckCircle className=\"h-4 w-4\" />\r\n            <span>\r\n              {project.completedTaskCount}/{project.taskCount}\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <Users className=\"h-4 w-4\" />\r\n            <span>{project.memberCount}명</span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 일정 정보 */}\r\n        <div className=\"space-y-2 text-sm\">\r\n          {project.startDate && (\r\n            <div className=\"flex items-center gap-2 text-gray-600\">\r\n              <Calendar className=\"h-4 w-4\" />\r\n              <span>\r\n                시작: {format(project.startDate, 'PPP')}\r\n              </span>\r\n            </div>\r\n          )}\r\n          {project.endDate && (\r\n            <div\r\n              className={cn(\r\n                'flex items-center gap-2',\r\n                isOverdue ? 'text-red-600' : 'text-gray-600'\r\n              )}\r\n            >\r\n              <Calendar className=\"h-4 w-4\" />\r\n              <span>\r\n                종료: {format(project.endDate, 'PPP')}\r\n              </span>\r\n              {isOverdue && <span className=\"text-xs\">(지연)</span>}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* 태그 */}\r\n        {project.tags && project.tags.length > 0 && (\r\n          <div className=\"flex flex-wrap gap-1 mt-3\">\r\n            {project.tags.slice(0, 3).map((tag, index) => (\r\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\r\n                {tag}\r\n              </Badge>\r\n            ))}\r\n            {project.tags.length > 3 && (\r\n              <Badge variant=\"outline\" className=\"text-xs\">\r\n                +{project.tags.length - 3}\r\n              </Badge>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* 권한 기반 액션 버튼 */}\r\n        <div className=\"flex gap-2 mt-4\">\r\n          {/* 프로젝트 보기 - READ 권한 필요 */}\r\n          <ProjectPermissionGate\r\n            projectId={project.id}\r\n            action={PermissionAction.READ}\r\n          >\r\n            <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\r\n              프로젝트 보기\r\n            </Button>\r\n          </ProjectPermissionGate>\r\n\r\n          {/* 빠른 편집 - UPDATE 권한 필요 */}\r\n          <ProjectPermissionGate\r\n            projectId={project.id}\r\n            action={PermissionAction.UPDATE}\r\n            fallback={\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                disabled\r\n                className=\"text-gray-400\"\r\n              >\r\n                편집 권한 없음\r\n              </Button>\r\n            }\r\n          >\r\n            <Button\r\n              variant=\"default\"\r\n              size=\"sm\"\r\n              onClick={() => onEdit?.(project)}\r\n            >\r\n              편집\r\n            </Button>\r\n          </ProjectPermissionGate>\r\n        </div>\r\n\r\n        {/* 권한이 없을 때 표시되는 메시지 */}\r\n        <PermissionGate\r\n          resourceType={ResourceType.PROJECT}\r\n          resourceId={project.id}\r\n          action={PermissionAction.READ}\r\n          inverse={true}\r\n          showFallback={true}\r\n          fallback={\r\n            <div className=\"mt-4 p-3 bg-gray-50 border border-gray-200 rounded-md\">\r\n              <div className=\"flex items-center gap-2 text-gray-600\">\r\n                <Circle className=\"h-4 w-4\" />\r\n                <span className=\"text-sm\">\r\n                  이 프로젝트에 대한 접근 권한이 제한되어 있습니다.\r\n                </span>\r\n              </div>\r\n            </div>\r\n          }\r\n        >\r\n          <div></div>\r\n        </PermissionGate>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\task\\TaskItem.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'MentionNotifications' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 30
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'MentionNotifications' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 32,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ko' is defined but never used.",
        "line": 32,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'onAddComment' is defined but never used.",
        "line": 69,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 15
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'onAddComment' is defined but never used.",
        "line": 69,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 15
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 485,
        "column": 21,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 485,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [16395, 16435], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 489,
        "column": 21,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 489,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [16549, 16582], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\r\nimport { CollaborativeWorkspace } from '../collaboration/CollaborativeWorkspace';\r\nimport { CommentSystem } from '../collaboration/CommentSystem';\r\nimport { MentionNotifications } from '../collaboration/MentionNotifications';\r\nimport { Card, CardContent } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '../ui/dropdown-menu';\r\nimport {\r\n  Calendar,\r\n  User,\r\n  MessageCircle,\r\n  Flag,\r\n  MoreVertical,\r\n  Edit,\r\n  Trash,\r\n  UserPlus,\r\n  CheckCircle,\r\n  Clock,\r\n  AlertTriangle,\r\n  Users,\r\n  Eye,\r\n} from 'lucide-react';\r\nimport { format } from 'date-fns';\r\nimport { ko } from 'date-fns/locale';\r\nimport { cn } from '../../lib/utils';\r\nimport {\r\n  Task,\r\n  TaskStatus,\r\n  TaskPriority,\r\n  PermissionAction,\r\n  ResourceType,\r\n  TaskRole,\r\n} from '../../types/team';\r\nimport {\r\n  TaskPermissionGate,\r\n  PermissionGate,\r\n  RoleGate,\r\n} from '../common/PermissionGate';\r\n\r\ninterface TaskItemProps {\r\n  task: Task;\r\n  showProject?: boolean;\r\n  onToggleComplete?: (taskId: string, completed: boolean) => void;\r\n  onEdit?: (task: Task) => void;\r\n  onDelete?: (taskId: string) => void;\r\n  onAssign?: (taskId: string) => void;\r\n  onManagePermissions?: (taskId: string) => void;\r\n  onAddComment?: (taskId: string) => void;\r\n  enableCollaboration?: boolean;\r\n  showDetailView?: boolean;\r\n}\r\n\r\nexport const TaskItem: React.FC<TaskItemProps> = ({\r\n  task,\r\n  showProject = false,\r\n  onToggleComplete,\r\n  onEdit,\r\n  onDelete,\r\n  onAssign,\r\n  onManagePermissions,\r\n  onAddComment,\r\n  enableCollaboration = false,\r\n  showDetailView = false,\r\n}) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [showCollaborativeView, setShowCollaborativeView] = useState(false);\r\n  const [showComments, setShowComments] = useState(false);\r\n\r\n  const getPriorityColor = (priority: TaskPriority) => {\r\n    switch (priority) {\r\n      case TaskPriority.URGENT:\r\n        return 'bg-red-100 text-red-800 border-red-200';\r\n      case TaskPriority.HIGH:\r\n        return 'bg-orange-100 text-orange-800 border-orange-200';\r\n      case TaskPriority.MEDIUM:\r\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case TaskPriority.LOW:\r\n        return 'bg-green-100 text-green-800 border-green-200';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: TaskStatus) => {\r\n    switch (status) {\r\n      case TaskStatus.TODO:\r\n        return 'bg-gray-100 text-gray-800';\r\n      case TaskStatus.IN_PROGRESS:\r\n        return 'bg-blue-100 text-blue-800';\r\n      case TaskStatus.IN_REVIEW:\r\n        return 'bg-purple-100 text-purple-800';\r\n      case TaskStatus.COMPLETED:\r\n        return 'bg-green-100 text-green-800';\r\n      case TaskStatus.CANCELLED:\r\n        return 'bg-red-100 text-red-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getPriorityLabel = (priority: TaskPriority) => {\r\n    switch (priority) {\r\n      case TaskPriority.URGENT:\r\n        return '긴급';\r\n      case TaskPriority.HIGH:\r\n        return '높음';\r\n      case TaskPriority.MEDIUM:\r\n        return '보통';\r\n      case TaskPriority.LOW:\r\n        return '낮음';\r\n      default:\r\n        return priority;\r\n    }\r\n  };\r\n\r\n  const getStatusLabel = (status: TaskStatus) => {\r\n    switch (status) {\r\n      case TaskStatus.TODO:\r\n        return '할 일';\r\n      case TaskStatus.IN_PROGRESS:\r\n        return '진행중';\r\n      case TaskStatus.IN_REVIEW:\r\n        return '검토중';\r\n      case TaskStatus.COMPLETED:\r\n        return '완료';\r\n      case TaskStatus.CANCELLED:\r\n        return '취소';\r\n      default:\r\n        return status;\r\n    }\r\n  };\r\n\r\n  const isCompleted = task.status === TaskStatus.COMPLETED;\r\n  const isOverdue = task.dueDate && task.dueDate < new Date() && !isCompleted;\r\n  const isDueSoon =\r\n    task.dueDate &&\r\n    task.dueDate > new Date() &&\r\n    task.dueDate <= new Date(Date.now() + 24 * 60 * 60 * 1000); // 24시간 내\r\n\r\n  return (\r\n    <Card\r\n      className={cn(\r\n        'transition-all hover:shadow-sm',\r\n        isCompleted && 'opacity-75',\r\n        isOverdue && 'border-red-200 bg-red-50/30'\r\n      )}\r\n    >\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-start gap-3\">\r\n          {/* 완료 체크박스 - COMPLETE 권한 또는 담당자만 가능 */}\r\n          <div className=\"flex-shrink-0 pt-1\">\r\n            <TaskPermissionGate\r\n              taskId={task.id}\r\n              action={PermissionAction.COMPLETE}\r\n              fallback={\r\n                <RoleGate\r\n                  resourceType={ResourceType.TASK}\r\n                  resourceId={task.id}\r\n                  allowedRoles={[TaskRole.ASSIGNEE]}\r\n                  fallback={\r\n                    <div className=\"w-5 h-5 border-2 border-gray-300 rounded bg-gray-100\" />\r\n                  }\r\n                >\r\n                  <Checkbox\r\n                    checked={isCompleted}\r\n                    onCheckedChange={checked =>\r\n                      onToggleComplete?.(task.id, Boolean(checked))\r\n                    }\r\n                    className=\"w-5 h-5\"\r\n                  />\r\n                </RoleGate>\r\n              }\r\n            >\r\n              <Checkbox\r\n                checked={isCompleted}\r\n                onCheckedChange={checked =>\r\n                  onToggleComplete?.(task.id, Boolean(checked))\r\n                }\r\n                className=\"w-5 h-5\"\r\n              />\r\n            </TaskPermissionGate>\r\n          </div>\r\n\r\n          {/* 작업 내용 */}\r\n          <div className=\"flex-1 min-w-0\">\r\n            {/* 제목과 액션 버튼 */}\r\n            <div className=\"flex items-start justify-between gap-2 mb-2\">\r\n              <h4\r\n                className={cn(\r\n                  'font-medium text-sm leading-5',\r\n                  isCompleted && 'line-through text-gray-500'\r\n                )}\r\n              >\r\n                {task.title}\r\n              </h4>\r\n\r\n              {/* 권한 기반 액션 메뉴 */}\r\n              <PermissionGate\r\n                resourceType={ResourceType.TASK}\r\n                resourceId={task.id}\r\n                action={PermissionAction.UPDATE}\r\n                fallback={null}\r\n                showFallback={false}\r\n              >\r\n                <DropdownMenu>\r\n                  <DropdownMenuTrigger asChild>\r\n                    <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\r\n                      <MoreVertical className=\"h-3 w-3\" />\r\n                    </Button>\r\n                  </DropdownMenuTrigger>\r\n                  <DropdownMenuContent align=\"end\">\r\n                    {/* 작업 수정 - UPDATE 권한 */}\r\n                    <TaskPermissionGate\r\n                      taskId={task.id}\r\n                      action={PermissionAction.UPDATE}\r\n                    >\r\n                      <DropdownMenuItem\r\n                        onClick={() => onEdit?.(task)}\r\n                        className=\"flex items-center gap-2\"\r\n                      >\r\n                        <Edit className=\"h-4 w-4\" />\r\n                        작업 수정\r\n                      </DropdownMenuItem>\r\n                    </TaskPermissionGate>\r\n\r\n                    {/* 담당자 지정 - ASSIGN 권한 */}\r\n                    <TaskPermissionGate\r\n                      taskId={task.id}\r\n                      action={PermissionAction.ASSIGN}\r\n                    >\r\n                      <DropdownMenuItem\r\n                        onClick={() => onAssign?.(task.id)}\r\n                        className=\"flex items-center gap-2\"\r\n                      >\r\n                        <UserPlus className=\"h-4 w-4\" />\r\n                        담당자 지정\r\n                      </DropdownMenuItem>\r\n                    </TaskPermissionGate>\r\n\r\n                    <DropdownMenuSeparator />\r\n\r\n                    {/* 권한 관리 - MANAGE_PERMISSIONS 권한 */}\r\n                    <TaskPermissionGate\r\n                      taskId={task.id}\r\n                      action={PermissionAction.MANAGE_PERMISSIONS}\r\n                    >\r\n                      <DropdownMenuItem\r\n                        onClick={() => onManagePermissions?.(task.id)}\r\n                        className=\"flex items-center gap-2\"\r\n                      >\r\n                        <User className=\"h-4 w-4\" />\r\n                        권한 관리\r\n                      </DropdownMenuItem>\r\n                    </TaskPermissionGate>\r\n\r\n                    {/* 작업 삭제 - DELETE 권한 */}\r\n                    <TaskPermissionGate\r\n                      taskId={task.id}\r\n                      action={PermissionAction.DELETE}\r\n                    >\r\n                      <DropdownMenuSeparator />\r\n                      <DropdownMenuItem\r\n                        onClick={() => onDelete?.(task.id)}\r\n                        className=\"flex items-center gap-2 text-red-600\"\r\n                      >\r\n                        <Trash className=\"h-4 w-4\" />\r\n                        작업 삭제\r\n                      </DropdownMenuItem>\r\n                    </TaskPermissionGate>\r\n                  </DropdownMenuContent>\r\n                </DropdownMenu>\r\n              </PermissionGate>\r\n            </div>\r\n\r\n            {/* 설명 */}\r\n            {task.description && (\r\n              <p\r\n                className={cn(\r\n                  'text-xs text-gray-600 mb-2',\r\n                  !isExpanded && 'line-clamp-2',\r\n                  isCompleted && 'line-through'\r\n                )}\r\n              >\r\n                {task.description}\r\n              </p>\r\n            )}\r\n\r\n            {/* 메타 정보 */}\r\n            <div className=\"flex items-center gap-2 flex-wrap mb-2\">\r\n              {/* 상태 */}\r\n              <Badge className={cn('text-xs', getStatusColor(task.status))}>\r\n                {getStatusLabel(task.status)}\r\n              </Badge>\r\n\r\n              {/* 우선순위 */}\r\n              <Badge className={cn('text-xs', getPriorityColor(task.priority))}>\r\n                <Flag className=\"h-3 w-3 mr-1\" />\r\n                {getPriorityLabel(task.priority)}\r\n              </Badge>\r\n\r\n              {/* 지연/마감임박 경고 */}\r\n              {isOverdue && (\r\n                <Badge variant=\"destructive\" className=\"text-xs\">\r\n                  <AlertTriangle className=\"h-3 w-3 mr-1\" />\r\n                  지연됨\r\n                </Badge>\r\n              )}\r\n              {isDueSoon && !isOverdue && (\r\n                <Badge\r\n                  variant=\"outline\"\r\n                  className=\"text-xs border-orange-200 text-orange-700\"\r\n                >\r\n                  <Clock className=\"h-3 w-3 mr-1\" />\r\n                  마감임박\r\n                </Badge>\r\n              )}\r\n            </div>\r\n\r\n            {/* 일정 및 담당자 정보 */}\r\n            <div className=\"flex items-center gap-4 text-xs text-gray-500\">\r\n              {/* 마감일 */}\r\n              {task.dueDate && (\r\n                <div\r\n                  className={cn(\r\n                    'flex items-center gap-1',\r\n                    isOverdue && 'text-red-600'\r\n                  )}\r\n                >\r\n                  <Calendar className=\"h-3 w-3\" />\r\n                  <span>{format(task.dueDate, 'MM/dd')}</span>\r\n                </div>\r\n              )}\r\n\r\n              {/* 담당자 */}\r\n              {task.assigneeId && (\r\n                <div className=\"flex items-center gap-1\">\r\n                  <User className=\"h-3 w-3\" />\r\n                  <span>담당자</span>\r\n                </div>\r\n              )}\r\n\r\n              {/* 댓글 수 */}\r\n              {task.commentCount && task.commentCount > 0 && (\r\n                <div className=\"flex items-center gap-1\">\r\n                  <MessageCircle className=\"h-3 w-3\" />\r\n                  <span>{task.commentCount}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* 프로젝트 정보 (옵션) */}\r\n            {showProject && task.projectId && (\r\n              <div className=\"mt-2\">\r\n                <Badge variant=\"outline\" className=\"text-xs\">\r\n                  프로젝트: {task.projectId}\r\n                </Badge>\r\n              </div>\r\n            )}\r\n\r\n            {/* 권한 기반 액션 버튼 */}\r\n            <div className=\"flex gap-2 mt-3\">\r\n              {/* 댓글 보기/추가 - COMMENT 권한 */}\r\n              <TaskPermissionGate\r\n                taskId={task.id}\r\n                action={PermissionAction.COMMENT}\r\n              >\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => setShowComments(!showComments)}\r\n                  className=\"text-xs\"\r\n                >\r\n                  <MessageCircle className=\"h-3 w-3 mr-1\" />\r\n                  댓글 {task.commentCount ? `(${task.commentCount})` : ''}\r\n                </Button>\r\n              </TaskPermissionGate>\r\n\r\n              {/* 협업 모드 - 활성화된 경우만 */}\r\n              {enableCollaboration && (\r\n                <TaskPermissionGate\r\n                  taskId={task.id}\r\n                  action={PermissionAction.UPDATE}\r\n                >\r\n                  <Button\r\n                    variant={showCollaborativeView ? 'default' : 'outline'}\r\n                    size=\"sm\"\r\n                    onClick={() =>\r\n                      setShowCollaborativeView(!showCollaborativeView)\r\n                    }\r\n                    className=\"text-xs\"\r\n                  >\r\n                    <Users className=\"h-3 w-3 mr-1\" />\r\n                    실시간 편집\r\n                  </Button>\r\n                </TaskPermissionGate>\r\n              )}\r\n\r\n              {/* 자세히 보기 */}\r\n              {showDetailView && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => setIsExpanded(!isExpanded)}\r\n                  className=\"text-xs\"\r\n                >\r\n                  <Eye className=\"h-3 w-3 mr-1\" />\r\n                  {isExpanded ? '간략히' : '자세히'}\r\n                </Button>\r\n              )}\r\n\r\n              {/* 상태 변경 - UPDATE 권한 또는 담당자 */}\r\n              <TaskPermissionGate\r\n                taskId={task.id}\r\n                action={PermissionAction.UPDATE}\r\n                fallback={\r\n                  <RoleGate\r\n                    resourceType={ResourceType.TASK}\r\n                    resourceId={task.id}\r\n                    allowedRoles={[TaskRole.ASSIGNEE]}\r\n                    fallback={null}\r\n                    showFallback={false}\r\n                  >\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      className=\"text-xs\"\r\n                      disabled={isCompleted}\r\n                    >\r\n                      <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                      상태 변경\r\n                    </Button>\r\n                  </RoleGate>\r\n                }\r\n              >\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  className=\"text-xs\"\r\n                  disabled={isCompleted}\r\n                >\r\n                  <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                  상태 변경\r\n                </Button>\r\n              </TaskPermissionGate>\r\n            </div>\r\n\r\n            {/* 권한이 없을 때 표시 */}\r\n            <PermissionGate\r\n              resourceType={ResourceType.TASK}\r\n              resourceId={task.id}\r\n              action={PermissionAction.READ}\r\n              inverse={true}\r\n              fallback={\r\n                <div className=\"mt-2 p-2 bg-gray-50 border border-gray-200 rounded text-xs text-gray-600\">\r\n                  이 작업에 대한 세부 정보를 볼 권한이 없습니다.\r\n                </div>\r\n              }\r\n            >\r\n              <div></div>\r\n            </PermissionGate>\r\n\r\n            {/* 실시간 협업 뷰 */}\r\n            {showCollaborativeView && enableCollaboration && (\r\n              <div className=\"mt-4 border-t pt-4\">\r\n                <CollaborativeWorkspace\r\n                  resourceType=\"TASK\"\r\n                  resourceId={task.id}\r\n                  title={`작업: ${task.title}`}\r\n                  data={{\r\n                    title: task.title,\r\n                    description: task.description || '',\r\n                    status: task.status,\r\n                    priority: task.priority,\r\n                  }}\r\n                  onDataChange={data => {\r\n                    // 작업 데이터 업데이트 로직\r\n                    console.log('Task data updated:', data);\r\n                  }}\r\n                  onSave={data => {\r\n                    // 작업 저장 로직\r\n                    console.log('Task saved:', data);\r\n                  }}\r\n                  className=\"collaborative-task-editor\"\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* 댓글 시스템 */}\r\n            {showComments && (\r\n              <div className=\"mt-4 border-t pt-4\">\r\n                <CommentSystem\r\n                  resourceType=\"TASK\"\r\n                  resourceId={task.id}\r\n                  className=\"task-comments\"\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\team\\TeamSidebar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\alert-dialog.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\badge.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\calendar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 54,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 30
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 54,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 55,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 31
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'props' is defined but never used.",
        "line": 55,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 55,
        "endColumn": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\r\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { DayPicker } from 'react-day-picker';\r\nimport { cn } from '../../lib/utils';\r\nimport { buttonVariants } from './button';\r\n\r\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\r\n\r\nfunction Calendar({\r\n  className,\r\n  classNames,\r\n  showOutsideDays = true,\r\n  ...props\r\n}: CalendarProps) {\r\n  return (\r\n    <DayPicker\r\n      showOutsideDays={showOutsideDays}\r\n      className={cn('p-3', className)}\r\n      classNames={{\r\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\r\n        month: 'space-y-4',\r\n        caption: 'flex justify-center pt-1 relative items-center',\r\n        caption_label: 'text-sm font-medium',\r\n        nav: 'space-x-1 flex items-center',\r\n        nav_button: cn(\r\n          buttonVariants({ variant: 'outline' }),\r\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\r\n        ),\r\n        nav_button_previous: 'absolute left-1',\r\n        nav_button_next: 'absolute right-1',\r\n        table: 'w-full border-collapse space-y-1',\r\n        head_row: 'flex',\r\n        head_cell:\r\n          'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\r\n        row: 'flex w-full mt-2',\r\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\r\n        day: cn(\r\n          buttonVariants({ variant: 'ghost' }),\r\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\r\n        ),\r\n        day_range_end: 'day-range-end',\r\n        day_selected:\r\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\r\n        day_today: 'bg-accent text-accent-foreground',\r\n        day_outside:\r\n          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\r\n        day_disabled: 'text-muted-foreground opacity-50',\r\n        day_range_middle:\r\n          'aria-selected:bg-accent aria-selected:text-accent-foreground',\r\n        day_hidden: 'invisible',\r\n        ...classNames,\r\n      }}\r\n      components={{\r\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\r\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\nCalendar.displayName = 'Calendar';\r\n\r\nexport { Calendar };\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\checkbox.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\dialog.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\dropdown-menu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\input.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\label.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\popover.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\select.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\separator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\table.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\components\\ui\\tabs.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\config\\firebase.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 24,
        "column": 3,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 24,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [861, 1217], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { initializeApp } from 'firebase/app';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { getFirestore } from 'firebase/firestore';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { getFunctions } from 'firebase/functions';\r\n\r\n// Firebase 설정\r\nconst firebaseConfig = {\r\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || 'your-api-key',\r\n  authDomain:\r\n    import.meta.env.VITE_FIREBASE_AUTH_DOMAIN ||\r\n    'almus-todo-app.firebaseapp.com',\r\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || 'almus-todo-app',\r\n  storageBucket:\r\n    import.meta.env.VITE_FIREBASE_STORAGE_BUCKET ||\r\n    'almus-todo-app.appspot.com',\r\n  messagingSenderId:\r\n    import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || '123456789',\r\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || 'your-app-id',\r\n};\r\n\r\n// 개발 모드에서만 Firebase 설정 확인\r\nif (import.meta.env.DEV) {\r\n  console.log('Firebase Config:', {\r\n    apiKey: firebaseConfig.apiKey?.substring(0, 10) + '...',\r\n    authDomain: firebaseConfig.authDomain,\r\n    projectId: firebaseConfig.projectId,\r\n    storageBucket: firebaseConfig.storageBucket,\r\n    messagingSenderId: firebaseConfig.messagingSenderId,\r\n    appId: firebaseConfig.appId?.substring(0, 15) + '...',\r\n  });\r\n}\r\n\r\n// Firebase 앱 초기화\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Firebase 서비스 초기화\r\nexport const storage = getStorage(app);\r\nexport const firestore = getFirestore(app);\r\nexport const db = getFirestore(app); // alias for firestore\r\nexport const auth = getAuth(app);\r\nexport const functions = getFunctions(app);\r\n\r\nexport default app;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\contexts\\NotificationContext.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\contexts\\ThemeContext.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useAuth.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 82,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 82,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "fix": { "range": [2962, 3093], "text": "" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 108,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 108,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3826, 3873], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 124,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 124,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4223, 4392], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 139,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 139,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4646, 4698], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 142,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 142,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4749, 4752], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4749, 4752], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 144,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 144,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4799, 4844], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 185,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 185,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5988, 6019], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 194,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 194,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6199, 6229], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 207,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 207,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6567, 6595], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 209,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 209,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6645, 6648], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6645, 6648], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 210,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 210,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6659, 6690], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 251,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 251,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7805, 7808], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7805, 7808], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 274,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 274,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [8493, 8533], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\r\nimport {\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n} from 'firebase/auth';\r\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\r\nimport { auth, firestore as db } from '../config/firebase';\r\n\r\nexport interface AuthUser {\r\n  id: string; // alias for uid\r\n  uid: string;\r\n  email: string | null;\r\n  name: string | null; // alias for displayName\r\n  displayName: string | null;\r\n  photoURL: string | null;\r\n  role: string;\r\n  currentTeamId?: string; // updated field name\r\n  teamId: string; // legacy field\r\n  projectIds: string[];\r\n  isActive: boolean;\r\n  lastLoginAt?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport const useAuth = () => {\r\n  const [user, setUser] = useState<AuthUser | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async firebaseUser => {\r\n      try {\r\n        if (firebaseUser) {\r\n          try {\r\n            // Firestore에서 사용자 정보 조회 시도\r\n            const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\r\n\r\n            if (userDoc.exists()) {\r\n              const userData = userDoc.data();\r\n              const now = new Date();\r\n              setUser({\r\n                id: firebaseUser.uid,\r\n                uid: firebaseUser.uid,\r\n                email: firebaseUser.email,\r\n                name: firebaseUser.displayName,\r\n                displayName: firebaseUser.displayName,\r\n                photoURL: firebaseUser.photoURL,\r\n                role: userData.role || 'VIEWER',\r\n                currentTeamId: userData.currentTeamId,\r\n                teamId: userData.teamId || 'default-team',\r\n                projectIds: userData.projectIds || [],\r\n                isActive: userData.isActive !== false,\r\n                lastLoginAt: userData.lastLoginAt?.toDate(),\r\n                createdAt: userData.createdAt?.toDate() || now,\r\n                updatedAt: userData.updatedAt?.toDate() || now,\r\n              });\r\n            } else {\r\n              // 사용자 문서가 없으면 기본 정보만 설정\r\n              const now = new Date();\r\n              setUser({\r\n                id: firebaseUser.uid,\r\n                uid: firebaseUser.uid,\r\n                email: firebaseUser.email,\r\n                name: firebaseUser.displayName,\r\n                displayName: firebaseUser.displayName,\r\n                photoURL: firebaseUser.photoURL,\r\n                role: 'ADMIN',\r\n                currentTeamId: 'default-team',\r\n                teamId: 'default-team',\r\n                projectIds: ['default-project'],\r\n                isActive: true,\r\n                lastLoginAt: now,\r\n                createdAt: now,\r\n                updatedAt: now,\r\n              });\r\n            }\r\n          } catch (firestoreError) {\r\n            // Firestore 연결 실패 시 기본 정보만 설정\r\n            console.warn(\r\n              'Firestore connection failed, using default user data:',\r\n              firestoreError\r\n            );\r\n            const now = new Date();\r\n            setUser({\r\n              id: firebaseUser.uid,\r\n              uid: firebaseUser.uid,\r\n              email: firebaseUser.email,\r\n              name: firebaseUser.displayName,\r\n              displayName: firebaseUser.displayName,\r\n              photoURL: firebaseUser.photoURL,\r\n              role: 'ADMIN',\r\n              currentTeamId: 'default-team',\r\n              teamId: 'default-team',\r\n              projectIds: ['default-project'],\r\n              isActive: true,\r\n              lastLoginAt: now,\r\n              createdAt: now,\r\n              updatedAt: now,\r\n            });\r\n          }\r\n        } else {\r\n          setUser(null);\r\n        }\r\n      } catch (err) {\r\n        console.error('Auth state change error:', err);\r\n        setError(\r\n          err instanceof Error ? err.message : '인증 오류가 발생했습니다.'\r\n        );\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      if (import.meta.env.DEV) {\r\n        console.log('🔐 로그인 시도:', {\r\n          email,\r\n          authInstance: !!auth,\r\n          authConfig: auth.config,\r\n          currentUser: auth.currentUser,\r\n        });\r\n      }\r\n\r\n      // Firebase Auth 인스턴스 확인\r\n      if (!auth) {\r\n        throw new Error('Firebase Auth가 초기화되지 않았습니다.');\r\n      }\r\n\r\n      const result = await signInWithEmailAndPassword(auth, email, password);\r\n      if (import.meta.env.DEV) {\r\n        console.log('Sign in successful:', result.user.uid);\r\n      }\r\n      return result;\r\n    } catch (err: any) {\r\n      if (import.meta.env.DEV) {\r\n        console.error('Sign in error details:', err);\r\n      }\r\n\r\n      // Firebase 오류 메시지를 한국어로 변환\r\n      let errorMessage = '로그인에 실패했습니다.';\r\n\r\n      switch (err.code) {\r\n        case 'auth/user-not-found':\r\n          errorMessage = '등록되지 않은 이메일입니다.';\r\n          break;\r\n        case 'auth/wrong-password':\r\n          errorMessage = '잘못된 비밀번호입니다.';\r\n          break;\r\n        case 'auth/invalid-email':\r\n          errorMessage = '올바른 이메일 형식이 아닙니다.';\r\n          break;\r\n        case 'auth/too-many-requests':\r\n          errorMessage =\r\n            '너무 많은 로그인 시도가 있었습니다. 잠시 후 다시 시도해주세요.';\r\n          break;\r\n        case 'auth/network-request-failed':\r\n          errorMessage = '네트워크 연결을 확인해주세요.';\r\n          break;\r\n        case 'auth/invalid-credential':\r\n          errorMessage = '이메일 또는 비밀번호가 올바르지 않습니다.';\r\n          break;\r\n        case 'auth/user-disabled':\r\n          errorMessage = '비활성화된 계정입니다.';\r\n          break;\r\n        default:\r\n          errorMessage = err.message || '로그인에 실패했습니다.';\r\n      }\r\n\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const signUp = async (email: string, password: string) => {\r\n    try {\r\n      setError(null);\r\n      console.log('회원가입 시도:', email);\r\n\r\n      const userCredential = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      );\r\n      const user = userCredential.user;\r\n\r\n      console.log('회원가입 성공:', user);\r\n\r\n      // Firestore에 사용자 정보 저장\r\n      await setDoc(doc(db, 'users', user.uid), {\r\n        uid: user.uid,\r\n        email: user.email,\r\n        displayName: user.displayName || '사용자',\r\n        teamId: 'default-team', // 기본 팀 ID\r\n        role: 'member',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      });\r\n\r\n      console.log('사용자 문서 생성 완료');\r\n      return userCredential;\r\n    } catch (err: any) {\r\n      console.error('회원가입 실패:', err);\r\n\r\n      let errorMessage = '회원가입에 실패했습니다.';\r\n\r\n      switch (err.code) {\r\n        case 'auth/email-already-in-use':\r\n          errorMessage = '이미 사용 중인 이메일입니다.';\r\n          break;\r\n        case 'auth/weak-password':\r\n          errorMessage = '비밀번호가 너무 약합니다. 6자 이상 입력해주세요.';\r\n          break;\r\n        case 'auth/invalid-email':\r\n          errorMessage = '올바른 이메일 형식이 아닙니다.';\r\n          break;\r\n        default:\r\n          errorMessage = err.message || '회원가입에 실패했습니다.';\r\n      }\r\n\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      setError(null);\r\n      await signOut(auth);\r\n    } catch (err) {\r\n      const errorMessage =\r\n        err instanceof Error ? err.message : '로그아웃에 실패했습니다.';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const updateUser = async (updates: Partial<AuthUser>): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      // Firestore 사용자 문서 업데이트\r\n      const userRef = doc(db, 'users', user.uid);\r\n      const firestoreUpdates: any = {\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      // 업데이트할 필드들을 변환\r\n      if (updates.currentTeamId !== undefined) {\r\n        firestoreUpdates.currentTeamId = updates.currentTeamId;\r\n      }\r\n      if (updates.name !== undefined) {\r\n        firestoreUpdates.name = updates.name;\r\n      }\r\n      if (updates.role !== undefined) {\r\n        firestoreUpdates.role = updates.role;\r\n      }\r\n      if (updates.isActive !== undefined) {\r\n        firestoreUpdates.isActive = updates.isActive;\r\n      }\r\n\r\n      await setDoc(userRef, firestoreUpdates, { merge: true });\r\n\r\n      // 로컬 상태 업데이트\r\n      setUser(prev => (prev ? { ...prev, ...updates } : null));\r\n    } catch (error) {\r\n      console.error('사용자 정보 업데이트 실패:', error);\r\n      throw new Error('사용자 정보 업데이트에 실패했습니다.');\r\n    }\r\n  };\r\n\r\n  const isAuthenticated = !!user;\r\n  const isAdmin = user?.role === 'ADMIN';\r\n  const isEditor = user?.role === 'EDITOR' || user?.role === 'ADMIN';\r\n  const isViewer =\r\n    user?.role === 'VIEWER' ||\r\n    user?.role === 'EDITOR' ||\r\n    user?.role === 'ADMIN';\r\n\r\n  return {\r\n    user,\r\n    loading,\r\n    error,\r\n    signIn,\r\n    signUp,\r\n    logout,\r\n    updateUser,\r\n    isAuthenticated,\r\n    isAdmin,\r\n    isEditor,\r\n    isViewer,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useCollaborativeSession.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'fieldPath' is assigned a value but never used.",
        "line": 154,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 154,
        "endColumn": 32
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'fieldPath' is assigned a value but never used.",
        "line": 154,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 154,
        "endColumn": 32
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 253,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 253,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7161, 7219], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 255,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 255,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [7248, 7308], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 282,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 282,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [7949, 7991], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 284,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 284,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [8020, 8081], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useWebSocket } from '../services/websocket';\r\nimport { useAuth } from './useAuth';\r\nimport type {\r\n  WebSocketMessage,\r\n  UserPresence,\r\n  EditOperation,\r\n} from '../services/websocket';\r\n\r\ninterface CollaborativeSessionState {\r\n  sessionId: string | null;\r\n  participants: UserPresence[];\r\n  isActive: boolean;\r\n  lastActivity: Date | null;\r\n}\r\n\r\ninterface UseCollaborativeSessionOptions {\r\n  resourceType: 'TASK' | 'PROJECT' | 'DOCUMENT';\r\n  resourceId: string;\r\n  autoJoin?: boolean;\r\n  onParticipantJoined?: (participant: UserPresence) => void;\r\n  onParticipantLeft?: (userId: string) => void;\r\n  onEditOperation?: (operation: EditOperation) => void;\r\n  onConflictDetected?: (operations: EditOperation[]) => void;\r\n}\r\n\r\nexport const useCollaborativeSession = ({\r\n  resourceType,\r\n  resourceId,\r\n  autoJoin = true,\r\n  onParticipantJoined,\r\n  onParticipantLeft,\r\n  onEditOperation,\r\n  onConflictDetected,\r\n}: UseCollaborativeSessionOptions) => {\r\n  const { user } = useAuth();\r\n  const websocket = useWebSocket();\r\n\r\n  const [sessionState, setSessionState] = useState<CollaborativeSessionState>({\r\n    sessionId: null,\r\n    participants: [],\r\n    isActive: false,\r\n    lastActivity: null,\r\n  });\r\n\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // 편집 작업 큐 (충돌 해결을 위해)\r\n  const pendingOperations = useRef<EditOperation[]>([]);\r\n  const appliedOperations = useRef<Set<string>>(new Set());\r\n\r\n  // WebSocket 이벤트 핸들러들\r\n  const handleUserJoined = useCallback(\r\n    (message: WebSocketMessage) => {\r\n      if (message.resourceId !== resourceId) return;\r\n\r\n      const participant = message.data as UserPresence;\r\n\r\n      setSessionState(prev => ({\r\n        ...prev,\r\n        participants: prev.participants.some(\r\n          p => p.userId === participant.userId\r\n        )\r\n          ? prev.participants.map(p =>\r\n              p.userId === participant.userId ? participant : p\r\n            )\r\n          : [...prev.participants, participant],\r\n        lastActivity: new Date(),\r\n      }));\r\n\r\n      onParticipantJoined?.(participant);\r\n    },\r\n    [resourceId, onParticipantJoined]\r\n  );\r\n\r\n  const handleUserLeft = useCallback(\r\n    (message: WebSocketMessage) => {\r\n      if (message.resourceId !== resourceId) return;\r\n\r\n      const userId = message.data.userId as string;\r\n\r\n      setSessionState(prev => ({\r\n        ...prev,\r\n        participants: prev.participants.filter(p => p.userId !== userId),\r\n        lastActivity: new Date(),\r\n      }));\r\n\r\n      onParticipantLeft?.(userId);\r\n    },\r\n    [resourceId, onParticipantLeft]\r\n  );\r\n\r\n  const handleEditOperation = useCallback(\r\n    (message: WebSocketMessage) => {\r\n      if (message.resourceId !== resourceId) return;\r\n\r\n      const operation = message.data.operation as EditOperation;\r\n\r\n      // 중복 적용 방지\r\n      if (appliedOperations.current.has(operation.id)) {\r\n        return;\r\n      }\r\n\r\n      // 자신의 작업인 경우 스킵 (이미 로컬에 적용됨)\r\n      if (operation.userId === user?.id) {\r\n        appliedOperations.current.add(operation.id);\r\n        return;\r\n      }\r\n\r\n      // 충돌 감지\r\n      const conflicts = detectConflicts(operation, pendingOperations.current);\r\n      if (conflicts.length > 0) {\r\n        onConflictDetected?.([operation, ...conflicts]);\r\n        return;\r\n      }\r\n\r\n      // 작업 적용\r\n      pendingOperations.current.push(operation);\r\n      appliedOperations.current.add(operation.id);\r\n      onEditOperation?.(operation);\r\n\r\n      setSessionState(prev => ({\r\n        ...prev,\r\n        lastActivity: new Date(),\r\n      }));\r\n    },\r\n    [resourceId, user?.id, onEditOperation, onConflictDetected]\r\n  );\r\n\r\n  const handlePresenceUpdated = useCallback(\r\n    (message: WebSocketMessage) => {\r\n      if (message.resourceId !== resourceId) return;\r\n\r\n      const { userId, ...presenceData } = message.data;\r\n\r\n      setSessionState(prev => ({\r\n        ...prev,\r\n        participants: prev.participants.map(p =>\r\n          p.userId === userId\r\n            ? { ...p, ...presenceData, lastActivity: Date.now() }\r\n            : p\r\n        ),\r\n        lastActivity: new Date(),\r\n      }));\r\n    },\r\n    [resourceId]\r\n  );\r\n\r\n  const handleUserTyping = useCallback(\r\n    (message: WebSocketMessage) => {\r\n      if (message.resourceId !== resourceId) return;\r\n\r\n      const { userId, fieldPath } = message.data;\r\n\r\n      setSessionState(prev => ({\r\n        ...prev,\r\n        participants: prev.participants.map(p =>\r\n          p.userId === userId\r\n            ? { ...p, isTyping: true, lastActivity: Date.now() }\r\n            : p\r\n        ),\r\n      }));\r\n\r\n      // 3초 후 타이핑 상태 해제\r\n      setTimeout(() => {\r\n        setSessionState(prev => ({\r\n          ...prev,\r\n          participants: prev.participants.map(p =>\r\n            p.userId === userId ? { ...p, isTyping: false } : p\r\n          ),\r\n        }));\r\n      }, 3000);\r\n    },\r\n    [resourceId]\r\n  );\r\n\r\n  const handleUserStoppedTyping = useCallback(\r\n    (message: WebSocketMessage) => {\r\n      if (message.resourceId !== resourceId) return;\r\n\r\n      const { userId } = message.data;\r\n\r\n      setSessionState(prev => ({\r\n        ...prev,\r\n        participants: prev.participants.map(p =>\r\n          p.userId === userId ? { ...p, isTyping: false } : p\r\n        ),\r\n      }));\r\n    },\r\n    [resourceId]\r\n  );\r\n\r\n  // 충돌 감지 로직\r\n  const detectConflicts = (\r\n    newOperation: EditOperation,\r\n    existingOperations: EditOperation[]\r\n  ): EditOperation[] => {\r\n    const conflicts: EditOperation[] = [];\r\n\r\n    for (const existing of existingOperations) {\r\n      // 같은 위치에서 작업하는 경우\r\n      if (\r\n        existing.position.line === newOperation.position.line &&\r\n        existing.position.column === newOperation.position.column &&\r\n        existing.position.fieldPath === newOperation.position.fieldPath\r\n      ) {\r\n        // 시간 차이가 1초 이내인 경우 충돌로 간주\r\n        if (Math.abs(existing.timestamp - newOperation.timestamp) < 1000) {\r\n          conflicts.push(existing);\r\n        }\r\n      }\r\n\r\n      // 겹치는 영역에서 작업하는 경우 (DELETE와 INSERT 등)\r\n      if (existing.position.fieldPath === newOperation.position.fieldPath) {\r\n        const existingEnd = existing.position.column + (existing.length || 0);\r\n        const newEnd =\r\n          newOperation.position.column + (newOperation.length || 0);\r\n\r\n        if (\r\n          (existing.position.column <= newOperation.position.column &&\r\n            existingEnd > newOperation.position.column) ||\r\n          (newOperation.position.column <= existing.position.column &&\r\n            newEnd > existing.position.column)\r\n        ) {\r\n          conflicts.push(existing);\r\n        }\r\n      }\r\n    }\r\n\r\n    return conflicts;\r\n  };\r\n\r\n  // 세션 참여\r\n  const joinSession = useCallback(async () => {\r\n    if (!websocket.isConnected() || sessionState.isActive) {\r\n      return;\r\n    }\r\n\r\n    setIsConnecting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const sessionId = await websocket.joinSession(resourceType, resourceId);\r\n\r\n      setSessionState(prev => ({\r\n        ...prev,\r\n        sessionId,\r\n        isActive: true,\r\n        lastActivity: new Date(),\r\n      }));\r\n\r\n      console.log(`Joined collaborative session: ${sessionId}`);\r\n    } catch (err) {\r\n      console.error('Failed to join collaborative session:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to join session');\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  }, [websocket, resourceType, resourceId, sessionState.isActive]);\r\n\r\n  // 세션 나가기\r\n  const leaveSession = useCallback(async () => {\r\n    if (!sessionState.isActive) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await websocket.leaveSession();\r\n\r\n      setSessionState({\r\n        sessionId: null,\r\n        participants: [],\r\n        isActive: false,\r\n        lastActivity: null,\r\n      });\r\n\r\n      // 대기 중인 작업들 초기화\r\n      pendingOperations.current = [];\r\n      appliedOperations.current.clear();\r\n\r\n      console.log('Left collaborative session');\r\n    } catch (err) {\r\n      console.error('Failed to leave collaborative session:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to leave session');\r\n    }\r\n  }, [websocket, sessionState.isActive]);\r\n\r\n  // 편집 작업 전송\r\n  const sendEditOperation = useCallback(\r\n    (operation: Omit<EditOperation, 'id' | 'userId' | 'timestamp'>) => {\r\n      if (!sessionState.isActive || !user) {\r\n        return;\r\n      }\r\n\r\n      const fullOperation: EditOperation = {\r\n        ...operation,\r\n        id: `${user.id}_${Date.now()}_${Math.random()}`,\r\n        userId: user.id,\r\n        timestamp: Date.now(),\r\n      };\r\n\r\n      // 로컬에 즉시 적용 (낙관적 업데이트)\r\n      appliedOperations.current.add(fullOperation.id);\r\n      onEditOperation?.(fullOperation);\r\n\r\n      // 서버로 전송\r\n      websocket.sendEditOperation(fullOperation);\r\n    },\r\n    [sessionState.isActive, user, websocket, onEditOperation]\r\n  );\r\n\r\n  // 커서 위치 업데이트\r\n  const updateCursor = useCallback(\r\n    (position: { line: number; column: number; fieldPath?: string }) => {\r\n      if (!sessionState.isActive) return;\r\n      websocket.updateCursor(position);\r\n    },\r\n    [sessionState.isActive, websocket]\r\n  );\r\n\r\n  // 선택 영역 업데이트\r\n  const updateSelection = useCallback(\r\n    (selection: {\r\n      start: { line: number; column: number; fieldPath?: string };\r\n      end: { line: number; column: number; fieldPath?: string };\r\n    }) => {\r\n      if (!sessionState.isActive) return;\r\n      websocket.updateSelection(selection);\r\n    },\r\n    [sessionState.isActive, websocket]\r\n  );\r\n\r\n  // 타이핑 상태 설정\r\n  const setTyping = useCallback(\r\n    (isTyping: boolean, fieldPath?: string) => {\r\n      if (!sessionState.isActive) return;\r\n      websocket.setTyping(isTyping, fieldPath);\r\n    },\r\n    [sessionState.isActive, websocket]\r\n  );\r\n\r\n  // WebSocket 이벤트 리스너 등록\r\n  useEffect(() => {\r\n    websocket.on('user-joined', handleUserJoined);\r\n    websocket.on('user-left', handleUserLeft);\r\n    websocket.on('edit-operation', handleEditOperation);\r\n    websocket.on('presence-updated', handlePresenceUpdated);\r\n    websocket.on('user-typing', handleUserTyping);\r\n    websocket.on('user-stopped-typing', handleUserStoppedTyping);\r\n\r\n    return () => {\r\n      websocket.off('user-joined', handleUserJoined);\r\n      websocket.off('user-left', handleUserLeft);\r\n      websocket.off('edit-operation', handleEditOperation);\r\n      websocket.off('presence-updated', handlePresenceUpdated);\r\n      websocket.off('user-typing', handleUserTyping);\r\n      websocket.off('user-stopped-typing', handleUserStoppedTyping);\r\n    };\r\n  }, [\r\n    websocket,\r\n    handleUserJoined,\r\n    handleUserLeft,\r\n    handleEditOperation,\r\n    handlePresenceUpdated,\r\n    handleUserTyping,\r\n    handleUserStoppedTyping,\r\n  ]);\r\n\r\n  // 자동 참여\r\n  useEffect(() => {\r\n    if (\r\n      autoJoin &&\r\n      websocket.isConnected() &&\r\n      !sessionState.isActive &&\r\n      !isConnecting\r\n    ) {\r\n      joinSession();\r\n    }\r\n  }, [autoJoin, websocket, sessionState.isActive, isConnecting, joinSession]);\r\n\r\n  // 컴포넌트 언마운트 시 세션 나가기\r\n  useEffect(() => {\r\n    return () => {\r\n      if (sessionState.isActive) {\r\n        leaveSession();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // 현재 사용자 정보를 포함한 참가자 목록\r\n  const allParticipants = sessionState.participants.filter(\r\n    p => p.userId !== user?.id\r\n  );\r\n  const currentUserPresence = sessionState.participants.find(\r\n    p => p.userId === user?.id\r\n  );\r\n\r\n  return {\r\n    // 상태\r\n    sessionId: sessionState.sessionId,\r\n    participants: allParticipants,\r\n    currentUserPresence,\r\n    isActive: sessionState.isActive,\r\n    isConnecting,\r\n    error,\r\n    lastActivity: sessionState.lastActivity,\r\n\r\n    // 액션\r\n    joinSession,\r\n    leaveSession,\r\n    sendEditOperation,\r\n    updateCursor,\r\n    updateSelection,\r\n    setTyping,\r\n\r\n    // 유틸리티\r\n    getParticipantById: (userId: string) =>\r\n      sessionState.participants.find(p => p.userId === userId),\r\n    getTypingParticipants: () =>\r\n      sessionState.participants.filter(\r\n        p => p.isTyping && p.userId !== user?.id\r\n      ),\r\n    isParticipantOnline: (userId: string) => {\r\n      const participant = sessionState.participants.find(\r\n        p => p.userId === userId\r\n      );\r\n      return participant?.status === 'ONLINE';\r\n    },\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useComments.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1934, 1937], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1934, 1937], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 162,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 162,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4551, 4599], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 178,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 178,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5073, 5121], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 191,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 191,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5387, 5390], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5387, 5390], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 211,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 211,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5940, 5989], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 261,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 261,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7321, 7324], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7321, 7324], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 262,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 262,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7369, 7372], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7369, 7372], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 283,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 283,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [7930, 7976], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 311,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 311,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [8758, 8806], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 339,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 339,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [9506, 9554], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 382,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 382,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10794, 10797], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10794, 10797], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 392,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 392,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [11005, 11052], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 427,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 427,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [11990, 12039], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 454,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 454,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [12779, 12841], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from './useAuth';\r\nimport { useWebSocket } from '../services/websocket';\r\nimport type { FirestoreComment, CommentType } from '@almus/shared-types';\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  onSnapshot,\r\n  doc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  getDocs,\r\n  getDoc,\r\n} from 'firebase/firestore';\r\nimport { db } from '../lib/firebase';\r\n\r\ninterface Comment\r\n  extends Omit<\r\n    FirestoreComment,\r\n    'createdAt' | 'updatedAt' | 'editedAt' | 'deletedAt'\r\n  > {\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  editedAt?: Date;\r\n  deletedAt?: Date;\r\n  author?: {\r\n    id: string;\r\n    name: string;\r\n    avatar?: string;\r\n    email: string;\r\n  };\r\n  replies?: Comment[];\r\n}\r\n\r\ninterface UseCommentsOptions {\r\n  resourceType: CommentType;\r\n  resourceId: string;\r\n  enableRealtime?: boolean;\r\n}\r\n\r\ninterface UseCommentsReturn {\r\n  comments: Comment[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  addComment: (\r\n    content: string,\r\n    mentions?: string[],\r\n    parentCommentId?: string\r\n  ) => Promise<void>;\r\n  updateComment: (commentId: string, content: string) => Promise<void>;\r\n  deleteComment: (commentId: string) => Promise<void>;\r\n  addReaction: (commentId: string, emoji: string) => Promise<void>;\r\n  removeReaction: (commentId: string, emoji: string) => Promise<void>;\r\n  refreshComments: () => Promise<void>;\r\n}\r\n\r\nexport const useComments = ({\r\n  resourceType,\r\n  resourceId,\r\n  enableRealtime = true,\r\n}: UseCommentsOptions): UseCommentsReturn => {\r\n  const { user } = useAuth();\r\n  const websocket = useWebSocket();\r\n\r\n  const [comments, setComments] = useState<Comment[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Firestore 댓글을 Comment 타입으로 변환\r\n  const transformFirestoreComment = useCallback((doc: any): Comment => {\r\n    const data = doc.data();\r\n    return {\r\n      id: doc.id,\r\n      ...data,\r\n      createdAt:\r\n        data.createdAt instanceof Timestamp\r\n          ? data.createdAt.toDate()\r\n          : new Date(data.createdAt),\r\n      updatedAt:\r\n        data.updatedAt instanceof Timestamp\r\n          ? data.updatedAt.toDate()\r\n          : new Date(data.updatedAt),\r\n      editedAt:\r\n        data.editedAt instanceof Timestamp ? data.editedAt.toDate() : undefined,\r\n      deletedAt:\r\n        data.deletedAt instanceof Timestamp\r\n          ? data.deletedAt.toDate()\r\n          : undefined,\r\n      replies: [],\r\n    };\r\n  }, []);\r\n\r\n  // 댓글을 트리 구조로 구성\r\n  const buildCommentTree = useCallback((flatComments: Comment[]): Comment[] => {\r\n    const commentMap = new Map<string, Comment>();\r\n    const rootComments: Comment[] = [];\r\n\r\n    // 모든 댓글을 맵에 저장\r\n    flatComments.forEach(comment => {\r\n      commentMap.set(comment.id, { ...comment, replies: [] });\r\n    });\r\n\r\n    // 부모-자식 관계 구성\r\n    flatComments.forEach(comment => {\r\n      const commentWithReplies = commentMap.get(comment.id)!;\r\n\r\n      if (comment.parentCommentId) {\r\n        const parent = commentMap.get(comment.parentCommentId);\r\n        if (parent) {\r\n          parent.replies!.push(commentWithReplies);\r\n        }\r\n      } else {\r\n        rootComments.push(commentWithReplies);\r\n      }\r\n    });\r\n\r\n    // 각 레벨에서 생성 시간순으로 정렬\r\n    const sortComments = (comments: Comment[]): Comment[] => {\r\n      return comments\r\n        .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime())\r\n        .map(comment => ({\r\n          ...comment,\r\n          replies: comment.replies ? sortComments(comment.replies) : [],\r\n        }));\r\n    };\r\n\r\n    return sortComments(rootComments);\r\n  }, []);\r\n\r\n  // Firestore에서 댓글 로드\r\n  const loadComments = useCallback(async () => {\r\n    if (!resourceType || !resourceId) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const commentsQuery = query(\r\n        collection(db, 'comments'),\r\n        where('resourceType', '==', resourceType),\r\n        where('resourceId', '==', resourceId),\r\n        where('isDeleted', '==', false),\r\n        orderBy('createdAt', 'asc')\r\n      );\r\n\r\n      if (enableRealtime) {\r\n        // 실시간 리스너 설정\r\n        const unsubscribe = onSnapshot(\r\n          commentsQuery,\r\n          snapshot => {\r\n            const flatComments = snapshot.docs.map(transformFirestoreComment);\r\n            const treeComments = buildCommentTree(flatComments);\r\n            setComments(treeComments);\r\n            setIsLoading(false);\r\n          },\r\n          error => {\r\n            console.error('Error loading comments:', error);\r\n            setError('댓글을 불러오는 중 오류가 발생했습니다.');\r\n            setIsLoading(false);\r\n          }\r\n        );\r\n\r\n        return unsubscribe;\r\n      } else {\r\n        // 일회성 로드\r\n        const snapshot = await getDocs(commentsQuery);\r\n        const flatComments = snapshot.docs.map(transformFirestoreComment);\r\n        const treeComments = buildCommentTree(flatComments);\r\n        setComments(treeComments);\r\n        setIsLoading(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading comments:', error);\r\n      setError('댓글을 불러오는 중 오류가 발생했습니다.');\r\n      setIsLoading(false);\r\n    }\r\n  }, [\r\n    resourceType,\r\n    resourceId,\r\n    enableRealtime,\r\n    transformFirestoreComment,\r\n    buildCommentTree,\r\n  ]);\r\n\r\n  // 사용자 정보 로드 (캐시)\r\n  const userCache = new Map<string, any>();\r\n\r\n  const loadUserInfo = useCallback(async (userId: string) => {\r\n    if (userCache.has(userId)) {\r\n      return userCache.get(userId);\r\n    }\r\n\r\n    try {\r\n      const userDoc = await getDoc(doc(db, 'users', userId));\r\n      if (userDoc.exists()) {\r\n        const userData = {\r\n          id: userDoc.id,\r\n          name: userDoc.data().name,\r\n          email: userDoc.data().email,\r\n          avatar: userDoc.data().avatar,\r\n        };\r\n        userCache.set(userId, userData);\r\n        return userData;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading user info:', error);\r\n    }\r\n\r\n    return null;\r\n  }, []);\r\n\r\n  // 댓글에 작성자 정보 추가\r\n  const enrichCommentsWithUserInfo = useCallback(\r\n    async (comments: Comment[]): Promise<Comment[]> => {\r\n      const enrichComment = async (comment: Comment): Promise<Comment> => {\r\n        const authorInfo = await loadUserInfo(comment.authorId);\r\n        const enrichedReplies = comment.replies\r\n          ? await Promise.all(comment.replies.map(enrichComment))\r\n          : [];\r\n\r\n        return {\r\n          ...comment,\r\n          author: authorInfo,\r\n          replies: enrichedReplies,\r\n        };\r\n      };\r\n\r\n      return Promise.all(comments.map(enrichComment));\r\n    },\r\n    [loadUserInfo]\r\n  );\r\n\r\n  // 댓글 추가\r\n  const addComment = useCallback(\r\n    async (\r\n      content: string,\r\n      mentions: string[] = [],\r\n      parentCommentId?: string\r\n    ) => {\r\n      if (!user || !content.trim()) {\r\n        throw new Error('사용자 인증이 필요하거나 댓글 내용이 비어있습니다.');\r\n      }\r\n\r\n      try {\r\n        const commentData: Omit<FirestoreComment, 'id'> = {\r\n          resourceType,\r\n          resourceId,\r\n          parentCommentId,\r\n          authorId: user.id,\r\n          content: content.trim(),\r\n          mentions,\r\n          isEdited: false,\r\n          isDeleted: false,\r\n          reactions: [],\r\n          attachments: [],\r\n          createdAt: serverTimestamp() as any,\r\n          updatedAt: serverTimestamp() as any,\r\n        };\r\n\r\n        const docRef = await addDoc(collection(db, 'comments'), commentData);\r\n\r\n        // 실시간 알림을 위해 WebSocket으로도 전송\r\n        if (websocket.isConnected()) {\r\n          websocket.sendComment({\r\n            resourceType,\r\n            resourceId,\r\n            content: content.trim(),\r\n            mentions,\r\n            parentCommentId,\r\n          });\r\n        }\r\n\r\n        // 멘션된 사용자들에게 알림 생성\r\n        if (mentions.length > 0) {\r\n          await createMentionNotifications(docRef.id, mentions);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error adding comment:', error);\r\n        throw new Error('댓글 추가 중 오류가 발생했습니다.');\r\n      }\r\n    },\r\n    [user, resourceType, resourceId, websocket]\r\n  );\r\n\r\n  // 댓글 수정\r\n  const updateComment = useCallback(\r\n    async (commentId: string, content: string) => {\r\n      if (!user || !content.trim()) {\r\n        throw new Error('사용자 인증이 필요하거나 댓글 내용이 비어있습니다.');\r\n      }\r\n\r\n      try {\r\n        const commentRef = doc(db, 'comments', commentId);\r\n        await updateDoc(commentRef, {\r\n          content: content.trim(),\r\n          isEdited: true,\r\n          editedAt: serverTimestamp(),\r\n          updatedAt: serverTimestamp(),\r\n        });\r\n\r\n        // WebSocket으로도 전송\r\n        if (websocket.isConnected()) {\r\n          websocket.updateComment(commentId, content.trim());\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating comment:', error);\r\n        throw new Error('댓글 수정 중 오류가 발생했습니다.');\r\n      }\r\n    },\r\n    [user, websocket]\r\n  );\r\n\r\n  // 댓글 삭제 (소프트 삭제)\r\n  const deleteComment = useCallback(\r\n    async (commentId: string) => {\r\n      if (!user) {\r\n        throw new Error('사용자 인증이 필요합니다.');\r\n      }\r\n\r\n      try {\r\n        const commentRef = doc(db, 'comments', commentId);\r\n        await updateDoc(commentRef, {\r\n          isDeleted: true,\r\n          deletedAt: serverTimestamp(),\r\n          updatedAt: serverTimestamp(),\r\n          content: '[삭제된 댓글입니다]',\r\n        });\r\n\r\n        // WebSocket으로도 전송\r\n        if (websocket.isConnected()) {\r\n          websocket.deleteComment(commentId);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting comment:', error);\r\n        throw new Error('댓글 삭제 중 오류가 발생했습니다.');\r\n      }\r\n    },\r\n    [user, websocket]\r\n  );\r\n\r\n  // 반응 추가\r\n  const addReaction = useCallback(\r\n    async (commentId: string, emoji: string) => {\r\n      if (!user) {\r\n        throw new Error('사용자 인증이 필요합니다.');\r\n      }\r\n\r\n      try {\r\n        const commentRef = doc(db, 'comments', commentId);\r\n        const commentDoc = await getDoc(commentRef);\r\n\r\n        if (!commentDoc.exists()) {\r\n          throw new Error('댓글을 찾을 수 없습니다.');\r\n        }\r\n\r\n        const commentData = commentDoc.data() as FirestoreComment;\r\n        const existingReactions = commentData.reactions || [];\r\n\r\n        // 이미 같은 이모지로 반응했는지 확인\r\n        const existingReactionIndex = existingReactions.findIndex(\r\n          r => r.userId === user.id && r.emoji === emoji\r\n        );\r\n\r\n        let newReactions;\r\n        if (existingReactionIndex >= 0) {\r\n          // 기존 반응 제거\r\n          newReactions = existingReactions.filter(\r\n            (_, index) => index !== existingReactionIndex\r\n          );\r\n        } else {\r\n          // 새 반응 추가\r\n          newReactions = [\r\n            ...existingReactions,\r\n            {\r\n              userId: user.id,\r\n              emoji,\r\n              createdAt: serverTimestamp() as any,\r\n            },\r\n          ];\r\n        }\r\n\r\n        await updateDoc(commentRef, {\r\n          reactions: newReactions,\r\n          updatedAt: serverTimestamp(),\r\n        });\r\n      } catch (error) {\r\n        console.error('Error adding reaction:', error);\r\n        throw new Error('반응 추가 중 오류가 발생했습니다.');\r\n      }\r\n    },\r\n    [user]\r\n  );\r\n\r\n  // 반응 제거\r\n  const removeReaction = useCallback(\r\n    async (commentId: string, emoji: string) => {\r\n      if (!user) {\r\n        throw new Error('사용자 인증이 필요합니다.');\r\n      }\r\n\r\n      try {\r\n        const commentRef = doc(db, 'comments', commentId);\r\n        const commentDoc = await getDoc(commentRef);\r\n\r\n        if (!commentDoc.exists()) {\r\n          throw new Error('댓글을 찾을 수 없습니다.');\r\n        }\r\n\r\n        const commentData = commentDoc.data() as FirestoreComment;\r\n        const existingReactions = commentData.reactions || [];\r\n\r\n        // 해당 반응 제거\r\n        const newReactions = existingReactions.filter(\r\n          r => !(r.userId === user.id && r.emoji === emoji)\r\n        );\r\n\r\n        await updateDoc(commentRef, {\r\n          reactions: newReactions,\r\n          updatedAt: serverTimestamp(),\r\n        });\r\n      } catch (error) {\r\n        console.error('Error removing reaction:', error);\r\n        throw new Error('반응 제거 중 오류가 발생했습니다.');\r\n      }\r\n    },\r\n    [user]\r\n  );\r\n\r\n  // 멘션 알림 생성\r\n  const createMentionNotifications = useCallback(\r\n    async (commentId: string, mentionedUserIds: string[]) => {\r\n      try {\r\n        const mentionPromises = mentionedUserIds.map(async mentionedUserId => {\r\n          const mentionData = {\r\n            commentId,\r\n            mentionedUserId,\r\n            mentionedByUserId: user!.id,\r\n            resourceType,\r\n            resourceId,\r\n            isRead: false,\r\n            createdAt: serverTimestamp(),\r\n          };\r\n\r\n          return addDoc(collection(db, 'mentions'), mentionData);\r\n        });\r\n\r\n        await Promise.all(mentionPromises);\r\n      } catch (error) {\r\n        console.error('Error creating mention notifications:', error);\r\n      }\r\n    },\r\n    [user, resourceType, resourceId]\r\n  );\r\n\r\n  // 댓글 새로고침\r\n  const refreshComments = useCallback(async () => {\r\n    await loadComments();\r\n  }, [loadComments]);\r\n\r\n  // 초기 로드 및 실시간 리스너 설정\r\n  useEffect(() => {\r\n    let unsubscribe: (() => void) | undefined;\r\n\r\n    const initializeComments = async () => {\r\n      unsubscribe = await loadComments();\r\n    };\r\n\r\n    initializeComments();\r\n\r\n    return () => {\r\n      if (unsubscribe) {\r\n        unsubscribe();\r\n      }\r\n    };\r\n  }, [loadComments]);\r\n\r\n  // 사용자 정보 추가\r\n  useEffect(() => {\r\n    const enrichComments = async () => {\r\n      if (comments.length > 0) {\r\n        const enriched = await enrichCommentsWithUserInfo(comments);\r\n        setComments(enriched);\r\n      }\r\n    };\r\n\r\n    enrichComments();\r\n  }, [comments.length]); // comments 자체를 의존성으로 사용하면 무한 루프 발생\r\n\r\n  return {\r\n    comments,\r\n    isLoading,\r\n    error,\r\n    addComment,\r\n    updateComment,\r\n    deleteComment,\r\n    addReaction,\r\n    removeReaction,\r\n    refreshComments,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useFCM.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [859, 862], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [859, 862], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 55,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 55,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1439, 1472], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 58,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 58,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [1521, 1557], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 91,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 91,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2231, 2263], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 94,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 94,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2301, 2339], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 117,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 117,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2875, 2907], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 120,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 120,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2945, 2983], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 163,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 163,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4137, 4168], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 166,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 166,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4206, 4243], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 187,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 187,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4694, 4726], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 190,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 190,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4764, 4802], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 208,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 208,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [5134, 5172], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 256,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 256,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6452, 6484], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 258,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 258,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6517, 6555], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\nimport {\n  getMessaging,\n  getToken,\n  onMessage,\n  deleteToken,\n} from 'firebase/messaging';\nimport { useAuth } from './useAuth';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\ninterface NotificationSettings {\n  userId: string;\n  pushEnabled: boolean;\n  emailEnabled: boolean;\n  inAppEnabled: boolean;\n  taskCreated: boolean;\n  taskUpdated: boolean;\n  taskDueSoon: boolean;\n  taskOverdue: boolean;\n  teamUpdates: boolean;\n  quietHours: {\n    enabled: boolean;\n    start: string;\n    end: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst API_BASE_URL =\n  process.env.VITE_FUNCTIONS_URL ||\n  'http://localhost:5001/almus-todo-app/asia-northeast3';\n\nexport const useFCM = () => {\n  const { user, isAuthenticated } = useAuth();\n  const [messaging, setMessaging] = useState<any>(null);\n  const [fcmToken, setFcmToken] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  // FCM 초기화\n  useEffect(() => {\n    if (isAuthenticated && 'serviceWorker' in navigator) {\n      const initFCM = async () => {\n        try {\n          const messagingInstance = getMessaging();\n          setMessaging(messagingInstance);\n\n          // FCM 토큰 요청\n          const token = await getToken(messagingInstance, {\n            vapidKey: process.env.VITE_FIREBASE_VAPID_KEY,\n          });\n\n          if (token) {\n            setFcmToken(token);\n            console.log('FCM 토큰 획득:', token);\n          }\n        } catch (error) {\n          console.error('FCM 초기화 오류:', error);\n        }\n      };\n\n      initFCM();\n    }\n  }, [isAuthenticated]);\n\n  // FCM 토큰 저장\n  const saveTokenMutation = useMutation({\n    mutationFn: async ({\n      token,\n      platform,\n    }: {\n      token: string;\n      platform: string;\n    }) => {\n      const response = await fetch(`${API_BASE_URL}/saveFCMToken`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user?.uid}`,\n        },\n        body: JSON.stringify({ token, platform }),\n      });\n\n      if (!response.ok) {\n        throw new Error('FCM 토큰 저장에 실패했습니다.');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      console.log('FCM 토큰이 저장되었습니다.');\n    },\n    onError: error => {\n      console.error('FCM 토큰 저장 오류:', error);\n    },\n  });\n\n  // FCM 토큰 삭제\n  const deleteTokenMutation = useMutation({\n    mutationFn: async (token: string) => {\n      const response = await fetch(`${API_BASE_URL}/deleteFCMToken`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user?.uid}`,\n        },\n        body: JSON.stringify({ token }),\n      });\n\n      if (!response.ok) {\n        throw new Error('FCM 토큰 삭제에 실패했습니다.');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      console.log('FCM 토큰이 삭제되었습니다.');\n    },\n    onError: error => {\n      console.error('FCM 토큰 삭제 오류:', error);\n    },\n  });\n\n  // 알림 설정 조회\n  const { data: notificationSettings, isLoading: settingsLoading } = useQuery({\n    queryKey: ['notificationSettings'],\n    queryFn: async (): Promise<NotificationSettings> => {\n      const response = await fetch(`${API_BASE_URL}/getNotificationSettings`, {\n        headers: {\n          Authorization: `Bearer ${user?.uid}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('알림 설정 조회에 실패했습니다.');\n      }\n\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // 알림 설정 저장\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (settings: Partial<NotificationSettings>) => {\n      const response = await fetch(`${API_BASE_URL}/saveNotificationSettings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${user?.uid}`,\n        },\n        body: JSON.stringify(settings),\n      });\n\n      if (!response.ok) {\n        throw new Error('알림 설정 저장에 실패했습니다.');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['notificationSettings'] });\n      console.log('알림 설정이 저장되었습니다.');\n    },\n    onError: error => {\n      console.error('알림 설정 저장 오류:', error);\n    },\n  });\n\n  // 테스트 알림 발송\n  const sendTestNotificationMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`${API_BASE_URL}/sendTestNotification`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${user?.uid}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('테스트 알림 발송에 실패했습니다.');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      console.log('테스트 알림이 발송되었습니다.');\n    },\n    onError: error => {\n      console.error('테스트 알림 발송 오류:', error);\n    },\n  });\n\n  // FCM 토큰 자동 저장\n  useEffect(() => {\n    if (fcmToken && user) {\n      saveTokenMutation.mutate({\n        token: fcmToken,\n        platform: 'web',\n      });\n    }\n  }, [fcmToken, user]);\n\n  // 포그라운드 메시지 처리\n  useEffect(() => {\n    if (messaging) {\n      const unsubscribe = onMessage(messaging, payload => {\n        console.log('포그라운드 메시지 수신:', payload);\n\n        // 브라우저 알림 표시\n        if ('Notification' in window && Notification.permission === 'granted') {\n          const notification = new Notification(\n            payload.notification?.title || '알림',\n            {\n              body: payload.notification?.body,\n              icon: '/icon-192x192.png',\n              badge: '/badge-72x72.png',\n              tag: payload.data?.type,\n              data: payload.data,\n            }\n          );\n\n          // 알림 클릭 시 처리\n          notification.onclick = () => {\n            window.focus();\n            notification.close();\n\n            // Task 페이지로 이동\n            if (payload.data?.taskId) {\n              window.location.href = `/tasks/${payload.data.taskId}`;\n            }\n          };\n        }\n      });\n\n      return () => unsubscribe();\n    }\n  }, [messaging]);\n\n  // 알림 권한 요청\n  const requestNotificationPermission = async () => {\n    if ('Notification' in window) {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    }\n    return false;\n  };\n\n  // FCM 구독 해제\n  const unsubscribeFromFCM = async () => {\n    if (fcmToken) {\n      try {\n        await deleteToken(messaging);\n        await deleteTokenMutation.mutateAsync(fcmToken);\n        setFcmToken(null);\n        console.log('FCM 구독이 해제되었습니다.');\n      } catch (error) {\n        console.error('FCM 구독 해제 오류:', error);\n      }\n    }\n  };\n\n  return {\n    fcmToken,\n    notificationSettings,\n    settingsLoading,\n    saveToken: saveTokenMutation.mutateAsync,\n    deleteToken: deleteTokenMutation.mutateAsync,\n    saveSettings: saveSettingsMutation.mutateAsync,\n    sendTestNotification: sendTestNotificationMutation.mutateAsync,\n    requestNotificationPermission,\n    unsubscribeFromFCM,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useFileUpload.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 170,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 170,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4693, 4738], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState } from 'react';\nimport {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  deleteObject,\n} from 'firebase/storage';\nimport { doc, setDoc, deleteDoc } from 'firebase/firestore';\nimport { storage, firestore } from '../config/firebase';\nimport { useAuth } from './useAuth';\nimport { getDoc } from 'firebase/firestore';\nimport { FileMetadata, UploadState } from '@almus/shared-types';\n\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\nexport interface UseFileUploadReturn {\n  uploadFile: (\n    file: File,\n    path: string,\n    metadata?: Partial<FileMetadata>\n  ) => Promise<FileMetadata>;\n  uploadMultipleFiles: (\n    files: File[],\n    path: string,\n    metadata?: Partial<FileMetadata>\n  ) => Promise<FileMetadata[]>;\n  deleteFile: (fileId: string) => Promise<{ success: boolean; error?: string }>;\n  downloadFile: (\n    fileId: string\n  ) => Promise<{ success: boolean; url?: string; error?: string }>;\n  uploadState: UploadState;\n  resetUploadState: () => void;\n}\n\nexport const useFileUpload = (): UseFileUploadReturn => {\n  const { user } = useAuth();\n  const [uploadState, setUploadState] = useState<UploadState>({\n    isUploading: false,\n    progress: { loaded: 0, total: 0, percentage: 0 },\n    error: null,\n  });\n\n  const uploadFile = async (\n    file: File,\n    path: string,\n    metadata?: Partial<FileMetadata>\n  ): Promise<FileMetadata> => {\n    if (!user) {\n      throw new Error('인증이 필요합니다.');\n    }\n\n    // 파일 크기 검증 (100MB 제한)\n    if (file.size > 100 * 1024 * 1024) {\n      throw new Error('파일 크기는 100MB를 초과할 수 없습니다.');\n    }\n\n    // 파일 타입 검증\n    const allowedTypes = [\n      'image/jpeg',\n      'image/png',\n      'image/gif',\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'text/plain',\n      'text/csv',\n    ];\n\n    if (!allowedTypes.includes(file.type)) {\n      throw new Error('지원하지 않는 파일 타입입니다.');\n    }\n\n    setUploadState({\n      isUploading: true,\n      progress: { loaded: 0, total: file.size, percentage: 0 },\n      error: null,\n    });\n\n    try {\n      // Storage에 파일 업로드\n      const storageRef = ref(storage, `${path}/${Date.now()}_${file.name}`);\n\n      // 업로드 진행률 모니터링 (Firebase Storage는 기본적으로 진행률을 제공하지 않음)\n      const uploadTask = uploadBytes(storageRef, file);\n\n      // 진행률 시뮬레이션 (실제로는 Firebase Storage에서 제공하지 않음)\n      const progressInterval = setInterval(() => {\n        setUploadState(prev => ({\n          ...prev,\n          progress: {\n            loaded: prev.progress.loaded + file.size / 10,\n            total: file.size,\n            percentage: Math.min(\n              ((prev.progress.loaded + file.size / 10) / file.size) * 100,\n              90\n            ),\n          },\n        }));\n      }, 100);\n\n      await uploadTask;\n      clearInterval(progressInterval);\n\n      // 다운로드 URL 가져오기\n      const downloadURL = await getDownloadURL(storageRef);\n\n      // Firestore에 메타데이터 저장\n      const fileMetadata: FileMetadata = {\n        id: storageRef.name,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        url: downloadURL,\n        uploaderId: user.uid,\n        uploaderName: user.displayName || user.email || 'Unknown',\n        taskId: metadata?.taskId,\n        projectId: metadata?.projectId,\n        teamId: metadata?.teamId || user.teamId || '',\n        version: 1,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await setDoc(doc(firestore, 'files', fileMetadata.id), fileMetadata);\n\n      setUploadState({\n        isUploading: false,\n        progress: { loaded: file.size, total: file.size, percentage: 100 },\n        error: null,\n        downloadURL,\n      });\n\n      return fileMetadata;\n    } catch (error) {\n      setUploadState({\n        isUploading: false,\n        progress: { loaded: 0, total: 0, percentage: 0 },\n        error:\n          error instanceof Error\n            ? error.message\n            : '파일 업로드에 실패했습니다.',\n      });\n      throw error;\n    }\n  };\n\n  const uploadMultipleFiles = async (\n    files: File[],\n    path: string,\n    metadata?: Partial<FileMetadata>\n  ): Promise<FileMetadata[]> => {\n    const results = await Promise.allSettled(\n      files.map(file => uploadFile(file, path, metadata))\n    );\n\n    const successResults = results.filter(\n      result => result.status === 'fulfilled'\n    ) as PromiseFulfilledResult<FileMetadata>[];\n    const errorResults = results.filter(\n      result => result.status === 'rejected'\n    ) as PromiseRejectedResult[];\n\n    if (errorResults.length > 0) {\n      console.error('일부 파일 업로드 실패:', errorResults);\n    }\n\n    return successResults.map(result => result.value);\n  };\n\n  const deleteFile = async (\n    fileId: string\n  ): Promise<{ success: boolean; error?: string }> => {\n    if (!user) {\n      return { success: false, error: '인증이 필요합니다.' };\n    }\n\n    try {\n      // Firestore에서 파일 메타데이터 조회\n      const fileDoc = await doc(firestore, 'files', fileId);\n      const fileSnap = await getDoc(fileDoc);\n\n      if (!fileSnap.exists()) {\n        return { success: false, error: '파일을 찾을 수 없습니다.' };\n      }\n\n      const fileData = fileSnap.data() as FileMetadata;\n\n      // 권한 확인 (업로더 또는 팀 관리자만 삭제 가능)\n      if (fileData.uploaderId !== user.uid && user.role !== 'ADMIN') {\n        return { success: false, error: '파일을 삭제할 권한이 없습니다.' };\n      }\n\n      // Storage에서 파일 삭제\n      const storageRef = ref(storage, fileId);\n      await deleteObject(storageRef);\n\n      // Firestore에서 메타데이터 삭제\n      await deleteDoc(fileDoc);\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : '파일 삭제에 실패했습니다.',\n      };\n    }\n  };\n\n  const downloadFile = async (\n    fileId: string\n  ): Promise<{ success: boolean; url?: string; error?: string }> => {\n    try {\n      // Firestore에서 파일 메타데이터 조회\n      const fileDoc = await doc(firestore, 'files', fileId);\n      const fileSnap = await getDoc(fileDoc);\n\n      if (!fileSnap.exists()) {\n        return { success: false, error: '파일을 찾을 수 없습니다.' };\n      }\n\n      const fileData = fileSnap.data() as FileMetadata;\n\n      return { success: true, url: fileData.url };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          error instanceof Error\n            ? error.message\n            : '파일 다운로드에 실패했습니다.',\n      };\n    }\n  };\n\n  const resetUploadState = () => {\n    setUploadState({\n      isUploading: false,\n      progress: { loaded: 0, total: 0, percentage: 0 },\n      error: null,\n    });\n  };\n\n  return {\n    uploadFile,\n    uploadMultipleFiles,\n    deleteFile,\n    downloadFile,\n    uploadState,\n    resetUploadState,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useMentions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1726, 1729], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1726, 1729], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 84,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 84,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2130, 2133], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2130, 2133], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 104,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 104,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2683, 2732], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 111,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 111,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2828, 2831], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2828, 2831], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 131,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 131,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3466, 3518], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 186,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 186,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5031, 5079], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 205,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 205,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5667, 5715], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 241,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 241,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6597, 6652], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 278,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 278,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [7518, 7578], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 301,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 301,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8300, 8303], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8300, 8303], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 313,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 313,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [8598, 8657], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 353,
        "column": 40,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 353,
        "endColumn": 53
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from './useAuth';\r\nimport type { FirestoreMention } from '@almus/shared-types';\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  onSnapshot,\r\n  doc,\r\n  updateDoc,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  getDocs,\r\n  getDoc,\r\n  limit,\r\n} from 'firebase/firestore';\r\nimport { db } from '../lib/firebase';\r\n\r\ninterface Mention extends Omit<FirestoreMention, 'createdAt' | 'readAt'> {\r\n  createdAt: Date;\r\n  readAt?: Date;\r\n  mentionedByUser?: {\r\n    id: string;\r\n    name: string;\r\n    avatar?: string;\r\n    email: string;\r\n  };\r\n  comment?: {\r\n    id: string;\r\n    content: string;\r\n    resourceType: string;\r\n    resourceId: string;\r\n  };\r\n}\r\n\r\ninterface UseMentionsOptions {\r\n  enableRealtime?: boolean;\r\n  markAsReadOnView?: boolean;\r\n}\r\n\r\ninterface UseMentionsReturn {\r\n  mentions: Mention[];\r\n  unreadCount: number;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  markAsRead: (mentionId: string) => Promise<void>;\r\n  markAllAsRead: () => Promise<void>;\r\n  searchMentionableUsers: (\r\n    query: string\r\n  ) => Promise<\r\n    Array<{ id: string; name: string; email: string; avatar?: string }>\r\n  >;\r\n  refreshMentions: () => Promise<void>;\r\n}\r\n\r\nexport const useMentions = ({\r\n  enableRealtime = true,\r\n  markAsReadOnView = false,\r\n}: UseMentionsOptions = {}): UseMentionsReturn => {\r\n  const { user } = useAuth();\r\n\r\n  const [mentions, setMentions] = useState<Mention[]>([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Firestore 멘션을 Mention 타입으로 변환\r\n  const transformFirestoreMention = useCallback((doc: any): Mention => {\r\n    const data = doc.data();\r\n    return {\r\n      id: doc.id,\r\n      ...data,\r\n      createdAt:\r\n        data.createdAt instanceof Timestamp\r\n          ? data.createdAt.toDate()\r\n          : new Date(data.createdAt),\r\n      readAt:\r\n        data.readAt instanceof Timestamp ? data.readAt.toDate() : undefined,\r\n    };\r\n  }, []);\r\n\r\n  // 사용자 정보 캐시\r\n  const userCache = new Map<string, any>();\r\n\r\n  const loadUserInfo = useCallback(async (userId: string) => {\r\n    if (userCache.has(userId)) {\r\n      return userCache.get(userId);\r\n    }\r\n\r\n    try {\r\n      const userDoc = await getDoc(doc(db, 'users', userId));\r\n      if (userDoc.exists()) {\r\n        const userData = {\r\n          id: userDoc.id,\r\n          name: userDoc.data().name,\r\n          email: userDoc.data().email,\r\n          avatar: userDoc.data().avatar,\r\n        };\r\n        userCache.set(userId, userData);\r\n        return userData;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading user info:', error);\r\n    }\r\n\r\n    return null;\r\n  }, []);\r\n\r\n  // 댓글 정보 캐시\r\n  const commentCache = new Map<string, any>();\r\n\r\n  const loadCommentInfo = useCallback(async (commentId: string) => {\r\n    if (commentCache.has(commentId)) {\r\n      return commentCache.get(commentId);\r\n    }\r\n\r\n    try {\r\n      const commentDoc = await getDoc(doc(db, 'comments', commentId));\r\n      if (commentDoc.exists()) {\r\n        const commentData = {\r\n          id: commentDoc.id,\r\n          content: commentDoc.data().content,\r\n          resourceType: commentDoc.data().resourceType,\r\n          resourceId: commentDoc.data().resourceId,\r\n        };\r\n        commentCache.set(commentId, commentData);\r\n        return commentData;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading comment info:', error);\r\n    }\r\n\r\n    return null;\r\n  }, []);\r\n\r\n  // 멘션에 추가 정보 로드\r\n  const enrichMentionsWithAdditionalInfo = useCallback(\r\n    async (mentions: Mention[]): Promise<Mention[]> => {\r\n      const enrichMention = async (mention: Mention): Promise<Mention> => {\r\n        const [mentionedByUser, comment] = await Promise.all([\r\n          loadUserInfo(mention.mentionedByUserId),\r\n          loadCommentInfo(mention.commentId),\r\n        ]);\r\n\r\n        return {\r\n          ...mention,\r\n          mentionedByUser,\r\n          comment,\r\n        };\r\n      };\r\n\r\n      return Promise.all(mentions.map(enrichMention));\r\n    },\r\n    [loadUserInfo, loadCommentInfo]\r\n  );\r\n\r\n  // 멘션 로드\r\n  const loadMentions = useCallback(async () => {\r\n    if (!user) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const mentionsQuery = query(\r\n        collection(db, 'mentions'),\r\n        where('mentionedUserId', '==', user.id),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n\r\n      if (enableRealtime) {\r\n        // 실시간 리스너 설정\r\n        const unsubscribe = onSnapshot(\r\n          mentionsQuery,\r\n          async snapshot => {\r\n            const mentionDocs = snapshot.docs.map(transformFirestoreMention);\r\n            const enrichedMentions =\r\n              await enrichMentionsWithAdditionalInfo(mentionDocs);\r\n\r\n            setMentions(enrichedMentions);\r\n            setUnreadCount(enrichedMentions.filter(m => !m.isRead).length);\r\n            setIsLoading(false);\r\n          },\r\n          error => {\r\n            console.error('Error loading mentions:', error);\r\n            setError('멘션을 불러오는 중 오류가 발생했습니다.');\r\n            setIsLoading(false);\r\n          }\r\n        );\r\n\r\n        return unsubscribe;\r\n      } else {\r\n        // 일회성 로드\r\n        const snapshot = await getDocs(mentionsQuery);\r\n        const mentionDocs = snapshot.docs.map(transformFirestoreMention);\r\n        const enrichedMentions =\r\n          await enrichMentionsWithAdditionalInfo(mentionDocs);\r\n\r\n        setMentions(enrichedMentions);\r\n        setUnreadCount(enrichedMentions.filter(m => !m.isRead).length);\r\n        setIsLoading(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading mentions:', error);\r\n      setError('멘션을 불러오는 중 오류가 발생했습니다.');\r\n      setIsLoading(false);\r\n    }\r\n  }, [\r\n    user,\r\n    enableRealtime,\r\n    transformFirestoreMention,\r\n    enrichMentionsWithAdditionalInfo,\r\n  ]);\r\n\r\n  // 멘션을 읽음으로 표시\r\n  const markAsRead = useCallback(\r\n    async (mentionId: string) => {\r\n      if (!user) {\r\n        throw new Error('사용자 인증이 필요합니다.');\r\n      }\r\n\r\n      try {\r\n        const mentionRef = doc(db, 'mentions', mentionId);\r\n        await updateDoc(mentionRef, {\r\n          isRead: true,\r\n          readAt: serverTimestamp(),\r\n        });\r\n\r\n        // 로컬 상태 업데이트\r\n        setMentions(prev =>\r\n          prev.map(mention =>\r\n            mention.id === mentionId\r\n              ? { ...mention, isRead: true, readAt: new Date() }\r\n              : mention\r\n          )\r\n        );\r\n\r\n        setUnreadCount(prev => Math.max(0, prev - 1));\r\n      } catch (error) {\r\n        console.error('Error marking mention as read:', error);\r\n        throw new Error('멘션을 읽음으로 표시하는 중 오류가 발생했습니다.');\r\n      }\r\n    },\r\n    [user]\r\n  );\r\n\r\n  // 모든 멘션을 읽음으로 표시\r\n  const markAllAsRead = useCallback(async () => {\r\n    if (!user) {\r\n      throw new Error('사용자 인증이 필요합니다.');\r\n    }\r\n\r\n    try {\r\n      const unreadMentions = mentions.filter(m => !m.isRead);\r\n\r\n      const updatePromises = unreadMentions.map(mention => {\r\n        const mentionRef = doc(db, 'mentions', mention.id);\r\n        return updateDoc(mentionRef, {\r\n          isRead: true,\r\n          readAt: serverTimestamp(),\r\n        });\r\n      });\r\n\r\n      await Promise.all(updatePromises);\r\n\r\n      // 로컬 상태 업데이트\r\n      setMentions(prev =>\r\n        prev.map(mention => ({\r\n          ...mention,\r\n          isRead: true,\r\n          readAt: mention.readAt || new Date(),\r\n        }))\r\n      );\r\n\r\n      setUnreadCount(0);\r\n    } catch (error) {\r\n      console.error('Error marking all mentions as read:', error);\r\n      throw new Error('모든 멘션을 읽음으로 표시하는 중 오류가 발생했습니다.');\r\n    }\r\n  }, [user, mentions]);\r\n\r\n  // 멘션 가능한 사용자 검색\r\n  const searchMentionableUsers = useCallback(\r\n    async (searchQuery: string) => {\r\n      if (!searchQuery.trim()) return [];\r\n\r\n      try {\r\n        // 현재 사용자가 속한 팀의 멤버들을 검색\r\n        // 실제로는 더 복잡한 쿼리가 필요할 수 있음 (팀 멤버십, 프로젝트 참여자 등)\r\n        const usersQuery = query(\r\n          collection(db, 'users'),\r\n          where('name', '>=', searchQuery),\r\n          where('name', '<=', searchQuery + '\\uf8ff'),\r\n          orderBy('name'),\r\n          limit(10)\r\n        );\r\n\r\n        const snapshot = await getDocs(usersQuery);\r\n        const users = snapshot.docs.map(doc => {\r\n          const data = doc.data() as any;\r\n          return {\r\n            id: doc.id,\r\n            name: data.name || '',\r\n            email: data.email || '',\r\n            avatar: data.avatar,\r\n          };\r\n        });\r\n\r\n        // 현재 사용자는 제외\r\n        return users.filter(u => u.id !== user?.id);\r\n      } catch (error) {\r\n        console.error('Error searching mentionable users:', error);\r\n        return [];\r\n      }\r\n    },\r\n    [user]\r\n  );\r\n\r\n  // 멘션 새로고침\r\n  const refreshMentions = useCallback(async () => {\r\n    await loadMentions();\r\n  }, [loadMentions]);\r\n\r\n  // 초기 로드 및 실시간 리스너 설정\r\n  useEffect(() => {\r\n    let unsubscribe: (() => void) | undefined;\r\n\r\n    const initializeMentions = async () => {\r\n      unsubscribe = await loadMentions();\r\n    };\r\n\r\n    if (user) {\r\n      initializeMentions();\r\n    }\r\n\r\n    return () => {\r\n      if (unsubscribe) {\r\n        unsubscribe();\r\n      }\r\n    };\r\n  }, [user, loadMentions]);\r\n\r\n  // 자동으로 읽음 표시 (옵션이 활성화된 경우)\r\n  useEffect(() => {\r\n    if (markAsReadOnView && mentions.length > 0) {\r\n      const unreadMentions = mentions.filter(m => !m.isRead);\r\n\r\n      // 뷰포트에 표시되는 멘션들을 읽음으로 표시\r\n      // 실제로는 Intersection Observer를 사용해야 함\r\n      const timeoutId = setTimeout(() => {\r\n        unreadMentions.forEach(mention => {\r\n          markAsRead(mention.id).catch(console.error);\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n  }, [mentions, markAsReadOnView, markAsRead]);\r\n\r\n  return {\r\n    mentions,\r\n    unreadCount,\r\n    isLoading,\r\n    error,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    searchMentionableUsers,\r\n    refreshMentions,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\usePermissionGuard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\usePermissions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'doc' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 6
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'doc' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'getDoc' is defined but never used.",
        "line": 8,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 9
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'getDoc' is defined but never used.",
        "line": 8,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Permission' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 13
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Permission' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 214,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 214,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6798, 6801], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6798, 6801], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 244,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 244,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7810, 7813], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7810, 7813], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'teamId' is defined but never used.",
        "line": 271,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 271,
        "endColumn": 43
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'teamId' is defined but never used.",
        "line": 271,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 271,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  onSnapshot,\r\n  doc,\r\n  getDoc,\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\nimport { useAuth } from './useAuth';\r\nimport {\r\n  Permission,\r\n  ProjectPermission,\r\n  TaskPermission,\r\n  ProjectRole,\r\n  TaskRole,\r\n  TeamRole,\r\n  PermissionAction,\r\n  ResourceType,\r\n  FIRESTORE_COLLECTIONS,\r\n} from '../types/team';\r\n\r\n// 권한 매트릭스 정의\r\nconst TEAM_PERMISSIONS: Record<TeamRole, Record<PermissionAction, boolean>> = {\r\n  [TeamRole.OWNER]: {\r\n    [PermissionAction.CREATE]: true,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: true,\r\n    [PermissionAction.ASSIGN]: true,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: true,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: true,\r\n  },\r\n  [TeamRole.ADMIN]: {\r\n    [PermissionAction.CREATE]: true,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: true,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: true,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: true,\r\n  },\r\n  [TeamRole.EDITOR]: {\r\n    [PermissionAction.CREATE]: true,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: false,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: true,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n  [TeamRole.VIEWER]: {\r\n    [PermissionAction.CREATE]: false,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: false,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: false,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: false,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n};\r\n\r\nconst PROJECT_PERMISSIONS: Record<\r\n  ProjectRole,\r\n  Record<PermissionAction, boolean>\r\n> = {\r\n  [ProjectRole.PROJECT_MANAGER]: {\r\n    [PermissionAction.CREATE]: true,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: true,\r\n    [PermissionAction.ASSIGN]: true,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: true,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: true,\r\n  },\r\n  [ProjectRole.PROJECT_LEAD]: {\r\n    [PermissionAction.CREATE]: true,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: true,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: true,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n  [ProjectRole.CONTRIBUTOR]: {\r\n    [PermissionAction.CREATE]: true,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: false,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: true,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n  [ProjectRole.OBSERVER]: {\r\n    [PermissionAction.CREATE]: false,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: false,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: false,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: false,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n};\r\n\r\nconst TASK_PERMISSIONS: Record<TaskRole, Record<PermissionAction, boolean>> = {\r\n  [TaskRole.ASSIGNEE]: {\r\n    [PermissionAction.CREATE]: false,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: false,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: true,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n  [TaskRole.REVIEWER]: {\r\n    [PermissionAction.CREATE]: false,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: false,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: false,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n  [TaskRole.COLLABORATOR]: {\r\n    [PermissionAction.CREATE]: false,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: true,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: false,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: false,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n  [TaskRole.WATCHER]: {\r\n    [PermissionAction.CREATE]: false,\r\n    [PermissionAction.READ]: true,\r\n    [PermissionAction.UPDATE]: false,\r\n    [PermissionAction.DELETE]: false,\r\n    [PermissionAction.ASSIGN]: false,\r\n    [PermissionAction.COMMENT]: true,\r\n    [PermissionAction.COMPLETE]: false,\r\n    [PermissionAction.MANAGE_PERMISSIONS]: false,\r\n  },\r\n};\r\n\r\ninterface UsePermissionsReturn {\r\n  // 권한 확인 함수들\r\n  hasPermission: (\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction\r\n  ) => boolean;\r\n  hasTeamPermission: (action: PermissionAction, teamId?: string) => boolean;\r\n  hasProjectPermission: (\r\n    action: PermissionAction,\r\n    projectId: string\r\n  ) => boolean;\r\n  hasTaskPermission: (action: PermissionAction, taskId: string) => boolean;\r\n\r\n  // 권한 데이터\r\n  projectPermissions: ProjectPermission[];\r\n  taskPermissions: TaskPermission[];\r\n  loading: boolean;\r\n\r\n  // 유틸리티 함수들\r\n  getUserTeamRole: (teamId?: string) => TeamRole | null;\r\n  getUserProjectRole: (projectId: string) => ProjectRole | null;\r\n  getUserTaskRole: (taskId: string) => TaskRole | null;\r\n  canManageProjectPermissions: (projectId: string) => boolean;\r\n  canManageTaskPermissions: (taskId: string) => boolean;\r\n}\r\n\r\nexport const usePermissions = (): UsePermissionsReturn => {\r\n  const { user } = useAuth();\r\n  const [projectPermissions, setProjectPermissions] = useState<\r\n    ProjectPermission[]\r\n  >([]);\r\n  const [taskPermissions, setTaskPermissions] = useState<TaskPermission[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // 사용자의 프로젝트 권한 로드\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setProjectPermissions([]);\r\n      setTaskPermissions([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const unsubscribes: (() => void)[] = [];\r\n\r\n    // 프로젝트 권한 구독\r\n    const projectPermissionsQuery = query(\r\n      collection(db, FIRESTORE_COLLECTIONS.PROJECT_PERMISSIONS),\r\n      where('userId', '==', user.id),\r\n      where('isActive', '==', true)\r\n    );\r\n\r\n    const unsubscribeProjects = onSnapshot(\r\n      projectPermissionsQuery,\r\n      snapshot => {\r\n        const permissions = snapshot.docs.map(doc => {\r\n          const data = doc.data() as any;\r\n          return {\r\n            id: doc.id,\r\n            projectId: data.projectId,\r\n            userId: data.userId,\r\n            role: data.role,\r\n            permissions: data.permissions || [],\r\n            grantedBy: data.grantedBy,\r\n            grantedAt: data.grantedAt.toDate(),\r\n            expiresAt: data.expiresAt?.toDate(),\r\n            isActive: data.isActive,\r\n            createdAt: data.createdAt.toDate(),\r\n            updatedAt: data.updatedAt.toDate(),\r\n          } as ProjectPermission;\r\n        });\r\n        setProjectPermissions(permissions);\r\n      }\r\n    );\r\n\r\n    unsubscribes.push(unsubscribeProjects);\r\n\r\n    // 작업 권한 구독\r\n    const taskPermissionsQuery = query(\r\n      collection(db, FIRESTORE_COLLECTIONS.TASK_PERMISSIONS),\r\n      where('userId', '==', user.id),\r\n      where('isActive', '==', true)\r\n    );\r\n\r\n    const unsubscribeTasks = onSnapshot(taskPermissionsQuery, snapshot => {\r\n      const permissions = snapshot.docs.map(doc => {\r\n        const data = doc.data() as any;\r\n        return {\r\n          id: doc.id,\r\n          taskId: data.taskId,\r\n          userId: data.userId,\r\n          role: data.role,\r\n          permissions: data.permissions || [],\r\n          grantedBy: data.grantedBy,\r\n          grantedAt: data.grantedAt.toDate(),\r\n          expiresAt: data.expiresAt?.toDate(),\r\n          isActive: data.isActive,\r\n          createdAt: data.createdAt.toDate(),\r\n          updatedAt: data.updatedAt.toDate(),\r\n        } as TaskPermission;\r\n      });\r\n      setTaskPermissions(permissions);\r\n      setLoading(false);\r\n    });\r\n\r\n    unsubscribes.push(unsubscribeTasks);\r\n\r\n    return () => {\r\n      unsubscribes.forEach(unsub => unsub());\r\n    };\r\n  }, [user]);\r\n\r\n  // 팀 역할 가져오기\r\n  const getUserTeamRole = (teamId?: string): TeamRole | null => {\r\n    if (!user) return null;\r\n    // useTeams hook에서 가져온 역할 정보 사용\r\n    // 여기서는 간단히 user의 현재 팀 역할을 반환\r\n    return TeamRole.EDITOR; // 임시값, 실제로는 useTeams에서 가져와야 함\r\n  };\r\n\r\n  // 프로젝트 역할 가져오기\r\n  const getUserProjectRole = (projectId: string): ProjectRole | null => {\r\n    const permission = projectPermissions.find(p => p.projectId === projectId);\r\n    return permission?.role || null;\r\n  };\r\n\r\n  // 작업 역할 가져오기\r\n  const getUserTaskRole = (taskId: string): TaskRole | null => {\r\n    const permission = taskPermissions.find(p => p.taskId === taskId);\r\n    return permission?.role || null;\r\n  };\r\n\r\n  // 팀 권한 확인\r\n  const hasTeamPermission = (\r\n    action: PermissionAction,\r\n    teamId?: string\r\n  ): boolean => {\r\n    const teamRole = getUserTeamRole(teamId);\r\n    if (!teamRole) return false;\r\n    return TEAM_PERMISSIONS[teamRole][action] || false;\r\n  };\r\n\r\n  // 프로젝트 권한 확인\r\n  const hasProjectPermission = (\r\n    action: PermissionAction,\r\n    projectId: string\r\n  ): boolean => {\r\n    // 1. 팀 레벨 권한 확인\r\n    if (hasTeamPermission(action)) return true;\r\n\r\n    // 2. 프로젝트 레벨 권한 확인\r\n    const projectRole = getUserProjectRole(projectId);\r\n    if (projectRole && PROJECT_PERMISSIONS[projectRole][action]) return true;\r\n\r\n    // 3. 명시적 권한 확인\r\n    const permission = projectPermissions.find(p => p.projectId === projectId);\r\n    if (permission?.permissions) {\r\n      const explicitPermission = permission.permissions.find(\r\n        p => p.resource === ResourceType.PROJECT && p.action === action\r\n      );\r\n      if (explicitPermission) return explicitPermission.granted;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // 작업 권한 확인\r\n  const hasTaskPermission = (\r\n    action: PermissionAction,\r\n    taskId: string\r\n  ): boolean => {\r\n    // 1. 팀 레벨 권한 확인\r\n    if (hasTeamPermission(action)) return true;\r\n\r\n    // 2. 작업 레벨 권한 확인\r\n    const taskRole = getUserTaskRole(taskId);\r\n    if (taskRole && TASK_PERMISSIONS[taskRole][action]) return true;\r\n\r\n    // 3. 명시적 권한 확인\r\n    const permission = taskPermissions.find(p => p.taskId === taskId);\r\n    if (permission?.permissions) {\r\n      const explicitPermission = permission.permissions.find(\r\n        p => p.resource === ResourceType.TASK && p.action === action\r\n      );\r\n      if (explicitPermission) return explicitPermission.granted;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // 통합 권한 확인 함수\r\n  const hasPermission = (\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction\r\n  ): boolean => {\r\n    switch (resourceType) {\r\n      case ResourceType.TEAM:\r\n        return hasTeamPermission(action, resourceId);\r\n      case ResourceType.PROJECT:\r\n        return hasProjectPermission(action, resourceId);\r\n      case ResourceType.TASK:\r\n        return hasTaskPermission(action, resourceId);\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  // 프로젝트 권한 관리 가능 여부\r\n  const canManageProjectPermissions = (projectId: string): boolean => {\r\n    return hasProjectPermission(PermissionAction.MANAGE_PERMISSIONS, projectId);\r\n  };\r\n\r\n  // 작업 권한 관리 가능 여부\r\n  const canManageTaskPermissions = (taskId: string): boolean => {\r\n    return hasTaskPermission(PermissionAction.MANAGE_PERMISSIONS, taskId);\r\n  };\r\n\r\n  return {\r\n    hasPermission,\r\n    hasTeamPermission,\r\n    hasProjectPermission,\r\n    hasTaskPermission,\r\n    projectPermissions,\r\n    taskPermissions,\r\n    loading,\r\n    getUserTeamRole,\r\n    getUserProjectRole,\r\n    getUserTaskRole,\r\n    canManageProjectPermissions,\r\n    canManageTaskPermissions,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useProjectPermissions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'User' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 7
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'User' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1354, 1357], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1354, 1357], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 72,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 72,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2013, 2052], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 140,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 140,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4090, 4129], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 162,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 162,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4630, 4633], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4630, 4633], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 188,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 188,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5493, 5534], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 219,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 219,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6352, 6391], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 229,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 229,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6627, 6630], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6627, 6630], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 249,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 249,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [7251, 7291], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 346,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 346,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [10154, 10191], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\r\nimport {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  onSnapshot,\r\n  Timestamp,\r\n  writeBatch,\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\nimport { useAuth } from './useAuth';\r\nimport {\r\n  ProjectPermission,\r\n  CreateProjectPermissionInput,\r\n  UpdateProjectPermissionInput,\r\n  ProjectRole,\r\n  FIRESTORE_COLLECTIONS,\r\n  User,\r\n} from '../types/team';\r\nimport { toast } from '../utils/toast';\r\n\r\nexport const useProjectPermissions = (projectId: string) => {\r\n  const { user } = useAuth();\r\n  const [permissions, setPermissions] = useState<ProjectPermission[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // 프로젝트 권한 목록 로드\r\n  useEffect(() => {\r\n    if (!projectId) {\r\n      setPermissions([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const permissionsQuery = query(\r\n      collection(db, FIRESTORE_COLLECTIONS.PROJECT_PERMISSIONS),\r\n      where('projectId', '==', projectId),\r\n      where('isActive', '==', true),\r\n      orderBy('grantedAt', 'desc')\r\n    );\r\n\r\n    const unsubscribe = onSnapshot(\r\n      permissionsQuery,\r\n      snapshot => {\r\n        const permissionsData = snapshot.docs.map(doc => {\r\n          const data = doc.data() as any;\r\n          return {\r\n            id: doc.id,\r\n            projectId: data.projectId,\r\n            userId: data.userId,\r\n            role: data.role,\r\n            permissions: data.permissions || [],\r\n            grantedBy: data.grantedBy,\r\n            grantedAt: data.grantedAt.toDate(),\r\n            expiresAt: data.expiresAt?.toDate(),\r\n            isActive: data.isActive,\r\n            createdAt: data.createdAt.toDate(),\r\n            updatedAt: data.updatedAt.toDate(),\r\n          } as ProjectPermission;\r\n        });\r\n        setPermissions(permissionsData);\r\n        setLoading(false);\r\n        setError(null);\r\n      },\r\n      error => {\r\n        console.error('프로젝트 권한 로드 실패:', error);\r\n        setError('프로젝트 권한을 불러오는데 실패했습니다.');\r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    return unsubscribe;\r\n  }, [projectId]);\r\n\r\n  // 프로젝트 권한 부여\r\n  const grantPermission = async (\r\n    input: CreateProjectPermissionInput\r\n  ): Promise<ProjectPermission> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      // 기존 권한이 있는지 확인\r\n      const existingPermission = permissions.find(\r\n        p => p.userId === input.userId\r\n      );\r\n      if (existingPermission) {\r\n        throw new Error('해당 사용자에게 이미 권한이 부여되어 있습니다.');\r\n      }\r\n\r\n      const now = Timestamp.now();\r\n      const permissionRef = doc(\r\n        collection(db, FIRESTORE_COLLECTIONS.PROJECT_PERMISSIONS)\r\n      );\r\n\r\n      const permissionData = {\r\n        id: permissionRef.id,\r\n        projectId: input.projectId,\r\n        userId: input.userId,\r\n        role: input.role,\r\n        permissions: input.permissions || [],\r\n        grantedBy: user.id,\r\n        grantedAt: now,\r\n        expiresAt: input.expiresAt ? Timestamp.fromDate(input.expiresAt) : null,\r\n        isActive: true,\r\n        createdAt: now,\r\n        updatedAt: now,\r\n      };\r\n\r\n      await addDoc(\r\n        collection(db, FIRESTORE_COLLECTIONS.PROJECT_PERMISSIONS),\r\n        permissionData\r\n      );\r\n\r\n      const createdPermission: ProjectPermission = {\r\n        id: permissionRef.id,\r\n        projectId: permissionData.projectId,\r\n        userId: permissionData.userId,\r\n        role: permissionData.role,\r\n        permissions: permissionData.permissions,\r\n        grantedBy: permissionData.grantedBy,\r\n        grantedAt: permissionData.grantedAt.toDate(),\r\n        expiresAt: permissionData.expiresAt?.toDate(),\r\n        isActive: permissionData.isActive,\r\n        createdAt: permissionData.createdAt.toDate(),\r\n        updatedAt: permissionData.updatedAt.toDate(),\r\n      };\r\n\r\n      // 감사 로그 작성\r\n      await logPermissionChange('GRANTED', createdPermission);\r\n\r\n      toast.success('프로젝트 권한이 부여되었습니다.');\r\n      return createdPermission;\r\n    } catch (error) {\r\n      console.error('프로젝트 권한 부여 실패:', error);\r\n      toast.error(\r\n        error instanceof Error\r\n          ? error.message\r\n          : '프로젝트 권한 부여에 실패했습니다.'\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 프로젝트 권한 업데이트\r\n  const updatePermission = async (\r\n    input: UpdateProjectPermissionInput\r\n  ): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const permissionRef = doc(\r\n        db,\r\n        FIRESTORE_COLLECTIONS.PROJECT_PERMISSIONS,\r\n        input.id\r\n      );\r\n      const updateData: any = {\r\n        updatedAt: Timestamp.now(),\r\n      };\r\n\r\n      const existingPermission = permissions.find(p => p.id === input.id);\r\n      if (!existingPermission) {\r\n        throw new Error('권한을 찾을 수 없습니다.');\r\n      }\r\n\r\n      if (input.role !== undefined) updateData.role = input.role;\r\n      if (input.permissions !== undefined)\r\n        updateData.permissions = input.permissions;\r\n      if (input.expiresAt !== undefined) {\r\n        updateData.expiresAt = input.expiresAt\r\n          ? Timestamp.fromDate(input.expiresAt)\r\n          : null;\r\n      }\r\n      if (input.isActive !== undefined) updateData.isActive = input.isActive;\r\n\r\n      await updateDoc(permissionRef, updateData);\r\n\r\n      // 감사 로그 작성\r\n      await logPermissionChange('MODIFIED', existingPermission, updateData);\r\n\r\n      toast.success('프로젝트 권한이 업데이트되었습니다.');\r\n    } catch (error) {\r\n      console.error('프로젝트 권한 업데이트 실패:', error);\r\n      toast.error('프로젝트 권한 업데이트에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 프로젝트 권한 취소\r\n  const revokePermission = async (permissionId: string): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const existingPermission = permissions.find(p => p.id === permissionId);\r\n      if (!existingPermission) {\r\n        throw new Error('권한을 찾을 수 없습니다.');\r\n      }\r\n\r\n      const permissionRef = doc(\r\n        db,\r\n        FIRESTORE_COLLECTIONS.PROJECT_PERMISSIONS,\r\n        permissionId\r\n      );\r\n      await updateDoc(permissionRef, {\r\n        isActive: false,\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n\r\n      // 감사 로그 작성\r\n      await logPermissionChange('REVOKED', existingPermission);\r\n\r\n      toast.success('프로젝트 권한이 취소되었습니다.');\r\n    } catch (error) {\r\n      console.error('프로젝트 권한 취소 실패:', error);\r\n      toast.error('프로젝트 권한 취소에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 권한 변경 로그 작성\r\n  const logPermissionChange = async (\r\n    action: 'GRANTED' | 'REVOKED' | 'MODIFIED',\r\n    permission: ProjectPermission,\r\n    newData?: any\r\n  ) => {\r\n    try {\r\n      const logData = {\r\n        action,\r\n        resourceType: 'PROJECT',\r\n        resourceId: permission.projectId,\r\n        userId: permission.userId,\r\n        grantedBy: user!.id,\r\n        previousPermissions: permission.permissions,\r\n        newPermissions: newData?.permissions || permission.permissions,\r\n        reason: `권한 ${action === 'GRANTED' ? '부여' : action === 'REVOKED' ? '취소' : '수정'}`,\r\n        createdAt: Timestamp.now(),\r\n      };\r\n\r\n      await addDoc(\r\n        collection(db, FIRESTORE_COLLECTIONS.PERMISSION_AUDIT_LOG),\r\n        logData\r\n      );\r\n    } catch (error) {\r\n      console.error('권한 변경 로그 작성 실패:', error);\r\n      // 로그 작성 실패는 주요 작업을 방해하지 않음\r\n    }\r\n  };\r\n\r\n  // 사용자별 권한 조회\r\n  const getUserPermission = (userId: string): ProjectPermission | null => {\r\n    return permissions.find(p => p.userId === userId && p.isActive) || null;\r\n  };\r\n\r\n  // 역할별 권한 조회\r\n  const getPermissionsByRole = (role: ProjectRole): ProjectPermission[] => {\r\n    return permissions.filter(p => p.role === role && p.isActive);\r\n  };\r\n\r\n  // 만료된 권한 조회\r\n  const getExpiredPermissions = (): ProjectPermission[] => {\r\n    const now = new Date();\r\n    return permissions.filter(\r\n      p => p.isActive && p.expiresAt && p.expiresAt < now\r\n    );\r\n  };\r\n\r\n  // 곧 만료될 권한 조회 (7일 내)\r\n  const getExpiringPermissions = (): ProjectPermission[] => {\r\n    const now = new Date();\r\n    const sevenDaysFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\r\n\r\n    return permissions.filter(\r\n      p =>\r\n        p.isActive &&\r\n        p.expiresAt &&\r\n        p.expiresAt > now &&\r\n        p.expiresAt <= sevenDaysFromNow\r\n    );\r\n  };\r\n\r\n  // 권한 통계\r\n  const getPermissionStats = () => {\r\n    const totalPermissions = permissions.filter(p => p.isActive).length;\r\n    const roleStats = {\r\n      [ProjectRole.PROJECT_MANAGER]: getPermissionsByRole(\r\n        ProjectRole.PROJECT_MANAGER\r\n      ).length,\r\n      [ProjectRole.PROJECT_LEAD]: getPermissionsByRole(ProjectRole.PROJECT_LEAD)\r\n        .length,\r\n      [ProjectRole.CONTRIBUTOR]: getPermissionsByRole(ProjectRole.CONTRIBUTOR)\r\n        .length,\r\n      [ProjectRole.OBSERVER]: getPermissionsByRole(ProjectRole.OBSERVER).length,\r\n    };\r\n    const expiredCount = getExpiredPermissions().length;\r\n    const expiringCount = getExpiringPermissions().length;\r\n\r\n    return {\r\n      totalPermissions,\r\n      roleStats,\r\n      expiredCount,\r\n      expiringCount,\r\n    };\r\n  };\r\n\r\n  // 대량 권한 부여\r\n  const grantBulkPermissions = async (\r\n    inputs: CreateProjectPermissionInput[]\r\n  ): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const batch = writeBatch(db);\r\n      const now = Timestamp.now();\r\n\r\n      inputs.forEach(input => {\r\n        const permissionRef = doc(\r\n          collection(db, FIRESTORE_COLLECTIONS.PROJECT_PERMISSIONS)\r\n        );\r\n        const permissionData = {\r\n          id: permissionRef.id,\r\n          projectId: input.projectId,\r\n          userId: input.userId,\r\n          role: input.role,\r\n          permissions: input.permissions || [],\r\n          grantedBy: user.id,\r\n          grantedAt: now,\r\n          expiresAt: input.expiresAt\r\n            ? Timestamp.fromDate(input.expiresAt)\r\n            : null,\r\n          isActive: true,\r\n          createdAt: now,\r\n          updatedAt: now,\r\n        };\r\n\r\n        batch.set(permissionRef, permissionData);\r\n      });\r\n\r\n      await batch.commit();\r\n      toast.success(`${inputs.length}명에게 프로젝트 권한이 부여되었습니다.`);\r\n    } catch (error) {\r\n      console.error('대량 권한 부여 실패:', error);\r\n      toast.error('대량 권한 부여에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    permissions,\r\n    loading,\r\n    error,\r\n    grantPermission,\r\n    updatePermission,\r\n    revokePermission,\r\n    getUserPermission,\r\n    getPermissionsByRole,\r\n    getExpiredPermissions,\r\n    getExpiringPermissions,\r\n    getPermissionStats,\r\n    grantBulkPermissions,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useProjects.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'writeBatch' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 13
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'writeBatch' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1283, 1286], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1283, 1286], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 79,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 79,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2215, 2251], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 143,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 143,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4429, 4465], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 155,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 155,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4806, 4809], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4806, 4809], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 181,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 181,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5850, 5888], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 200,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 200,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6389, 6425], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 220,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 220,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6967, 7009], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\r\nimport {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  onSnapshot,\r\n  Timestamp,\r\n  writeBatch,\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\nimport { useAuth } from './useAuth';\r\nimport {\r\n  Project,\r\n  CreateProjectInput,\r\n  UpdateProjectInput,\r\n  ProjectStatus,\r\n  ProjectPriority,\r\n  FIRESTORE_COLLECTIONS,\r\n} from '../types/team';\r\nimport { toast } from '../utils/toast';\r\n\r\nexport const useProjects = (teamId?: string) => {\r\n  const { user } = useAuth();\r\n  const [projects, setProjects] = useState<Project[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // 프로젝트 목록 로드\r\n  useEffect(() => {\r\n    if (!user || !teamId) {\r\n      setProjects([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const projectsQuery = query(\r\n      collection(db, FIRESTORE_COLLECTIONS.PROJECTS),\r\n      where('teamId', '==', teamId),\r\n      where('isActive', '==', true),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n\r\n    const unsubscribe = onSnapshot(\r\n      projectsQuery,\r\n      snapshot => {\r\n        const projectsData = snapshot.docs.map(doc => {\r\n          const data = doc.data() as any;\r\n          return {\r\n            id: doc.id,\r\n            name: data.name,\r\n            description: data.description,\r\n            teamId: data.teamId,\r\n            ownerId: data.ownerId,\r\n            status: data.status,\r\n            priority: data.priority,\r\n            startDate: data.startDate?.toDate(),\r\n            endDate: data.endDate?.toDate(),\r\n            budget: data.budget,\r\n            tags: data.tags || [],\r\n            memberCount: data.memberCount || 0,\r\n            taskCount: data.taskCount || 0,\r\n            completedTaskCount: data.completedTaskCount || 0,\r\n            progress: data.progress || 0,\r\n            isActive: data.isActive,\r\n            createdAt: data.createdAt.toDate(),\r\n            updatedAt: data.updatedAt.toDate(),\r\n          } as Project;\r\n        });\r\n        setProjects(projectsData);\r\n        setLoading(false);\r\n        setError(null);\r\n      },\r\n      error => {\r\n        console.error('프로젝트 로드 실패:', error);\r\n        setError('프로젝트를 불러오는데 실패했습니다.');\r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    return unsubscribe;\r\n  }, [user, teamId]);\r\n\r\n  // 프로젝트 생성\r\n  const createProject = async (input: CreateProjectInput): Promise<Project> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const now = Timestamp.now();\r\n      const projectRef = doc(collection(db, FIRESTORE_COLLECTIONS.PROJECTS));\r\n\r\n      const projectData = {\r\n        id: projectRef.id,\r\n        name: input.name,\r\n        description: input.description || '',\r\n        teamId: input.teamId,\r\n        ownerId: user.id,\r\n        status: input.status || ProjectStatus.PLANNING,\r\n        priority: input.priority || ProjectPriority.MEDIUM,\r\n        startDate: input.startDate ? Timestamp.fromDate(input.startDate) : null,\r\n        endDate: input.endDate ? Timestamp.fromDate(input.endDate) : null,\r\n        budget: input.budget || 0,\r\n        tags: input.tags || [],\r\n        memberCount: 1, // 생성자 포함\r\n        taskCount: 0,\r\n        completedTaskCount: 0,\r\n        progress: 0,\r\n        isActive: true,\r\n        createdAt: now,\r\n        updatedAt: now,\r\n      };\r\n\r\n      await addDoc(collection(db, FIRESTORE_COLLECTIONS.PROJECTS), projectData);\r\n\r\n      const createdProject: Project = {\r\n        id: projectRef.id,\r\n        name: projectData.name,\r\n        description: projectData.description,\r\n        teamId: projectData.teamId,\r\n        ownerId: projectData.ownerId,\r\n        status: projectData.status,\r\n        priority: projectData.priority,\r\n        startDate: projectData.startDate?.toDate(),\r\n        endDate: projectData.endDate?.toDate(),\r\n        budget: projectData.budget,\r\n        tags: projectData.tags,\r\n        memberCount: projectData.memberCount,\r\n        taskCount: projectData.taskCount,\r\n        completedTaskCount: projectData.completedTaskCount,\r\n        progress: projectData.progress,\r\n        isActive: projectData.isActive,\r\n        createdAt: projectData.createdAt.toDate(),\r\n        updatedAt: projectData.updatedAt.toDate(),\r\n      };\r\n\r\n      toast.success(`프로젝트 \"${input.name}\"이 생성되었습니다.`);\r\n      return createdProject;\r\n    } catch (error) {\r\n      console.error('프로젝트 생성 실패:', error);\r\n      toast.error('프로젝트 생성에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 프로젝트 업데이트\r\n  const updateProject = async (input: UpdateProjectInput): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const projectRef = doc(db, FIRESTORE_COLLECTIONS.PROJECTS, input.id);\r\n      const updateData: any = {\r\n        updatedAt: Timestamp.now(),\r\n      };\r\n\r\n      if (input.name !== undefined) updateData.name = input.name;\r\n      if (input.description !== undefined)\r\n        updateData.description = input.description;\r\n      if (input.status !== undefined) updateData.status = input.status;\r\n      if (input.priority !== undefined) updateData.priority = input.priority;\r\n      if (input.startDate !== undefined) {\r\n        updateData.startDate = input.startDate\r\n          ? Timestamp.fromDate(input.startDate)\r\n          : null;\r\n      }\r\n      if (input.endDate !== undefined) {\r\n        updateData.endDate = input.endDate\r\n          ? Timestamp.fromDate(input.endDate)\r\n          : null;\r\n      }\r\n      if (input.budget !== undefined) updateData.budget = input.budget;\r\n      if (input.tags !== undefined) updateData.tags = input.tags;\r\n      if (input.isActive !== undefined) updateData.isActive = input.isActive;\r\n\r\n      await updateDoc(projectRef, updateData);\r\n      toast.success('프로젝트가 업데이트되었습니다.');\r\n    } catch (error) {\r\n      console.error('프로젝트 업데이트 실패:', error);\r\n      toast.error('프로젝트 업데이트에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 프로젝트 삭제 (소프트 삭제)\r\n  const deleteProject = async (projectId: string): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const projectRef = doc(db, FIRESTORE_COLLECTIONS.PROJECTS, projectId);\r\n      await updateDoc(projectRef, {\r\n        isActive: false,\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n\r\n      toast.success('프로젝트가 삭제되었습니다.');\r\n    } catch (error) {\r\n      console.error('프로젝트 삭제 실패:', error);\r\n      toast.error('프로젝트 삭제에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 프로젝트 진행률 업데이트\r\n  const updateProjectProgress = async (\r\n    projectId: string,\r\n    progress: number\r\n  ): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const projectRef = doc(db, FIRESTORE_COLLECTIONS.PROJECTS, projectId);\r\n      await updateDoc(projectRef, {\r\n        progress: Math.max(0, Math.min(100, progress)), // 0-100 범위로 제한\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n    } catch (error) {\r\n      console.error('프로젝트 진행률 업데이트 실패:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 프로젝트 상태별 필터링\r\n  const getProjectsByStatus = (status: ProjectStatus): Project[] => {\r\n    return projects.filter(project => project.status === status);\r\n  };\r\n\r\n  // 프로젝트 우선순위별 필터링\r\n  const getProjectsByPriority = (priority: ProjectPriority): Project[] => {\r\n    return projects.filter(project => project.priority === priority);\r\n  };\r\n\r\n  // 프로젝트 검색\r\n  const searchProjects = (searchTerm: string): Project[] => {\r\n    const term = searchTerm.toLowerCase();\r\n    return projects.filter(\r\n      project =>\r\n        project.name.toLowerCase().includes(term) ||\r\n        project.description?.toLowerCase().includes(term) ||\r\n        project.tags.some(tag => tag.toLowerCase().includes(term))\r\n    );\r\n  };\r\n\r\n  // 사용자가 소유한 프로젝트\r\n  const getOwnedProjects = (): Project[] => {\r\n    if (!user) return [];\r\n    return projects.filter(project => project.ownerId === user.id);\r\n  };\r\n\r\n  // 프로젝트 통계\r\n  const getProjectStats = () => {\r\n    const totalProjects = projects.length;\r\n    const activeProjects = projects.filter(\r\n      p => p.status === ProjectStatus.ACTIVE\r\n    ).length;\r\n    const completedProjects = projects.filter(\r\n      p => p.status === ProjectStatus.COMPLETED\r\n    ).length;\r\n    const onHoldProjects = projects.filter(\r\n      p => p.status === ProjectStatus.ON_HOLD\r\n    ).length;\r\n    const averageProgress =\r\n      totalProjects > 0\r\n        ? projects.reduce((sum, p) => sum + p.progress, 0) / totalProjects\r\n        : 0;\r\n\r\n    return {\r\n      totalProjects,\r\n      activeProjects,\r\n      completedProjects,\r\n      onHoldProjects,\r\n      averageProgress: Math.round(averageProgress),\r\n    };\r\n  };\r\n\r\n  return {\r\n    projects,\r\n    loading,\r\n    error,\r\n    createProject,\r\n    updateProject,\r\n    deleteProject,\r\n    updateProjectProgress,\r\n    getProjectsByStatus,\r\n    getProjectsByPriority,\r\n    searchProjects,\r\n    getOwnedProjects,\r\n    getProjectStats,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useTaskAuth.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 16,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 16,
        "endColumn": 5,
        "fix": { "range": [432, 436], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `role·===·TeamRole.OWNER·||·role·===·TeamRole.ADMIN·||·role·===·TeamRole.EDITOR` with `(⏎······role·===·TeamRole.OWNER·||⏎······role·===·TeamRole.ADMIN·||⏎······role·===·TeamRole.EDITOR⏎····)`",
        "line": 18,
        "column": 12,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 18,
        "endColumn": 90,
        "fix": {
          "range": [494, 572],
          "text": "(\n      role === TeamRole.OWNER ||\n      role === TeamRole.ADMIN ||\n      role === TeamRole.EDITOR\n    )"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 23,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 23,
        "endColumn": 5,
        "fix": { "range": [676, 680], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 25,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 25,
        "endColumn": 5,
        "fix": { "range": [727, 731], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 28,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 28,
        "endColumn": 5,
        "fix": { "range": [835, 839], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 33,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 33,
        "endColumn": 5,
        "fix": { "range": [983, 987], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 40,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 40,
        "endColumn": 5,
        "fix": { "range": [1125, 1129], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 42,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 42,
        "endColumn": 5,
        "fix": { "range": [1176, 1180], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 45,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 45,
        "endColumn": 5,
        "fix": { "range": [1284, 1288], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 50,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 50,
        "endColumn": 5,
        "fix": { "range": [1404, 1408], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 57,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 57,
        "endColumn": 5,
        "fix": { "range": [1536, 1540], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `role·===·TeamRole.OWNER·||·role·===·TeamRole.ADMIN·||·role·===·TeamRole.EDITOR` with `(⏎······role·===·TeamRole.OWNER·||⏎······role·===·TeamRole.ADMIN·||⏎······role·===·TeamRole.EDITOR⏎····)`",
        "line": 59,
        "column": 12,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 59,
        "endColumn": 90,
        "fix": {
          "range": [1598, 1676],
          "text": "(\n      role === TeamRole.OWNER ||\n      role === TeamRole.ADMIN ||\n      role === TeamRole.EDITOR\n    )"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 64,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 64,
        "endColumn": 5,
        "fix": { "range": [1773, 1777], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 72,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 72,
        "endColumn": 5,
        "fix": { "range": [1982, 1986], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 74,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 74,
        "endColumn": 5,
        "fix": { "range": [2033, 2037], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 77,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 77,
        "endColumn": 5,
        "fix": { "range": [2141, 2145], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `····`",
        "line": 82,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 82,
        "endColumn": 5,
        "fix": { "range": [2259, 2263], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `⏎`",
        "line": 116,
        "column": 3,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 116,
        "endColumn": 3,
        "fix": { "range": [2974, 2974], "text": "\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 18,
    "fixableWarningCount": 0,
    "source": "import { useAuth } from './useAuth';\nimport { useTeams } from './useTeams';\nimport { Task, TeamRole } from '../types/team';\n\n/**\n * 태스크에 대한 팀 역할 기반 권한 확인 hook\n * - 간단한 팀 역할 기반 권한 확인\n * - OWNER > ADMIN > EDITOR > VIEWER 계층 구조\n */\nexport const useTaskAuth = () => {\n  const { user } = useAuth();\n  const { currentTeam, getUserRole } = useTeams();\n\n  const canCreateTask = (): boolean => {\n    if (!currentTeam || !user) return false;\n    \n    const role = getUserRole(currentTeam.id);\n    return role === TeamRole.OWNER || role === TeamRole.ADMIN || role === TeamRole.EDITOR;\n  };\n\n  const canUpdateTask = (task: Task): boolean => {\n    if (!currentTeam || !user) return false;\n    \n    const role = getUserRole(currentTeam.id);\n    \n    // 소유자와 관리자는 모든 태스크 수정 가능\n    if (role === TeamRole.OWNER || role === TeamRole.ADMIN) return true;\n    \n    // 편집자는 자신의 태스크만 수정 가능\n    if (role === TeamRole.EDITOR) {\n      return task.assigneeId === user.uid || task.createdBy === user.uid;\n    }\n    \n    // 뷰어는 수정 불가\n    return false;\n  };\n\n  const canDeleteTask = (task: Task): boolean => {\n    if (!currentTeam || !user) return false;\n    \n    const role = getUserRole(currentTeam.id);\n    \n    // 소유자와 관리자는 모든 태스크 삭제 가능\n    if (role === TeamRole.OWNER || role === TeamRole.ADMIN) return true;\n    \n    // 편집자는 자신이 생성한 태스크만 삭제 가능\n    if (role === TeamRole.EDITOR) {\n      return task.createdBy === user.uid;\n    }\n    \n    // 뷰어는 삭제 불가\n    return false;\n  };\n\n  const canAssignTask = (): boolean => {\n    if (!currentTeam || !user) return false;\n    \n    const role = getUserRole(currentTeam.id);\n    return role === TeamRole.OWNER || role === TeamRole.ADMIN || role === TeamRole.EDITOR;\n  };\n\n  const canCommentOnTask = (): boolean => {\n    if (!currentTeam || !user) return false;\n    \n    const role = getUserRole(currentTeam.id);\n    // 모든 팀원은 댓글 가능 (뷰어 포함)\n    return role !== null;\n  };\n\n  const canCompleteTask = (task: Task): boolean => {\n    if (!currentTeam || !user) return false;\n    \n    const role = getUserRole(currentTeam.id);\n    \n    // 소유자와 관리자는 모든 태스크 완료 가능\n    if (role === TeamRole.OWNER || role === TeamRole.ADMIN) return true;\n    \n    // 편집자는 담당자인 경우에만 완료 가능\n    if (role === TeamRole.EDITOR) {\n      return task.assigneeId === user.uid;\n    }\n    \n    // 뷰어는 완료 불가\n    return false;\n  };\n\n  // 현재 사용자의 팀 역할 반환\n  const getCurrentUserRole = (): TeamRole | null => {\n    if (!currentTeam || !user) return null;\n    return getUserRole(currentTeam.id);\n  };\n\n  // 현재 사용자가 태스크의 소유자인지 확인\n  const isTaskOwner = (task: Task): boolean => {\n    if (!user) return false;\n    return task.createdBy === user.uid;\n  };\n\n  // 현재 사용자가 태스크의 담당자인지 확인\n  const isTaskAssignee = (task: Task): boolean => {\n    if (!user) return false;\n    return task.assigneeId === user.uid;\n  };\n\n  return {\n    canCreateTask,\n    canUpdateTask,\n    canDeleteTask,\n    canAssignTask,\n    canCommentOnTask,\n    canCompleteTask,\n    getCurrentUserRole,\n    isTaskOwner,\n    isTaskAssignee,\n  };\n};",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useTaskPermissions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'User' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 7
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'User' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1319, 1322], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1319, 1322], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 72,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 72,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [1969, 2006], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 140,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 140,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4008, 4045], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 162,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 162,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4536, 4539], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4536, 4539], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 188,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 188,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5397, 5436], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 219,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 219,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6245, 6282], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 229,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 229,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6513, 6516], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6513, 6516], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 249,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 249,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [7131, 7171], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 328,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 328,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [9526, 9560], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 389,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 389,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [11280, 11317], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\r\nimport {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  onSnapshot,\r\n  Timestamp,\r\n  writeBatch,\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\nimport { useAuth } from './useAuth';\r\nimport {\r\n  TaskPermission,\r\n  CreateTaskPermissionInput,\r\n  UpdateTaskPermissionInput,\r\n  TaskRole,\r\n  FIRESTORE_COLLECTIONS,\r\n  User,\r\n} from '../types/team';\r\nimport { toast } from '../utils/toast';\r\n\r\nexport const useTaskPermissions = (taskId: string) => {\r\n  const { user } = useAuth();\r\n  const [permissions, setPermissions] = useState<TaskPermission[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // 작업 권한 목록 로드\r\n  useEffect(() => {\r\n    if (!taskId) {\r\n      setPermissions([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const permissionsQuery = query(\r\n      collection(db, FIRESTORE_COLLECTIONS.TASK_PERMISSIONS),\r\n      where('taskId', '==', taskId),\r\n      where('isActive', '==', true),\r\n      orderBy('grantedAt', 'desc')\r\n    );\r\n\r\n    const unsubscribe = onSnapshot(\r\n      permissionsQuery,\r\n      snapshot => {\r\n        const permissionsData = snapshot.docs.map(doc => {\r\n          const data = doc.data() as any;\r\n          return {\r\n            id: doc.id,\r\n            taskId: data.taskId,\r\n            userId: data.userId,\r\n            role: data.role,\r\n            permissions: data.permissions || [],\r\n            grantedBy: data.grantedBy,\r\n            grantedAt: data.grantedAt.toDate(),\r\n            expiresAt: data.expiresAt?.toDate(),\r\n            isActive: data.isActive,\r\n            createdAt: data.createdAt.toDate(),\r\n            updatedAt: data.updatedAt.toDate(),\r\n          } as TaskPermission;\r\n        });\r\n        setPermissions(permissionsData);\r\n        setLoading(false);\r\n        setError(null);\r\n      },\r\n      error => {\r\n        console.error('작업 권한 로드 실패:', error);\r\n        setError('작업 권한을 불러오는데 실패했습니다.');\r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    return unsubscribe;\r\n  }, [taskId]);\r\n\r\n  // 작업 권한 부여\r\n  const grantPermission = async (\r\n    input: CreateTaskPermissionInput\r\n  ): Promise<TaskPermission> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      // 기존 권한이 있는지 확인\r\n      const existingPermission = permissions.find(\r\n        p => p.userId === input.userId\r\n      );\r\n      if (existingPermission) {\r\n        throw new Error('해당 사용자에게 이미 권한이 부여되어 있습니다.');\r\n      }\r\n\r\n      const now = Timestamp.now();\r\n      const permissionRef = doc(\r\n        collection(db, FIRESTORE_COLLECTIONS.TASK_PERMISSIONS)\r\n      );\r\n\r\n      const permissionData = {\r\n        id: permissionRef.id,\r\n        taskId: input.taskId,\r\n        userId: input.userId,\r\n        role: input.role,\r\n        permissions: input.permissions || [],\r\n        grantedBy: user.id,\r\n        grantedAt: now,\r\n        expiresAt: input.expiresAt ? Timestamp.fromDate(input.expiresAt) : null,\r\n        isActive: true,\r\n        createdAt: now,\r\n        updatedAt: now,\r\n      };\r\n\r\n      await addDoc(\r\n        collection(db, FIRESTORE_COLLECTIONS.TASK_PERMISSIONS),\r\n        permissionData\r\n      );\r\n\r\n      const createdPermission: TaskPermission = {\r\n        id: permissionRef.id,\r\n        taskId: permissionData.taskId,\r\n        userId: permissionData.userId,\r\n        role: permissionData.role,\r\n        permissions: permissionData.permissions,\r\n        grantedBy: permissionData.grantedBy,\r\n        grantedAt: permissionData.grantedAt.toDate(),\r\n        expiresAt: permissionData.expiresAt?.toDate(),\r\n        isActive: permissionData.isActive,\r\n        createdAt: permissionData.createdAt.toDate(),\r\n        updatedAt: permissionData.updatedAt.toDate(),\r\n      };\r\n\r\n      // 감사 로그 작성\r\n      await logPermissionChange('GRANTED', createdPermission);\r\n\r\n      toast.success('작업 권한이 부여되었습니다.');\r\n      return createdPermission;\r\n    } catch (error) {\r\n      console.error('작업 권한 부여 실패:', error);\r\n      toast.error(\r\n        error instanceof Error\r\n          ? error.message\r\n          : '작업 권한 부여에 실패했습니다.'\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 작업 권한 업데이트\r\n  const updatePermission = async (\r\n    input: UpdateTaskPermissionInput\r\n  ): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const permissionRef = doc(\r\n        db,\r\n        FIRESTORE_COLLECTIONS.TASK_PERMISSIONS,\r\n        input.id\r\n      );\r\n      const updateData: any = {\r\n        updatedAt: Timestamp.now(),\r\n      };\r\n\r\n      const existingPermission = permissions.find(p => p.id === input.id);\r\n      if (!existingPermission) {\r\n        throw new Error('권한을 찾을 수 없습니다.');\r\n      }\r\n\r\n      if (input.role !== undefined) updateData.role = input.role;\r\n      if (input.permissions !== undefined)\r\n        updateData.permissions = input.permissions;\r\n      if (input.expiresAt !== undefined) {\r\n        updateData.expiresAt = input.expiresAt\r\n          ? Timestamp.fromDate(input.expiresAt)\r\n          : null;\r\n      }\r\n      if (input.isActive !== undefined) updateData.isActive = input.isActive;\r\n\r\n      await updateDoc(permissionRef, updateData);\r\n\r\n      // 감사 로그 작성\r\n      await logPermissionChange('MODIFIED', existingPermission, updateData);\r\n\r\n      toast.success('작업 권한이 업데이트되었습니다.');\r\n    } catch (error) {\r\n      console.error('작업 권한 업데이트 실패:', error);\r\n      toast.error('작업 권한 업데이트에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 작업 권한 취소\r\n  const revokePermission = async (permissionId: string): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const existingPermission = permissions.find(p => p.id === permissionId);\r\n      if (!existingPermission) {\r\n        throw new Error('권한을 찾을 수 없습니다.');\r\n      }\r\n\r\n      const permissionRef = doc(\r\n        db,\r\n        FIRESTORE_COLLECTIONS.TASK_PERMISSIONS,\r\n        permissionId\r\n      );\r\n      await updateDoc(permissionRef, {\r\n        isActive: false,\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n\r\n      // 감사 로그 작성\r\n      await logPermissionChange('REVOKED', existingPermission);\r\n\r\n      toast.success('작업 권한이 취소되었습니다.');\r\n    } catch (error) {\r\n      console.error('작업 권한 취소 실패:', error);\r\n      toast.error('작업 권한 취소에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 권한 변경 로그 작성\r\n  const logPermissionChange = async (\r\n    action: 'GRANTED' | 'REVOKED' | 'MODIFIED',\r\n    permission: TaskPermission,\r\n    newData?: any\r\n  ) => {\r\n    try {\r\n      const logData = {\r\n        action,\r\n        resourceType: 'TASK',\r\n        resourceId: permission.taskId,\r\n        userId: permission.userId,\r\n        grantedBy: user!.id,\r\n        previousPermissions: permission.permissions,\r\n        newPermissions: newData?.permissions || permission.permissions,\r\n        reason: `권한 ${action === 'GRANTED' ? '부여' : action === 'REVOKED' ? '취소' : '수정'}`,\r\n        createdAt: Timestamp.now(),\r\n      };\r\n\r\n      await addDoc(\r\n        collection(db, FIRESTORE_COLLECTIONS.PERMISSION_AUDIT_LOG),\r\n        logData\r\n      );\r\n    } catch (error) {\r\n      console.error('권한 변경 로그 작성 실패:', error);\r\n      // 로그 작성 실패는 주요 작업을 방해하지 않음\r\n    }\r\n  };\r\n\r\n  // 사용자별 권한 조회\r\n  const getUserPermission = (userId: string): TaskPermission | null => {\r\n    return permissions.find(p => p.userId === userId && p.isActive) || null;\r\n  };\r\n\r\n  // 역할별 권한 조회\r\n  const getPermissionsByRole = (role: TaskRole): TaskPermission[] => {\r\n    return permissions.filter(p => p.role === role && p.isActive);\r\n  };\r\n\r\n  // 만료된 권한 조회\r\n  const getExpiredPermissions = (): TaskPermission[] => {\r\n    const now = new Date();\r\n    return permissions.filter(\r\n      p => p.isActive && p.expiresAt && p.expiresAt < now\r\n    );\r\n  };\r\n\r\n  // 곧 만료될 권한 조회 (7일 내)\r\n  const getExpiringPermissions = (): TaskPermission[] => {\r\n    const now = new Date();\r\n    const sevenDaysFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\r\n\r\n    return permissions.filter(\r\n      p =>\r\n        p.isActive &&\r\n        p.expiresAt &&\r\n        p.expiresAt > now &&\r\n        p.expiresAt <= sevenDaysFromNow\r\n    );\r\n  };\r\n\r\n  // 권한 통계\r\n  const getPermissionStats = () => {\r\n    const totalPermissions = permissions.filter(p => p.isActive).length;\r\n    const roleStats = {\r\n      [TaskRole.ASSIGNEE]: getPermissionsByRole(TaskRole.ASSIGNEE).length,\r\n      [TaskRole.REVIEWER]: getPermissionsByRole(TaskRole.REVIEWER).length,\r\n      [TaskRole.COLLABORATOR]: getPermissionsByRole(TaskRole.COLLABORATOR)\r\n        .length,\r\n      [TaskRole.WATCHER]: getPermissionsByRole(TaskRole.WATCHER).length,\r\n    };\r\n    const expiredCount = getExpiredPermissions().length;\r\n    const expiringCount = getExpiringPermissions().length;\r\n\r\n    return {\r\n      totalPermissions,\r\n      roleStats,\r\n      expiredCount,\r\n      expiringCount,\r\n    };\r\n  };\r\n\r\n  // 특정 역할의 담당자 지정 (ASSIGNEE의 경우 단일 사용자만 가능)\r\n  const assignRole = async (userId: string, role: TaskRole): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      // ASSIGNEE의 경우 기존 담당자 제거\r\n      if (role === TaskRole.ASSIGNEE) {\r\n        const existingAssignees = getPermissionsByRole(TaskRole.ASSIGNEE);\r\n        for (const assignee of existingAssignees) {\r\n          await revokePermission(assignee.id);\r\n        }\r\n      }\r\n\r\n      // 새로운 권한 부여\r\n      const input: CreateTaskPermissionInput = {\r\n        taskId,\r\n        userId,\r\n        role,\r\n      };\r\n      await grantPermission(input);\r\n    } catch (error) {\r\n      console.error('역할 지정 실패:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // 담당자 변경 (ASSIGNEE 전용)\r\n  const changeAssignee = async (newAssigneeId: string): Promise<void> => {\r\n    await assignRole(newAssigneeId, TaskRole.ASSIGNEE);\r\n  };\r\n\r\n  // 리뷰어 추가\r\n  const addReviewer = async (reviewerId: string): Promise<void> => {\r\n    await assignRole(reviewerId, TaskRole.REVIEWER);\r\n  };\r\n\r\n  // 협업자 추가\r\n  const addCollaborator = async (collaboratorId: string): Promise<void> => {\r\n    await assignRole(collaboratorId, TaskRole.COLLABORATOR);\r\n  };\r\n\r\n  // 관찰자 추가\r\n  const addWatcher = async (watcherId: string): Promise<void> => {\r\n    await assignRole(watcherId, TaskRole.WATCHER);\r\n  };\r\n\r\n  // 대량 권한 부여\r\n  const grantBulkPermissions = async (\r\n    inputs: CreateTaskPermissionInput[]\r\n  ): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const batch = writeBatch(db);\r\n      const now = Timestamp.now();\r\n\r\n      inputs.forEach(input => {\r\n        const permissionRef = doc(\r\n          collection(db, FIRESTORE_COLLECTIONS.TASK_PERMISSIONS)\r\n        );\r\n        const permissionData = {\r\n          id: permissionRef.id,\r\n          taskId: input.taskId,\r\n          userId: input.userId,\r\n          role: input.role,\r\n          permissions: input.permissions || [],\r\n          grantedBy: user.id,\r\n          grantedAt: now,\r\n          expiresAt: input.expiresAt\r\n            ? Timestamp.fromDate(input.expiresAt)\r\n            : null,\r\n          isActive: true,\r\n          createdAt: now,\r\n          updatedAt: now,\r\n        };\r\n\r\n        batch.set(permissionRef, permissionData);\r\n      });\r\n\r\n      await batch.commit();\r\n      toast.success(`${inputs.length}명에게 작업 권한이 부여되었습니다.`);\r\n    } catch (error) {\r\n      console.error('대량 권한 부여 실패:', error);\r\n      toast.error('대량 권한 부여에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    permissions,\r\n    loading,\r\n    error,\r\n    grantPermission,\r\n    updatePermission,\r\n    revokePermission,\r\n    getUserPermission,\r\n    getPermissionsByRole,\r\n    getExpiredPermissions,\r\n    getExpiringPermissions,\r\n    getPermissionStats,\r\n    assignRole,\r\n    changeAssignee,\r\n    addReviewer,\r\n    addCollaborator,\r\n    addWatcher,\r\n    grantBulkPermissions,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useTasks.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 85,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 85,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2245, 2286], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 151,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 151,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3992, 3995], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3992, 3995], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport {\n  collection,\n  doc,\n  getDocs,\n  getDoc,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  limit,\n  serverTimestamp,\n} from 'firebase/firestore';\nimport { firestore } from '../config/firebase';\nimport { useAuth } from './useAuth';\nimport {\n  Task,\n  TaskStatus,\n  CreateTaskInput,\n  UpdateTaskInput,\n} from '@almus/shared-types';\n\nexport interface TaskQueryParams {\n  teamId: string;\n  projectId?: string;\n  status?: TaskStatus;\n  assigneeId?: string;\n  limit?: number;\n}\n\n// Task 목록 조회 훅 (실제 Firestore 사용)\nexport const useTasks = (params?: TaskQueryParams) => {\n  const { user } = useAuth();\n\n  return useQuery({\n    queryKey: ['tasks', params],\n    queryFn: async (): Promise<Task[]> => {\n      if (!user) throw new Error('인증이 필요합니다.');\n      if (!params?.teamId) throw new Error('팀 ID가 필요합니다.');\n\n      try {\n        let q = query(\n          collection(firestore, 'tasks'),\n          where('teamId', '==', params.teamId)\n        );\n\n        if (params.projectId) {\n          q = query(q, where('projectId', '==', params.projectId));\n        }\n\n        if (params.status) {\n          q = query(q, where('status', '==', params.status));\n        }\n\n        if (params.assigneeId) {\n          q = query(q, where('assigneeId', '==', params.assigneeId));\n        }\n\n        // orderBy 제거 - Firestore 인덱스가 필요하므로 임시로 제거\n        // q = query(q, orderBy('createdAt', 'desc'));\n\n        if (params.limit) {\n          q = query(q, limit(params.limit));\n        }\n\n        const snapshot = await getDocs(q);\n        const tasks = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n          createdAt: doc.data().createdAt?.toDate(),\n          updatedAt: doc.data().updatedAt?.toDate(),\n          dueDate: doc.data().dueDate?.toDate(),\n          startDate: doc.data().startDate?.toDate(),\n          endDate: doc.data().endDate?.toDate(),\n        })) as Task[];\n\n        // 클라이언트 측에서 생성일 기준 내림차순 정렬\n        return tasks.sort((a, b) => {\n          const dateA = a.createdAt || new Date(0);\n          const dateB = b.createdAt || new Date(0);\n          return dateB.getTime() - dateA.getTime();\n        });\n      } catch (error) {\n        console.error('Firestore 조회 오류:', error);\n        // Firestore 오류 시 빈 배열 반환\n        return [];\n      }\n    },\n    enabled: !!user && !!params?.teamId,\n  });\n};\n\n// Task 생성 훅 (실제 Firestore 사용)\nexport const useCreateTask = () => {\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  return useMutation({\n    mutationFn: async (task: CreateTaskInput): Promise<Task> => {\n      if (!user) throw new Error('인증이 필요합니다.');\n\n      const taskData = {\n        ...task,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n        createdBy: user.uid,\n      };\n\n      const docRef = await addDoc(collection(firestore, 'tasks'), taskData);\n      const newDoc = await getDoc(docRef);\n\n      return {\n        id: docRef.id,\n        ...newDoc.data(),\n        createdAt: newDoc.data()?.createdAt?.toDate(),\n        updatedAt: newDoc.data()?.updatedAt?.toDate(),\n        dueDate: newDoc.data()?.dueDate?.toDate(),\n      } as Task;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n    },\n  });\n};\n\n// Task 업데이트 훅 (실제 Firestore 사용)\nexport const useUpdateTask = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      id,\n      updates,\n    }: {\n      id: string;\n      updates: UpdateTaskInput;\n    }): Promise<void> => {\n      const taskRef = doc(firestore, 'tasks', id);\n      await updateDoc(taskRef, {\n        ...updates,\n        updatedAt: serverTimestamp(),\n      });\n    },\n    onMutate: async ({ id, updates }) => {\n      // 낙관적 업데이트 - 즉시 UI 반영\n      await queryClient.cancelQueries({ queryKey: ['tasks'] });\n\n      const previousTasks = queryClient.getQueryData(['tasks']);\n\n      queryClient.setQueryData(['tasks'], (old: any) => {\n        if (!old) return old;\n\n        return old.map((task: Task) =>\n          task.id === id ? { ...task, ...updates, updatedAt: new Date() } : task\n        );\n      });\n\n      return { previousTasks };\n    },\n    onError: (err, variables, context) => {\n      // 오류 발생 시 이전 상태로 복원\n      if (context?.previousTasks) {\n        queryClient.setQueryData(['tasks'], context.previousTasks);\n      }\n    },\n    onSuccess: () => {\n      // 성공 시에만 서버 데이터로 동기화 (딜레이 추가)\n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: ['tasks'] });\n      }, 100);\n    },\n  });\n};\n\n// Task 삭제 훅 (실제 Firestore 사용)\nexport const useDeleteTask = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (taskId: string): Promise<void> => {\n      const taskRef = doc(firestore, 'tasks', taskId);\n      await deleteDoc(taskRef);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n    },\n  });\n};\n\n// Task 상세 조회 훅 (실제 Firestore 사용)\nexport const useTask = (taskId: string) => {\n  return useQuery({\n    queryKey: ['task', taskId],\n    queryFn: async (): Promise<Task | null> => {\n      const taskRef = doc(firestore, 'tasks', taskId);\n      const taskDoc = await getDoc(taskRef);\n\n      if (!taskDoc.exists()) {\n        return null;\n      }\n\n      return {\n        id: taskDoc.id,\n        ...taskDoc.data(),\n        createdAt: taskDoc.data().createdAt?.toDate(),\n        updatedAt: taskDoc.data().updatedAt?.toDate(),\n        dueDate: taskDoc.data().dueDate?.toDate(),\n      } as Task;\n    },\n    enabled: !!taskId,\n  });\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useTasksOptimized.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1028, 1031], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1028, 1031], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  useQuery,\n  useMutation,\n  useQueryClient,\n  useInfiniteQuery,\n} from '@tanstack/react-query';\nimport {\n  collection,\n  doc,\n  getDocs,\n  getDoc,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit,\n  startAfter,\n} from 'firebase/firestore';\nimport { firestore } from '../config/firebase';\nimport { useAuth } from './useAuth';\nimport {\n  Task,\n  TaskStatus,\n  TaskPriority,\n  CreateTaskInput,\n  UpdateTaskInput,\n} from '@almus/shared-types';\n\nexport interface TaskFilters {\n  status?: TaskStatus;\n  priority?: TaskPriority;\n  assigneeId?: string;\n  projectId?: string;\n  search?: string;\n}\n\nconst PAGE_SIZE = 20;\n\nexport const useTasksOptimized = (filters: TaskFilters = {}) => {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // 무한 스크롤을 위한 Task 목록 조회\n  const {\n    data: tasksData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    error,\n  } = useInfiniteQuery({\n    queryKey: ['tasks', 'infinite', filters],\n    initialPageParam: null as any,\n    queryFn: async ({ pageParam = null }) => {\n      if (!user?.teamId) throw new Error('팀 정보가 없습니다.');\n\n      let q = query(\n        collection(firestore, 'tasks'),\n        where('teamId', '==', user.teamId),\n        orderBy('createdAt', 'desc'),\n        limit(PAGE_SIZE)\n      );\n\n      // 필터 적용\n      if (filters.status) {\n        q = query(q, where('status', '==', filters.status));\n      }\n      if (filters.priority) {\n        q = query(q, where('priority', '==', filters.priority));\n      }\n      if (filters.assigneeId) {\n        q = query(q, where('assigneeId', '==', filters.assigneeId));\n      }\n      if (filters.projectId) {\n        q = query(q, where('projectId', '==', filters.projectId));\n      }\n\n      // 페이지네이션\n      if (pageParam) {\n        q = query(q, startAfter(pageParam));\n      }\n\n      const snapshot = await getDocs(q);\n      const tasks = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        createdAt: doc.data().createdAt?.toDate(),\n        updatedAt: doc.data().updatedAt?.toDate(),\n        dueDate: doc.data().dueDate?.toDate(),\n        startDate: doc.data().startDate?.toDate(),\n        endDate: doc.data().endDate?.toDate(),\n      })) as Task[];\n\n      // 검색 필터링 (클라이언트 사이드)\n      let filteredTasks = tasks;\n      if (filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        filteredTasks = tasks.filter(\n          task =>\n            task.title.toLowerCase().includes(searchLower) ||\n            task.description?.toLowerCase().includes(searchLower)\n        );\n      }\n\n      return {\n        tasks: filteredTasks,\n        nextCursor: snapshot.docs[snapshot.docs.length - 1],\n        hasMore: snapshot.docs.length === PAGE_SIZE,\n      };\n    },\n    getNextPageParam: lastPage => lastPage.nextCursor,\n    enabled: !!user?.teamId,\n    staleTime: 5 * 60 * 1000, // 5분\n    gcTime: 10 * 60 * 1000, // 10분\n  });\n\n  // 모든 Task를 평면화\n  const allTasks = tasksData?.pages.flatMap(page => page.tasks) || [];\n\n  // Task 생성\n  const createTaskMutation = useMutation({\n    mutationFn: async (taskData: CreateTaskInput) => {\n      if (!user?.teamId) throw new Error('팀 정보가 없습니다.');\n\n      const task = {\n        ...taskData,\n        teamId: user.teamId,\n        createdBy: user.uid,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        version: 1,\n      };\n\n      const docRef = await addDoc(collection(firestore, 'tasks'), task);\n      return { id: docRef.id, ...task };\n    },\n    onSuccess: () => {\n      // 관련 쿼리 무효화\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n    },\n  });\n\n  // Task 업데이트\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({\n      taskId,\n      data,\n    }: {\n      taskId: string;\n      data: UpdateTaskInput;\n    }) => {\n      const taskRef = doc(firestore, 'tasks', taskId);\n      const updateData = {\n        ...data,\n        updatedAt: new Date(),\n      };\n\n      await updateDoc(taskRef, updateData);\n      return { ...updateData };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n    },\n  });\n\n  // Task 삭제\n  const deleteTaskMutation = useMutation({\n    mutationFn: async (taskId: string) => {\n      const taskRef = doc(firestore, 'tasks', taskId);\n      await deleteDoc(taskRef);\n      return taskId;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n    },\n  });\n\n  // 단일 Task 조회 (캐시 최적화)\n  const useTask = (taskId: string) => {\n    return useQuery({\n      queryKey: ['task', taskId],\n      queryFn: async () => {\n        const taskDoc = await getDoc(doc(firestore, 'tasks', taskId));\n        if (!taskDoc.exists()) {\n          throw new Error('Task를 찾을 수 없습니다.');\n        }\n\n        const data = taskDoc.data();\n        return {\n          id: taskDoc.id,\n          ...data,\n          createdAt: data.createdAt?.toDate(),\n          updatedAt: data.updatedAt?.toDate(),\n          dueDate: data.dueDate?.toDate(),\n          startDate: data.startDate?.toDate(),\n          endDate: data.endDate?.toDate(),\n        } as Task;\n      },\n      enabled: !!taskId,\n      staleTime: 2 * 60 * 1000, // 2분\n      gcTime: 5 * 60 * 1000, // 5분\n    });\n  };\n\n  // Task 통계 (캐시 최적화)\n  const useTaskStats = () => {\n    return useQuery({\n      queryKey: ['taskStats', user?.teamId],\n      queryFn: async () => {\n        if (!user?.teamId) throw new Error('팀 정보가 없습니다.');\n\n        const stats = {\n          total: 0,\n          todo: 0,\n          inProgress: 0,\n          review: 0,\n          done: 0,\n          overdue: 0,\n        };\n\n        // 각 상태별 개수 조회\n        const statuses = ['TODO', 'IN_PROGRESS', 'REVIEW', 'DONE'] as const;\n        const promises = statuses.map(async status => {\n          const q = query(\n            collection(firestore, 'tasks'),\n            where('teamId', '==', user.teamId),\n            where('status', '==', status)\n          );\n          const snapshot = await getDocs(q);\n          return { status, count: snapshot.size };\n        });\n\n        const results = await Promise.all(promises);\n\n        // 통계 계산\n        results.forEach(({ status, count }) => {\n          stats.total += count;\n          switch (status) {\n            case 'TODO':\n              stats.todo = count;\n              break;\n            case 'IN_PROGRESS':\n              stats.inProgress = count;\n              break;\n            case 'REVIEW':\n              stats.review = count;\n              break;\n            case 'DONE':\n              stats.done = count;\n              break;\n          }\n        });\n\n        // 지연된 Task 개수 계산\n        const overdueQuery = query(\n          collection(firestore, 'tasks'),\n          where('teamId', '==', user.teamId),\n          where('status', '!=', 'DONE')\n        );\n        const overdueSnapshot = await getDocs(overdueQuery);\n        stats.overdue = overdueSnapshot.docs.filter(doc => {\n          const data = doc.data();\n          return data.dueDate && data.dueDate.toDate() < new Date();\n        }).length;\n\n        return stats;\n      },\n      enabled: !!user?.teamId,\n      staleTime: 1 * 60 * 1000, // 1분\n      gcTime: 5 * 60 * 1000, // 5분\n    });\n  };\n\n  return {\n    tasks: allTasks,\n    isLoading,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    createTask: createTaskMutation.mutateAsync,\n    updateTask: updateTaskMutation.mutateAsync,\n    deleteTask: deleteTaskMutation.mutateAsync,\n    useTask,\n    useTaskStats,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useTeamMembers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'deleteDoc' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 174,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 174,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5640, 5677], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 202,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 202,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6581, 6615], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 222,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 222,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [7108, 7142], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 247,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 247,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [7854, 7889], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\r\nimport {\r\n  collection,\r\n  doc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  onSnapshot,\r\n  Timestamp,\r\n  getDoc,\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\nimport {\r\n  TeamMember,\r\n  TeamInvitation,\r\n  TeamRole,\r\n  InvitationStatus,\r\n  FIRESTORE_COLLECTIONS,\r\n  FirestoreTeamMember,\r\n  FirestoreTeamInvitation,\r\n} from '../types/team';\r\nimport { FirestoreUser } from '@almus/shared-types';\r\nimport { toast } from '../utils/toast';\r\n\r\nexport const useTeamMembers = (teamId: string) => {\r\n  const [members, setMembers] = useState<TeamMember[]>([]);\r\n  const [invitations, setInvitations] = useState<TeamInvitation[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!teamId) {\r\n      setMembers([]);\r\n      setInvitations([]);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const unsubscribes: (() => void)[] = [];\r\n    setLoading(true);\r\n\r\n    // Listen to team members\r\n    const membersQuery = query(\r\n      collection(db, FIRESTORE_COLLECTIONS.TEAM_MEMBERS),\r\n      where('teamId', '==', teamId),\r\n      where('isActive', '==', true),\r\n      orderBy('joinedAt', 'asc')\r\n    );\r\n\r\n    const unsubscribeMembers = onSnapshot(membersQuery, async snapshot => {\r\n      const memberPromises = snapshot.docs.map(async memberDoc => {\r\n        const memberData = memberDoc.data() as FirestoreTeamMember;\r\n\r\n        // Fetch user data\r\n        const userDoc = await getDoc(\r\n          doc(db, FIRESTORE_COLLECTIONS.USERS, memberData.userId)\r\n        );\r\n        const userData = userDoc.exists()\r\n          ? (userDoc.data() as FirestoreUser)\r\n          : null;\r\n\r\n        return {\r\n          id: memberDoc.id,\r\n          teamId: memberData.teamId,\r\n          userId: memberData.userId,\r\n          role: memberData.role,\r\n          joinedAt: memberData.joinedAt.toDate(),\r\n          invitedBy: memberData.invitedBy,\r\n          isActive: memberData.isActive,\r\n          user: userData\r\n            ? {\r\n                id: userData.id,\r\n                email: userData.email,\r\n                name: userData.name,\r\n                role: userData.role,\r\n                avatar: userData.avatar,\r\n                currentTeamId: userData.currentTeamId,\r\n                isActive: userData.isActive,\r\n                lastLoginAt: userData.lastLoginAt?.toDate(),\r\n                createdAt: userData.createdAt.toDate(),\r\n                updatedAt: userData.updatedAt.toDate(),\r\n              }\r\n            : undefined,\r\n        } as TeamMember;\r\n      });\r\n\r\n      const resolvedMembers = await Promise.all(memberPromises);\r\n      setMembers(resolvedMembers);\r\n      setLoading(false);\r\n    });\r\n\r\n    unsubscribes.push(unsubscribeMembers);\r\n\r\n    // Listen to team invitations\r\n    const invitationsQuery = query(\r\n      collection(db, FIRESTORE_COLLECTIONS.TEAM_INVITATIONS),\r\n      where('teamId', '==', teamId),\r\n      where('status', '==', InvitationStatus.PENDING),\r\n      orderBy('createdAt', 'desc')\r\n    );\r\n\r\n    const unsubscribeInvitations = onSnapshot(\r\n      invitationsQuery,\r\n      async snapshot => {\r\n        const invitationPromises = snapshot.docs.map(async invitationDoc => {\r\n          const invitationData =\r\n            invitationDoc.data() as FirestoreTeamInvitation;\r\n\r\n          // Fetch inviter user data\r\n          const inviterDoc = await getDoc(\r\n            doc(db, FIRESTORE_COLLECTIONS.USERS, invitationData.invitedBy)\r\n          );\r\n          const inviterData = inviterDoc.exists()\r\n            ? (inviterDoc.data() as FirestoreUser)\r\n            : null;\r\n\r\n          return {\r\n            id: invitationDoc.id,\r\n            teamId: invitationData.teamId,\r\n            email: invitationData.email,\r\n            role: invitationData.role,\r\n            token: invitationData.token,\r\n            invitedBy: invitationData.invitedBy,\r\n            message: invitationData.message,\r\n            expiresAt: invitationData.expiresAt.toDate(),\r\n            acceptedAt: invitationData.acceptedAt?.toDate(),\r\n            rejectedAt: invitationData.rejectedAt?.toDate(),\r\n            status: invitationData.status as InvitationStatus,\r\n            createdAt: invitationData.createdAt.toDate(),\r\n            updatedAt: invitationData.updatedAt.toDate(),\r\n            invitedByUser: inviterData\r\n              ? {\r\n                  id: inviterData.id,\r\n                  email: inviterData.email,\r\n                  name: inviterData.name,\r\n                  role: inviterData.role,\r\n                  avatar: inviterData.avatar,\r\n                  currentTeamId: inviterData.currentTeamId,\r\n                  isActive: inviterData.isActive,\r\n                  lastLoginAt: inviterData.lastLoginAt?.toDate(),\r\n                  createdAt: inviterData.createdAt.toDate(),\r\n                  updatedAt: inviterData.updatedAt.toDate(),\r\n                }\r\n              : undefined,\r\n          } as TeamInvitation;\r\n        });\r\n\r\n        const resolvedInvitations = await Promise.all(invitationPromises);\r\n        setInvitations(resolvedInvitations);\r\n      }\r\n    );\r\n\r\n    unsubscribes.push(unsubscribeInvitations);\r\n\r\n    return () => {\r\n      unsubscribes.forEach(unsub => unsub());\r\n    };\r\n  }, [teamId]);\r\n\r\n  const updateMemberRole = async (\r\n    memberId: string,\r\n    newRole: TeamRole\r\n  ): Promise<void> => {\r\n    try {\r\n      const memberRef = doc(db, FIRESTORE_COLLECTIONS.TEAM_MEMBERS, memberId);\r\n      await updateDoc(memberRef, {\r\n        role: newRole,\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n\r\n      toast.success('멤버 역할이 변경되었습니다.');\r\n    } catch (error) {\r\n      console.error('멤버 역할 변경 실패:', error);\r\n      toast.error('멤버 역할 변경에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const removeMember = async (memberId: string): Promise<void> => {\r\n    try {\r\n      const memberRef = doc(db, FIRESTORE_COLLECTIONS.TEAM_MEMBERS, memberId);\r\n      await updateDoc(memberRef, {\r\n        isActive: false,\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n\r\n      // Also need to update team member count\r\n      // This would be better handled by Cloud Functions in production\r\n      const teamRef = doc(db, FIRESTORE_COLLECTIONS.TEAMS, teamId);\r\n      const teamDoc = await getDoc(teamRef);\r\n      if (teamDoc.exists()) {\r\n        const currentCount = teamDoc.data().memberCount || 0;\r\n        await updateDoc(teamRef, {\r\n          memberCount: Math.max(0, currentCount - 1),\r\n          updatedAt: Timestamp.now(),\r\n        });\r\n      }\r\n\r\n      toast.success('멤버가 팀에서 제거되었습니다.');\r\n    } catch (error) {\r\n      console.error('멤버 제거 실패:', error);\r\n      toast.error('멤버 제거에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const cancelInvitation = async (invitationId: string): Promise<void> => {\r\n    try {\r\n      const invitationRef = doc(\r\n        db,\r\n        FIRESTORE_COLLECTIONS.TEAM_INVITATIONS,\r\n        invitationId\r\n      );\r\n      await updateDoc(invitationRef, {\r\n        status: InvitationStatus.CANCELLED,\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n\r\n      toast.success('초대가 취소되었습니다.');\r\n    } catch (error) {\r\n      console.error('초대 취소 실패:', error);\r\n      toast.error('초대 취소에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const resendInvitation = async (invitationId: string): Promise<void> => {\r\n    try {\r\n      // Extend expiration date by 7 days\r\n      const newExpirationDate = new Date();\r\n      newExpirationDate.setDate(newExpirationDate.getDate() + 7);\r\n\r\n      const invitationRef = doc(\r\n        db,\r\n        FIRESTORE_COLLECTIONS.TEAM_INVITATIONS,\r\n        invitationId\r\n      );\r\n      await updateDoc(invitationRef, {\r\n        expiresAt: Timestamp.fromDate(newExpirationDate),\r\n        updatedAt: Timestamp.now(),\r\n      });\r\n\r\n      // TODO: Send invitation email again\r\n      toast.success('초대장이 다시 전송되었습니다.');\r\n    } catch (error) {\r\n      console.error('초대 재전송 실패:', error);\r\n      toast.error('초대 재전송에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getMemberByUserId = (userId: string): TeamMember | undefined => {\r\n    return members.find(member => member.userId === userId);\r\n  };\r\n\r\n  const getMemberRole = (userId: string): TeamRole | null => {\r\n    const member = getMemberByUserId(userId);\r\n    return member?.role || null;\r\n  };\r\n\r\n  const isMember = (userId: string): boolean => {\r\n    return members.some(member => member.userId === userId && member.isActive);\r\n  };\r\n\r\n  const getMemberCount = (): number => {\r\n    return members.filter(member => member.isActive).length;\r\n  };\r\n\r\n  const getMembersByRole = (role: TeamRole): TeamMember[] => {\r\n    return members.filter(member => member.role === role && member.isActive);\r\n  };\r\n\r\n  const getPendingInvitationsCount = (): number => {\r\n    return invitations.filter(inv => inv.status === InvitationStatus.PENDING)\r\n      .length;\r\n  };\r\n\r\n  return {\r\n    members,\r\n    invitations,\r\n    loading,\r\n    updateMemberRole,\r\n    removeMember,\r\n    cancelInvitation,\r\n    resendInvitation,\r\n    getMemberByUserId,\r\n    getMemberRole,\r\n    isMember,\r\n    getMemberCount,\r\n    getMembersByRole,\r\n    getPendingInvitationsCount,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useTeams.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 91,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 91,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2834, 2837], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2834, 2837], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4872, 4875], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4872, 4875], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 199,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 199,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6420, 6423], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6420, 6423], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 228,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 228,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7391, 7394], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7391, 7394], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 288,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 288,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9277, 9280], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9277, 9280], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 290,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 290,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9373, 9376], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9373, 9376], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\r\nimport {\r\n  collection,\r\n  doc,\r\n  updateDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  onSnapshot,\r\n  Timestamp,\r\n  writeBatch,\r\n} from 'firebase/firestore';\r\nimport { httpsCallable } from 'firebase/functions';\r\nimport { db, functions } from '../config/firebase';\r\nimport { useAuth } from './useAuth';\r\nimport {\r\n  Team,\r\n  TeamMember,\r\n  CreateTeamInput,\r\n  UpdateTeamInput,\r\n  InviteTeamMemberInput,\r\n  TeamRole,\r\n  FIRESTORE_COLLECTIONS,\r\n  FirestoreTeam,\r\n  FirestoreTeamMember,\r\n} from '../types/team';\r\nimport { toast } from '../utils/toast';\r\n\r\nexport const useTeams = () => {\r\n  const { user, updateUser } = useAuth();\r\n  const [teams, setTeams] = useState<Team[]>([]);\r\n  const [userTeams, setUserTeams] = useState<TeamMember[]>([]);\r\n  const [currentTeam, setCurrentTeam] = useState<Team | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Load teams that user is a member of\r\n  useEffect(() => {\r\n    if (!user) {\r\n      setTeams([]);\r\n      setUserTeams([]);\r\n      setCurrentTeam(null);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const unsubscribes: (() => void)[] = [];\r\n\r\n    // Listen to user's team memberships\r\n    const teamMembersQuery = query(\r\n      collection(db, FIRESTORE_COLLECTIONS.TEAM_MEMBERS),\r\n      where('userId', '==', user.id),\r\n      where('isActive', '==', true),\r\n      orderBy('joinedAt', 'desc')\r\n    );\r\n\r\n    const unsubscribeMembers = onSnapshot(teamMembersQuery, snapshot => {\r\n      const memberships = snapshot.docs.map(doc => {\r\n        const data = doc.data() as FirestoreTeamMember;\r\n        return {\r\n          id: doc.id,\r\n          teamId: data.teamId,\r\n          userId: data.userId,\r\n          role: data.role,\r\n          joinedAt: data.joinedAt.toDate(),\r\n          invitedBy: data.invitedBy,\r\n          isActive: data.isActive,\r\n        } as TeamMember;\r\n      });\r\n      setUserTeams(memberships);\r\n\r\n      // Load teams for these memberships\r\n      if (memberships.length > 0) {\r\n        const teamIds = memberships.map(m => m.teamId);\r\n        const teamsQuery = query(\r\n          collection(db, FIRESTORE_COLLECTIONS.TEAMS),\r\n          where('__name__', 'in', teamIds)\r\n        );\r\n\r\n        const unsubscribeTeams = onSnapshot(teamsQuery, teamsSnapshot => {\r\n          const teamsData = teamsSnapshot.docs.map(doc => {\r\n            const data = doc.data() as FirestoreTeam;\r\n            return {\r\n              id: doc.id,\r\n              name: data.name,\r\n              description: data.description,\r\n              ownerId: data.ownerId,\r\n              memberCount: data.memberCount,\r\n              settings: {\r\n                isPublic: data.settings.isPublic,\r\n                allowInvitations: data.settings.allowInvitations,\r\n                defaultMemberRole: data.settings.defaultMemberRole as any,\r\n                maxMembers: data.settings.maxMembers,\r\n                timeZone: data.settings.timeZone,\r\n                language: data.settings.language,\r\n                features: data.settings.features,\r\n              },\r\n              isActive: data.isActive,\r\n              createdAt: data.createdAt.toDate(),\r\n              updatedAt: data.updatedAt.toDate(),\r\n            } as Team;\r\n          });\r\n          setTeams(teamsData);\r\n\r\n          // Set current team if not set\r\n          if (!currentTeam && user.currentTeamId) {\r\n            const current = teamsData.find(t => t.id === user.currentTeamId);\r\n            if (current) {\r\n              setCurrentTeam(current);\r\n            }\r\n          } else if (!currentTeam && teamsData.length > 0) {\r\n            // Set first team as current if no current team is set\r\n            setCurrentTeam(teamsData[0]);\r\n            updateUser({ currentTeamId: teamsData[0].id });\r\n          }\r\n\r\n          setLoading(false);\r\n        });\r\n\r\n        unsubscribes.push(unsubscribeTeams);\r\n      } else {\r\n        setTeams([]);\r\n        setCurrentTeam(null);\r\n        setLoading(false);\r\n      }\r\n    });\r\n\r\n    unsubscribes.push(unsubscribeMembers);\r\n\r\n    return () => {\r\n      unsubscribes.forEach(unsub => unsub());\r\n    };\r\n  }, [user, currentTeam, updateUser]);\r\n\r\n  const createTeam = async (input: CreateTeamInput): Promise<Team> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    const batch = writeBatch(db);\r\n    const now = Timestamp.now();\r\n\r\n    // Create team document\r\n    const teamRef = doc(collection(db, FIRESTORE_COLLECTIONS.TEAMS));\r\n    const teamData: FirestoreTeam = {\r\n      id: teamRef.id,\r\n      name: input.name,\r\n      description: input.description,\r\n      ownerId: user.id,\r\n      memberCount: 1,\r\n      settings: {\r\n        isPublic: input.settings?.isPublic || false,\r\n        allowInvitations: input.settings?.allowInvitations ?? true,\r\n        defaultMemberRole: (input.settings?.defaultMemberRole ||\r\n          TeamRole.EDITOR) as any,\r\n        maxMembers: input.settings?.maxMembers || 50,\r\n        timeZone:\r\n          input.settings?.timeZone ||\r\n          Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        language: input.settings?.language || 'ko',\r\n        features: {\r\n          ganttView: input.settings?.features?.ganttView ?? true,\r\n          timeTracking: input.settings?.features?.timeTracking ?? false,\r\n          advancedReporting:\r\n            input.settings?.features?.advancedReporting ?? false,\r\n          customFields: input.settings?.features?.customFields ?? false,\r\n          integrations: input.settings?.features?.integrations ?? false,\r\n        },\r\n      },\r\n      isActive: true,\r\n      createdAt: now,\r\n      updatedAt: now,\r\n    };\r\n    batch.set(teamRef, teamData);\r\n\r\n    // Add owner as team member (with predictable ID)\r\n    const memberRef = doc(\r\n      db,\r\n      FIRESTORE_COLLECTIONS.TEAM_MEMBERS,\r\n      `${teamRef.id}_${user.id}`\r\n    );\r\n    const memberData: FirestoreTeamMember = {\r\n      id: memberRef.id,\r\n      teamId: teamRef.id,\r\n      userId: user.id,\r\n      role: TeamRole.OWNER,\r\n      joinedAt: now,\r\n      isActive: true,\r\n    };\r\n    batch.set(memberRef, memberData);\r\n\r\n    await batch.commit();\r\n\r\n    const createdTeam: Team = {\r\n      id: teamRef.id,\r\n      name: teamData.name,\r\n      description: teamData.description,\r\n      ownerId: teamData.ownerId,\r\n      memberCount: teamData.memberCount,\r\n      settings: {\r\n        ...teamData.settings,\r\n        defaultMemberRole: teamData.settings.defaultMemberRole as any,\r\n      },\r\n      isActive: teamData.isActive,\r\n      createdAt: teamData.createdAt.toDate(),\r\n      updatedAt: teamData.updatedAt.toDate(),\r\n    };\r\n\r\n    // Set as current team if it's the user's first team\r\n    if (teams.length === 0) {\r\n      setCurrentTeam(createdTeam);\r\n      await updateUser({ currentTeamId: createdTeam.id });\r\n    }\r\n\r\n    toast.success(`팀 \"${input.name}\"이 생성되었습니다.`);\r\n    return createdTeam;\r\n  };\r\n\r\n  const updateTeam = async (input: UpdateTeamInput): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    const teamRef = doc(db, FIRESTORE_COLLECTIONS.TEAMS, input.id);\r\n    const updateData: Partial<FirestoreTeam> = {\r\n      updatedAt: Timestamp.now(),\r\n    };\r\n\r\n    if (input.name !== undefined) updateData.name = input.name;\r\n    if (input.description !== undefined)\r\n      updateData.description = input.description;\r\n    if (input.settings !== undefined)\r\n      updateData.settings = input.settings as any;\r\n    if (input.isActive !== undefined) updateData.isActive = input.isActive;\r\n\r\n    await updateDoc(teamRef, updateData);\r\n    toast.success('팀 설정이 업데이트되었습니다.');\r\n  };\r\n\r\n  const deleteTeam = async (teamId: string): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    const batch = writeBatch(db);\r\n\r\n    // Delete team\r\n    const teamRef = doc(db, FIRESTORE_COLLECTIONS.TEAMS, teamId);\r\n    batch.delete(teamRef);\r\n\r\n    // Note: In a real implementation, you'd want to get the members first\r\n    // and then delete them in the batch. This is a simplified version.\r\n    await batch.commit();\r\n\r\n    // If this was the current team, switch to another team\r\n    if (currentTeam?.id === teamId) {\r\n      const otherTeam = teams.find(t => t.id !== teamId);\r\n      if (otherTeam) {\r\n        setCurrentTeam(otherTeam);\r\n        await updateUser({ currentTeamId: otherTeam.id });\r\n      } else {\r\n        setCurrentTeam(null);\r\n        await updateUser({ currentTeamId: undefined });\r\n      }\r\n    }\r\n\r\n    toast.success('팀이 삭제되었습니다.');\r\n  };\r\n\r\n  const switchTeam = async (teamId: string): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    const team = teams.find(t => t.id === teamId);\r\n    if (!team) throw new Error('팀을 찾을 수 없습니다');\r\n\r\n    setCurrentTeam(team);\r\n    await updateUser({ currentTeamId: teamId });\r\n    toast.success(`\"${team.name}\" 팀으로 전환되었습니다.`);\r\n  };\r\n\r\n  const inviteTeamMember = async (\r\n    input: InviteTeamMemberInput\r\n  ): Promise<void> => {\r\n    if (!user) throw new Error('사용자가 로그인되어 있지 않습니다');\r\n\r\n    try {\r\n      const inviteFunction = httpsCallable(functions, 'inviteTeamMember');\r\n      const result = await inviteFunction({\r\n        teamId: input.teamId,\r\n        email: input.email,\r\n        role: input.role,\r\n        message: input.message,\r\n      });\r\n\r\n      const data = result.data as any;\r\n      toast.success(data.message || `${input.email}에게 초대장을 보냈습니다.`);\r\n    } catch (error: any) {\r\n      throw new Error(error.message || '멤버 초대에 실패했습니다.');\r\n    }\r\n  };\r\n\r\n  const getUserRole = (teamId: string): TeamRole | null => {\r\n    const membership = userTeams.find(ut => ut.teamId === teamId);\r\n    return membership?.role || null;\r\n  };\r\n\r\n  const canManageTeam = (teamId: string): boolean => {\r\n    const team = teams.find(t => t.id === teamId);\r\n    if (!team || !user) return false;\r\n\r\n    if (team.ownerId === user.id) return true;\r\n\r\n    const role = getUserRole(teamId);\r\n    return role === TeamRole.ADMIN;\r\n  };\r\n\r\n  return {\r\n    teams,\r\n    userTeams,\r\n    currentTeam,\r\n    loading,\r\n    createTeam,\r\n    updateTeam,\r\n    deleteTeam,\r\n    switchTeam,\r\n    inviteTeamMember,\r\n    getUserRole,\r\n    canManageTeam,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\hooks\\useUserPresence.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3107, 3110], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3107, 3110], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 105,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 105,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3149, 3152], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3149, 3152], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 118,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 118,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3476, 3530], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 241,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 241,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6702, 6705], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6702, 6705], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 258,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 258,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [7224, 7276], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 280,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 280,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8029, 8032], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8029, 8032], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 290,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 290,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [8243, 8295], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 322,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 322,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [9176, 9234], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 431,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 431,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12055, 12058], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12055, 12058], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 452,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 452,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12714, 12717], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12714, 12717], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 512,
        "column": 18,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 512,
        "endColumn": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useAuth } from './useAuth';\r\nimport { useWebSocket } from '../services/websocket';\r\nimport type { UserPresence } from '../services/websocket';\r\nimport type {\r\n  FirestoreUserPresence,\r\n  PresenceStatus,\r\n} from '@almus/shared-types';\r\nimport {\r\n  doc,\r\n  setDoc,\r\n  getDoc,\r\n  onSnapshot,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  collection,\r\n  query,\r\n  where,\r\n  getDocs,\r\n} from 'firebase/firestore';\r\nimport { db } from '../lib/firebase';\r\n\r\ninterface UseUserPresenceOptions {\r\n  enableAutoUpdate?: boolean;\r\n  updateInterval?: number;\r\n  enableRealtime?: boolean;\r\n}\r\n\r\ninterface UseUserPresenceReturn {\r\n  currentUserPresence: UserPresence | null;\r\n  onlineUsers: UserPresence[];\r\n  isOnline: boolean;\r\n  updateStatus: (\r\n    status: PresenceStatus,\r\n    customStatus?: string\r\n  ) => Promise<void>;\r\n  updateCursor: (position: {\r\n    line: number;\r\n    column: number;\r\n    fieldPath?: string;\r\n  }) => void;\r\n  updateSelection: (selection: {\r\n    start: { line: number; column: number; fieldPath?: string };\r\n    end: { line: number; column: number; fieldPath?: string };\r\n  }) => void;\r\n  setTyping: (isTyping: boolean, resourceId?: string) => void;\r\n  getPresenceByUserId: (userId: string) => UserPresence | null;\r\n  refreshPresence: () => Promise<void>;\r\n}\r\n\r\nexport const useUserPresence = ({\r\n  enableAutoUpdate = true,\r\n  updateInterval = 30000, // 30초\r\n  enableRealtime = true,\r\n}: UseUserPresenceOptions = {}): UseUserPresenceReturn => {\r\n  const { user } = useAuth();\r\n  const websocket = useWebSocket();\r\n\r\n  const [currentUserPresence, setCurrentUserPresence] =\r\n    useState<UserPresence | null>(null);\r\n  const [onlineUsers, setOnlineUsers] = useState<UserPresence[]>([]);\r\n  const [isOnline, setIsOnline] = useState(false);\r\n\r\n  const lastActivityRef = useRef<number>(Date.now());\r\n  const heartbeatIntervalRef = useRef<number | null>(null);\r\n  const presenceUnsubscribeRef = useRef<(() => void) | null>(null);\r\n\r\n  // Firestore 사용자 상태를 UserPresence로 변환\r\n  const transformFirestorePresence = useCallback(\r\n    (data: FirestoreUserPresence): UserPresence => {\r\n      return {\r\n        userId: data.userId,\r\n        status: data.status,\r\n        cursor: data.currentResource\r\n          ? {\r\n              line: 0,\r\n              column: 0,\r\n              fieldPath: data.currentResource.type,\r\n            }\r\n          : undefined,\r\n        selection: undefined,\r\n        isTyping: data.isTyping,\r\n        lastActivity:\r\n          data.lastActivity instanceof Timestamp\r\n            ? data.lastActivity.toDate().getTime()\r\n            : Date.now(),\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n  // 현재 사용자 상태 업데이트\r\n  const updateUserPresence = useCallback(\r\n    async (updates: Partial<FirestoreUserPresence>) => {\r\n      if (!user) return;\r\n\r\n      try {\r\n        const presenceRef = doc(db, 'user_presence', user.id);\r\n        const currentTime = serverTimestamp();\r\n\r\n        const presenceData: Partial<FirestoreUserPresence> = {\r\n          ...updates,\r\n          userId: user.id,\r\n          lastActivity: currentTime as any,\r\n          updatedAt: currentTime as any,\r\n        };\r\n\r\n        await setDoc(presenceRef, presenceData, { merge: true });\r\n\r\n        // WebSocket으로도 전송\r\n        if (websocket.isConnected()) {\r\n          websocket.updatePresence(\r\n            updates.status || 'ONLINE',\r\n            updates.customStatus\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error('Error updating user presence:', error);\r\n      }\r\n    },\r\n    [user, websocket]\r\n  );\r\n\r\n  // 상태 업데이트\r\n  const updateStatus = useCallback(\r\n    async (status: PresenceStatus, customStatus?: string) => {\r\n      await updateUserPresence({\r\n        status,\r\n        customStatus,\r\n      });\r\n\r\n      setIsOnline(status === 'ONLINE');\r\n    },\r\n    [updateUserPresence]\r\n  );\r\n\r\n  // 커서 위치 업데이트\r\n  const updateCursor = useCallback(\r\n    (position: { line: number; column: number; fieldPath?: string }) => {\r\n      if (!websocket.isConnected()) return;\r\n\r\n      websocket.updateCursor(position);\r\n      lastActivityRef.current = Date.now();\r\n\r\n      // 로컬 상태 업데이트\r\n      setCurrentUserPresence(prev =>\r\n        prev\r\n          ? {\r\n              ...prev,\r\n              cursor: position,\r\n              lastActivity: Date.now(),\r\n            }\r\n          : null\r\n      );\r\n    },\r\n    [websocket]\r\n  );\r\n\r\n  // 선택 영역 업데이트\r\n  const updateSelection = useCallback(\r\n    (selection: {\r\n      start: { line: number; column: number; fieldPath?: string };\r\n      end: { line: number; column: number; fieldPath?: string };\r\n    }) => {\r\n      if (!websocket.isConnected()) return;\r\n\r\n      websocket.updateSelection(selection);\r\n      lastActivityRef.current = Date.now();\r\n\r\n      // 로컬 상태 업데이트\r\n      setCurrentUserPresence(prev =>\r\n        prev\r\n          ? {\r\n              ...prev,\r\n              selection,\r\n              lastActivity: Date.now(),\r\n            }\r\n          : null\r\n      );\r\n    },\r\n    [websocket]\r\n  );\r\n\r\n  // 타이핑 상태 설정\r\n  const setTyping = useCallback(\r\n    (isTyping: boolean, resourceId?: string) => {\r\n      if (!websocket.isConnected()) return;\r\n\r\n      websocket.setTyping(isTyping, resourceId);\r\n\r\n      // Firestore에도 업데이트\r\n      updateUserPresence({\r\n        isTyping,\r\n        typingInResource: isTyping ? resourceId : undefined,\r\n      });\r\n\r\n      // 로컬 상태 업데이트\r\n      setCurrentUserPresence(prev =>\r\n        prev\r\n          ? {\r\n              ...prev,\r\n              isTyping,\r\n              lastActivity: Date.now(),\r\n            }\r\n          : null\r\n      );\r\n    },\r\n    [websocket, updateUserPresence]\r\n  );\r\n\r\n  // 특정 사용자의 상태 조회\r\n  const getPresenceByUserId = useCallback(\r\n    (userId: string): UserPresence | null => {\r\n      return onlineUsers.find(user => user.userId === userId) || null;\r\n    },\r\n    [onlineUsers]\r\n  );\r\n\r\n  // 온라인 사용자 목록 로드\r\n  const loadOnlineUsers = useCallback(async () => {\r\n    try {\r\n      if (enableRealtime) {\r\n        // 실시간 리스너 설정\r\n        const presenceQuery = query(\r\n          collection(db, 'user_presence'),\r\n          where('status', 'in', ['ONLINE', 'AWAY', 'BUSY'])\r\n        );\r\n\r\n        const unsubscribe = onSnapshot(\r\n          presenceQuery,\r\n          snapshot => {\r\n            const users: UserPresence[] = [];\r\n\r\n            snapshot.docs.forEach(doc => {\r\n              const data = doc.data() as FirestoreUserPresence;\r\n              // 5분 이내에 활동한 사용자만 온라인으로 간주\r\n              const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n              const lastActivity =\r\n                data.lastActivity instanceof Timestamp\r\n                  ? data.lastActivity.toDate()\r\n                  : new Date(data.lastActivity as any);\r\n\r\n              if (lastActivity > fiveMinutesAgo) {\r\n                users.push(transformFirestorePresence(data));\r\n              }\r\n            });\r\n\r\n            setOnlineUsers(users);\r\n\r\n            // 현재 사용자 상태 업데이트\r\n            if (user) {\r\n              const currentUser = users.find(u => u.userId === user.id);\r\n              setCurrentUserPresence(currentUser || null);\r\n              setIsOnline(currentUser?.status === 'ONLINE' || false);\r\n            }\r\n          },\r\n          error => {\r\n            console.error('Error loading online users:', error);\r\n          }\r\n        );\r\n\r\n        presenceUnsubscribeRef.current = unsubscribe;\r\n        return unsubscribe;\r\n      } else {\r\n        // 일회성 로드\r\n        const presenceQuery = query(\r\n          collection(db, 'user_presence'),\r\n          where('status', 'in', ['ONLINE', 'AWAY', 'BUSY'])\r\n        );\r\n\r\n        const snapshot = await getDocs(presenceQuery);\r\n        const users: UserPresence[] = [];\r\n\r\n        snapshot.docs.forEach(doc => {\r\n          const data = doc.data() as FirestoreUserPresence;\r\n          const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);\r\n          const lastActivity =\r\n            data.lastActivity instanceof Timestamp\r\n              ? data.lastActivity.toDate()\r\n              : new Date(data.lastActivity as any);\r\n\r\n          if (lastActivity > fiveMinutesAgo) {\r\n            users.push(transformFirestorePresence(data));\r\n          }\r\n        });\r\n\r\n        setOnlineUsers(users);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading online users:', error);\r\n    }\r\n  }, [user, enableRealtime, transformFirestorePresence]);\r\n\r\n  // 사용자 상태 초기화\r\n  const initializeUserPresence = useCallback(async () => {\r\n    if (!user) return;\r\n\r\n    try {\r\n      // 현재 상태 확인\r\n      const presenceRef = doc(db, 'user_presence', user.id);\r\n      const presenceDoc = await getDoc(presenceRef);\r\n\r\n      let currentStatus: PresenceStatus = 'ONLINE';\r\n      let customStatus: string | undefined;\r\n\r\n      if (presenceDoc.exists()) {\r\n        const data = presenceDoc.data() as FirestoreUserPresence;\r\n        currentStatus = data.status;\r\n        customStatus = data.customStatus;\r\n      }\r\n\r\n      // 온라인 상태로 업데이트\r\n      await updateUserPresence({\r\n        status: currentStatus,\r\n        customStatus,\r\n        isTyping: false,\r\n        typingInResource: undefined,\r\n      });\r\n\r\n      setIsOnline(currentStatus === 'ONLINE');\r\n    } catch (error) {\r\n      console.error('Error initializing user presence:', error);\r\n    }\r\n  }, [user, updateUserPresence]);\r\n\r\n  // 활동 감지 및 하트비트\r\n  const startHeartbeat = useCallback(() => {\r\n    if (heartbeatIntervalRef.current) {\r\n      clearInterval(heartbeatIntervalRef.current);\r\n    }\r\n\r\n    heartbeatIntervalRef.current = window.setInterval(async () => {\r\n      if (!user) return;\r\n\r\n      const now = Date.now();\r\n      const timeSinceLastActivity = now - lastActivityRef.current;\r\n\r\n      // 5분 이상 비활성 상태면 AWAY로 변경\r\n      let newStatus: PresenceStatus = 'ONLINE';\r\n      if (timeSinceLastActivity > 5 * 60 * 1000) {\r\n        newStatus = 'AWAY';\r\n      }\r\n\r\n      await updateUserPresence({\r\n        status: newStatus,\r\n      });\r\n\r\n      setIsOnline(newStatus === 'ONLINE');\r\n    }, updateInterval);\r\n  }, [user, updateInterval, updateUserPresence]);\r\n\r\n  // 활동 감지 이벤트 리스너\r\n  const setupActivityListeners = useCallback(() => {\r\n    const updateActivity = () => {\r\n      lastActivityRef.current = Date.now();\r\n    };\r\n\r\n    const events = [\r\n      'mousedown',\r\n      'mousemove',\r\n      'keypress',\r\n      'scroll',\r\n      'touchstart',\r\n      'click',\r\n    ];\r\n\r\n    events.forEach(event => {\r\n      document.addEventListener(event, updateActivity, { passive: true });\r\n    });\r\n\r\n    return () => {\r\n      events.forEach(event => {\r\n        document.removeEventListener(event, updateActivity);\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  // 페이지 가시성 변경 감지\r\n  const setupVisibilityListener = useCallback(() => {\r\n    const handleVisibilityChange = async () => {\r\n      if (!user) return;\r\n\r\n      if (document.hidden) {\r\n        // 페이지가 숨겨짐 - AWAY 상태로 변경\r\n        await updateUserPresence({\r\n          status: 'AWAY',\r\n        });\r\n        setIsOnline(false);\r\n      } else {\r\n        // 페이지가 다시 보임 - ONLINE 상태로 변경\r\n        await updateUserPresence({\r\n          status: 'ONLINE',\r\n        });\r\n        setIsOnline(true);\r\n        lastActivityRef.current = Date.now();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, [user, updateUserPresence]);\r\n\r\n  // 종료 시 OFFLINE 상태로 변경\r\n  const setupBeforeUnloadListener = useCallback(() => {\r\n    const handleBeforeUnload = async () => {\r\n      if (!user) return;\r\n\r\n      // 브라우저 종료 시 OFFLINE 상태로 변경\r\n      await updateUserPresence({\r\n        status: 'OFFLINE',\r\n      });\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, [user, updateUserPresence]);\r\n\r\n  // 상태 새로고침\r\n  const refreshPresence = useCallback(async () => {\r\n    await loadOnlineUsers();\r\n  }, [loadOnlineUsers]);\r\n\r\n  // WebSocket 이벤트 리스너\r\n  useEffect(() => {\r\n    const handlePresenceUpdated = (data: any) => {\r\n      const updatedPresence = transformFirestorePresence(data);\r\n\r\n      setOnlineUsers(prev => {\r\n        const index = prev.findIndex(u => u.userId === updatedPresence.userId);\r\n        if (index >= 0) {\r\n          const newUsers = [...prev];\r\n          newUsers[index] = updatedPresence;\r\n          return newUsers;\r\n        } else {\r\n          return [...prev, updatedPresence];\r\n        }\r\n      });\r\n\r\n      // 현재 사용자인 경우\r\n      if (user && updatedPresence.userId === user.id) {\r\n        setCurrentUserPresence(updatedPresence);\r\n        setIsOnline(updatedPresence.status === 'ONLINE');\r\n      }\r\n    };\r\n\r\n    const handleUserLeft = (data: any) => {\r\n      setOnlineUsers(prev => prev.filter(u => u.userId !== data.userId));\r\n\r\n      if (user && data.userId === user.id) {\r\n        setCurrentUserPresence(null);\r\n        setIsOnline(false);\r\n      }\r\n    };\r\n\r\n    websocket.on('presence-updated', handlePresenceUpdated);\r\n    websocket.on('user-left', handleUserLeft);\r\n\r\n    return () => {\r\n      websocket.off('presence-updated', handlePresenceUpdated);\r\n      websocket.off('user-left', handleUserLeft);\r\n    };\r\n  }, [websocket, user, transformFirestorePresence]);\r\n\r\n  // 초기화\r\n  useEffect(() => {\r\n    let cleanupFunctions: (() => void)[] = [];\r\n\r\n    const initialize = async () => {\r\n      if (!user) return;\r\n\r\n      // 사용자 상태 초기화\r\n      await initializeUserPresence();\r\n\r\n      // 온라인 사용자 목록 로드\r\n      await loadOnlineUsers();\r\n\r\n      if (enableAutoUpdate) {\r\n        // 하트비트 시작\r\n        startHeartbeat();\r\n\r\n        // 활동 감지 설정\r\n        cleanupFunctions.push(setupActivityListeners());\r\n        cleanupFunctions.push(setupVisibilityListener());\r\n        cleanupFunctions.push(setupBeforeUnloadListener());\r\n      }\r\n    };\r\n\r\n    initialize();\r\n\r\n    return () => {\r\n      // 정리\r\n      if (heartbeatIntervalRef.current) {\r\n        clearInterval(heartbeatIntervalRef.current);\r\n      }\r\n\r\n      if (presenceUnsubscribeRef.current) {\r\n        presenceUnsubscribeRef.current();\r\n      }\r\n\r\n      cleanupFunctions.forEach(cleanup => cleanup());\r\n\r\n      // 오프라인 상태로 변경\r\n      if (user) {\r\n        updateUserPresence({\r\n          status: 'OFFLINE',\r\n        }).catch(console.error);\r\n      }\r\n    };\r\n  }, [\r\n    user,\r\n    enableAutoUpdate,\r\n    initializeUserPresence,\r\n    loadOnlineUsers,\r\n    startHeartbeat,\r\n    setupActivityListeners,\r\n    setupVisibilityListener,\r\n    setupBeforeUnloadListener,\r\n    updateUserPresence,\r\n  ]);\r\n\r\n  return {\r\n    currentUserPresence,\r\n    onlineUsers,\r\n    isOnline,\r\n    updateStatus,\r\n    updateCursor,\r\n    updateSelection,\r\n    setTyping,\r\n    getPresenceByUserId,\r\n    refreshPresence,\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\i18n\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\lib\\firebase.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 1,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 1,
        "endColumn": 10,
        "fix": { "range": [8, 9], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 2,
        "column": 16,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 2,
        "endColumn": 17,
        "fix": { "range": [26, 27], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 3,
        "column": 14,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 3,
        "endColumn": 15,
        "fix": { "range": [42, 43], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 4,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 4,
        "endColumn": 8,
        "fix": { "range": [51, 52], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 5,
        "column": 11,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 5,
        "endColumn": 12,
        "fix": { "range": [64, 65], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 6,
        "endColumn": 11,
        "fix": { "range": [76, 77], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 7,
        "column": 10,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 11,
        "fix": { "range": [88, 89], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 8,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 8,
        "endColumn": 14,
        "fix": { "range": [103, 104], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 9,
        "column": 13,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 9,
        "endColumn": 14,
        "fix": { "range": [118, 119], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 10,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 10,
        "endColumn": 10,
        "fix": { "range": [129, 130], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 11,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 11,
        "endColumn": 10,
        "fix": { "range": [140, 141], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 12,
        "column": 11,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 12,
        "endColumn": 12,
        "fix": { "range": [153, 154], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 13,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 13,
        "endColumn": 10,
        "fix": { "range": [164, 165], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 14,
        "column": 17,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 14,
        "endColumn": 18,
        "fix": { "range": [183, 184], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Delete `·`",
        "line": 15,
        "column": 20,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 15,
        "endColumn": 21,
        "fix": { "range": [205, 206], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 22,
        "column": 14,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 22,
        "endColumn": 14,
        "fix": { "range": [319, 319], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 23,
        "column": 28,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 23,
        "endColumn": 28,
        "fix": { "range": [348, 348], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 24,
        "column": 40,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 24,
        "endColumn": 40,
        "fix": { "range": [389, 389], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 25,
        "column": 37,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 25,
        "endColumn": 37,
        "fix": { "range": [427, 427], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 27,
        "column": 36,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 27,
        "endColumn": 36,
        "fix": { "range": [466, 466], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 28,
        "column": 33,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 28,
        "endColumn": 33,
        "fix": { "range": [500, 500], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `,`",
        "line": 51,
        "column": 22,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 51,
        "endColumn": 22,
        "fix": { "range": [854, 854], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 52,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 52,
        "endColumn": 2,
        "fix": { "range": [857, 857], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 55,
        "column": 55,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 55,
        "endColumn": 55,
        "fix": { "range": [936, 936], "text": ";" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 57,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 57,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [984, 987], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [984, 987], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 59,
        "column": 30,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 59,
        "endColumn": 30,
        "fix": { "range": [1092, 1092], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 62,
        "column": 46,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 62,
        "endColumn": 46,
        "fix": { "range": [1185, 1185], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 64,
        "column": 29,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 64,
        "endColumn": 29,
        "fix": { "range": [1220, 1220], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 65,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 65,
        "endColumn": 2,
        "fix": { "range": [1223, 1223], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 67,
        "column": 53,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 67,
        "endColumn": 53,
        "fix": { "range": [1279, 1279], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `((resolve)` with `(resolve`",
        "line": 70,
        "column": 21,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 70,
        "endColumn": 31,
        "fix": { "range": [1357, 1367], "text": "(resolve" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `(user)` with `user`",
        "line": 71,
        "column": 49,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 71,
        "endColumn": 55,
        "fix": { "range": [1422, 1428], "text": "user" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 72,
        "column": 20,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 72,
        "endColumn": 20,
        "fix": { "range": [1454, 1454], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 73,
        "column": 22,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 73,
        "endColumn": 22,
        "fix": { "range": [1477, 1477], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 74,
        "column": 7,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 74,
        "endColumn": 7,
        "fix": { "range": [1485, 1485], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 75,
        "column": 5,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 75,
        "endColumn": 5,
        "fix": { "range": [1491, 1491], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;␍⏎`",
        "line": 76,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 76,
        "endColumn": 2,
        "fix": { "range": [1494, 1494], "text": ";\r\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 36,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 36,
    "fixableWarningCount": 0,
    "source": "import { \r\n  getFirestore, \r\n  collection, \r\n  doc, \r\n  getDocs, \r\n  getDoc, \r\n  addDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  where, \r\n  orderBy, \r\n  limit, \r\n  QuerySnapshot, \r\n  DocumentSnapshot, \r\n  FirestoreError,\r\n  onSnapshot,\r\n  Timestamp,\r\n  FieldValue,\r\n  serverTimestamp,\r\n  arrayUnion,\r\n  arrayRemove\r\n} from 'firebase/firestore'\r\nimport { getAuth } from 'firebase/auth'\r\nimport app from '../config/firebase'\r\n\r\nexport const db = getFirestore(app)\r\nexport const auth = getAuth(app)\r\n\r\n// Re-export commonly used Firestore functions\r\nexport {\r\n  collection,\r\n  doc,\r\n  getDocs,\r\n  getDoc,\r\n  addDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  limit,\r\n  onSnapshot,\r\n  Timestamp,\r\n  FieldValue,\r\n  serverTimestamp,\r\n  arrayUnion,\r\n  arrayRemove,\r\n  type QuerySnapshot,\r\n  type DocumentSnapshot,\r\n  type FirestoreError\r\n}\r\n\r\n// Helper functions\r\nexport const createTimestamp = () => serverTimestamp()\r\n\r\nexport const convertTimestamp = (timestamp: any): Date => {\r\n  if (timestamp && typeof timestamp.toDate === 'function') {\r\n    return timestamp.toDate()\r\n  }\r\n  if (timestamp && timestamp.seconds) {\r\n    return new Date(timestamp.seconds * 1000)\r\n  }\r\n  return new Date(timestamp)\r\n}\r\n\r\nexport const getCurrentUser = () => auth.currentUser\r\n\r\nexport const waitForAuth = (): Promise<boolean> => {\r\n  return new Promise((resolve) => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      unsubscribe()\r\n      resolve(!!user)\r\n    })\r\n  })\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\lib\\utils.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `\"clsx\"` with `'clsx';`",
        "line": 1,
        "column": 39,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 1,
        "endColumn": 45,
        "fix": { "range": [38, 44], "text": "'clsx';" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `\"tailwind-merge\"` with `'tailwind-merge';`",
        "line": 2,
        "column": 25,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 2,
        "endColumn": 41,
        "fix": { "range": [70, 86], "text": "'tailwind-merge';" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 5,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 5,
        "endColumn": 31,
        "fix": { "range": [167, 167], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 9,
        "column": 36,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 9,
        "endColumn": 36,
        "fix": { "range": [269, 269], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 11,
        "column": 17,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 11,
        "endColumn": 17,
        "fix": { "range": [289, 289], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 12,
        "column": 41,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 12,
        "endColumn": 41,
        "fix": { "range": [331, 331], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 13,
        "column": 74,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 13,
        "endColumn": 74,
        "fix": { "range": [406, 406], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 15,
        "column": 54,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 15,
        "endColumn": 54,
        "fix": { "range": [463, 463], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 17,
        "column": 75,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 17,
        "endColumn": 75,
        "fix": { "range": [541, 541], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 21,
        "column": 61,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 21,
        "endColumn": 61,
        "fix": { "range": [667, 667], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 22,
        "column": 39,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 22,
        "endColumn": 39,
        "fix": { "range": [707, 707], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 26,
        "column": 61,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 26,
        "endColumn": 61,
        "fix": { "range": [833, 833], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 27,
        "column": 79,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 27,
        "endColumn": 79,
        "fix": { "range": [913, 913], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 31,
        "column": 51,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 31,
        "endColumn": 51,
        "fix": { "range": [1033, 1033], "text": ";" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1085, 1088], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1085, 1088], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1095, 1098], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1095, 1098], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 38,
        "column": 34,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 38,
        "endColumn": 34,
        "fix": { "range": [1202, 1202], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 40,
        "column": 26,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 40,
        "endColumn": 26,
        "fix": { "range": [1269, 1269], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 41,
        "column": 59,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 41,
        "endColumn": 59,
        "fix": { "range": [1329, 1329], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 42,
        "column": 4,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 42,
        "endColumn": 4,
        "fix": { "range": [1334, 1334], "text": ";" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1386, 1389], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1386, 1389], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1396, 1399], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1396, 1399], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 49,
        "column": 26,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 49,
        "endColumn": 26,
        "fix": { "range": [1496, 1496], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 52,
        "column": 20,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 52,
        "endColumn": 20,
        "fix": { "range": [1581, 1581], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 53,
        "column": 24,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 53,
        "endColumn": 24,
        "fix": { "range": [1606, 1606], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 54,
        "column": 52,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 54,
        "endColumn": 52,
        "fix": { "range": [1659, 1659], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `;`",
        "line": 56,
        "column": 4,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 56,
        "endColumn": 4,
        "fix": { "range": [1671, 1671], "text": ";" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `␍⏎`",
        "line": 57,
        "column": 2,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 57,
        "endColumn": 2,
        "fix": { "range": [1674, 1674], "text": "\r\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 24,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 24,
    "fixableWarningCount": 0,
    "source": "import { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n\r\nexport function formatBytes(bytes: number, decimals = 2) {\r\n  if (bytes === 0) return '0 Bytes'\r\n\r\n  const k = 1024\r\n  const dm = decimals < 0 ? 0 : decimals\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\r\n}\r\n\r\nexport function formatDate(date: Date | string): string {\r\n  const d = typeof date === 'string' ? new Date(date) : date\r\n  return d.toLocaleDateString('ko-KR')\r\n}\r\n\r\nexport function formatTime(date: Date | string): string {\r\n  const d = typeof date === 'string' ? new Date(date) : date\r\n  return d.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' })\r\n}\r\n\r\nexport function formatDateTime(date: Date | string): string {\r\n  return `${formatDate(date)} ${formatTime(date)}`\r\n}\r\n\r\nexport function debounce<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: number | undefined\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeout)\r\n    timeout = window.setTimeout(() => func(...args), wait)\r\n  }\r\n}\r\n\r\nexport function throttle<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  limit: number\r\n): (...args: Parameters<T>) => void {\r\n  let inThrottle: boolean\r\n  return (...args: Parameters<T>) => {\r\n    if (!inThrottle) {\r\n      func(...args)\r\n      inThrottle = true\r\n      setTimeout(() => (inThrottle = false), limit)\r\n    }\r\n  }\r\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\main.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\middleware\\permissionMiddleware.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'NextFunction' is defined but never used.",
        "line": 1,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 22
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'NextFunction' is defined but never used.",
        "line": 1,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Request' is defined but never used.",
        "line": 1,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 31
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Request' is defined but never used.",
        "line": 1,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Response' is defined but never used.",
        "line": 1,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 41
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Response' is defined but never used.",
        "line": 1,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'resourceIdKey' is assigned a value but never used.",
        "line": 267,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 24
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'resourceIdKey' is assigned a value but never used.",
        "line": 267,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 270,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 270,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6487, 6490], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6487, 6490], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 276,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 276,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6652, 6655], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6652, 6655], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 279,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 279,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6733, 6804], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { NextFunction, Request, Response } from 'express';\r\nimport { PermissionAction, ResourceType } from '../types/team';\r\n\r\n// Express 미들웨어는 백엔드용이므로, 프론트엔드에서는 React 컴포넌트 미들웨어를 구현\r\n// 대신 권한 검증을 위한 유틸리티 함수들을 제공\r\n\r\nexport interface PermissionCheck {\r\n  resourceType: ResourceType;\r\n  resourceId: string;\r\n  action: PermissionAction;\r\n  required?: boolean; // false일 경우 선택적 권한\r\n}\r\n\r\nexport interface PermissionValidationResult {\r\n  granted: boolean;\r\n  reason?: string;\r\n  missingPermissions?: PermissionCheck[];\r\n}\r\n\r\n/**\r\n * 단일 권한 검증 함수\r\n */\r\nexport const validatePermission = (\r\n  hasPermissionFn: (\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction\r\n  ) => boolean,\r\n  check: PermissionCheck\r\n): PermissionValidationResult => {\r\n  const granted = hasPermissionFn(\r\n    check.resourceType,\r\n    check.resourceId,\r\n    check.action\r\n  );\r\n\r\n  if (!granted && check.required !== false) {\r\n    return {\r\n      granted: false,\r\n      reason: `Insufficient permission for ${check.action} on ${check.resourceType}:${check.resourceId}`,\r\n      missingPermissions: [check],\r\n    };\r\n  }\r\n\r\n  return { granted: true };\r\n};\r\n\r\n/**\r\n * 다중 권한 검증 함수\r\n */\r\nexport const validateMultiplePermissions = (\r\n  hasPermissionFn: (\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction\r\n  ) => boolean,\r\n  checks: PermissionCheck[],\r\n  operator: 'AND' | 'OR' = 'AND'\r\n): PermissionValidationResult => {\r\n  const results = checks.map(check => ({\r\n    check,\r\n    granted: hasPermissionFn(\r\n      check.resourceType,\r\n      check.resourceId,\r\n      check.action\r\n    ),\r\n  }));\r\n\r\n  const requiredChecks = results.filter(\r\n    result => result.check.required !== false\r\n  );\r\n  const optionalChecks = results.filter(\r\n    result => result.check.required === false\r\n  );\r\n\r\n  let granted: boolean;\r\n  let missingPermissions: PermissionCheck[] = [];\r\n\r\n  if (operator === 'AND') {\r\n    // 모든 필수 권한이 있어야 함\r\n    const requiredGranted = requiredChecks.every(result => result.granted);\r\n    granted = requiredGranted;\r\n\r\n    if (!granted) {\r\n      missingPermissions = requiredChecks\r\n        .filter(result => !result.granted)\r\n        .map(result => result.check);\r\n    }\r\n  } else {\r\n    // 하나 이상의 권한이 있으면 됨 (필수 권한 우선)\r\n    const hasRequiredPermission = requiredChecks.some(result => result.granted);\r\n    const hasOptionalPermission = optionalChecks.some(result => result.granted);\r\n\r\n    granted =\r\n      hasRequiredPermission ||\r\n      (requiredChecks.length === 0 && hasOptionalPermission);\r\n\r\n    if (!granted) {\r\n      missingPermissions = checks;\r\n    }\r\n  }\r\n\r\n  return {\r\n    granted,\r\n    reason: granted ? undefined : `Missing required permissions`,\r\n    missingPermissions: granted ? undefined : missingPermissions,\r\n  };\r\n};\r\n\r\n/**\r\n * 권한 기반 작업 실행 래퍼\r\n */\r\nexport const executeWithPermission = async <T>(\r\n  hasPermissionFn: (\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction\r\n  ) => boolean,\r\n  check: PermissionCheck,\r\n  operation: () => Promise<T>,\r\n  onUnauthorized?: (result: PermissionValidationResult) => void\r\n): Promise<T> => {\r\n  const validation = validatePermission(hasPermissionFn, check);\r\n\r\n  if (!validation.granted) {\r\n    if (onUnauthorized) {\r\n      onUnauthorized(validation);\r\n    } else {\r\n      throw new Error(validation.reason || 'Permission denied');\r\n    }\r\n    throw new Error('Operation aborted due to insufficient permissions');\r\n  }\r\n\r\n  return await operation();\r\n};\r\n\r\n/**\r\n * 권한 체크 결과를 캐시하는 클래스\r\n */\r\nexport class PermissionCache {\r\n  private cache = new Map<string, { result: boolean; timestamp: number }>();\r\n  private ttl = 5 * 60 * 1000; // 5분 TTL\r\n\r\n  private getCacheKey(\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction\r\n  ): string {\r\n    return `${resourceType}:${resourceId}:${action}`;\r\n  }\r\n\r\n  get(\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction\r\n  ): boolean | null {\r\n    const key = this.getCacheKey(resourceType, resourceId, action);\r\n    const cached = this.cache.get(key);\r\n\r\n    if (!cached) return null;\r\n\r\n    // TTL 체크\r\n    if (Date.now() - cached.timestamp > this.ttl) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n\r\n    return cached.result;\r\n  }\r\n\r\n  set(\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction,\r\n    result: boolean\r\n  ): void {\r\n    const key = this.getCacheKey(resourceType, resourceId, action);\r\n    this.cache.set(key, {\r\n      result,\r\n      timestamp: Date.now(),\r\n    });\r\n  }\r\n\r\n  invalidate(resourceType?: ResourceType, resourceId?: string): void {\r\n    if (!resourceType) {\r\n      // 전체 캐시 무효화\r\n      this.cache.clear();\r\n      return;\r\n    }\r\n\r\n    // 특정 리소스 타입 또는 리소스 ID와 관련된 캐시만 무효화\r\n    const keysToDelete: string[] = [];\r\n\r\n    for (const [key] of this.cache) {\r\n      if (resourceId) {\r\n        if (key.startsWith(`${resourceType}:${resourceId}:`)) {\r\n          keysToDelete.push(key);\r\n        }\r\n      } else {\r\n        if (key.startsWith(`${resourceType}:`)) {\r\n          keysToDelete.push(key);\r\n        }\r\n      }\r\n    }\r\n\r\n    keysToDelete.forEach(key => this.cache.delete(key));\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n}\r\n\r\n// 전역 권한 캐시 인스턴스\r\nexport const globalPermissionCache = new PermissionCache();\r\n\r\n/**\r\n * 캐시를 사용하는 권한 검증 함수\r\n */\r\nexport const validatePermissionWithCache = (\r\n  hasPermissionFn: (\r\n    resourceType: ResourceType,\r\n    resourceId: string,\r\n    action: PermissionAction\r\n  ) => boolean,\r\n  check: PermissionCheck,\r\n  useCache: boolean = true\r\n): PermissionValidationResult => {\r\n  if (!useCache) {\r\n    return validatePermission(hasPermissionFn, check);\r\n  }\r\n\r\n  // 캐시에서 확인\r\n  const cachedResult = globalPermissionCache.get(\r\n    check.resourceType,\r\n    check.resourceId,\r\n    check.action\r\n  );\r\n\r\n  if (cachedResult !== null) {\r\n    return {\r\n      granted: cachedResult,\r\n      reason: cachedResult ? undefined : 'Cached permission denied',\r\n    };\r\n  }\r\n\r\n  // 캐시에 없으면 실제 검증 수행\r\n  const result = validatePermission(hasPermissionFn, check);\r\n\r\n  // 결과를 캐시에 저장\r\n  globalPermissionCache.set(\r\n    check.resourceType,\r\n    check.resourceId,\r\n    check.action,\r\n    result.granted\r\n  );\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * 권한 검증 데코레이터 (클래스 메서드용)\r\n */\r\nexport const requirePermission = (\r\n  resourceType: ResourceType,\r\n  action: PermissionAction,\r\n  resourceIdKey: string = 'id'\r\n) => {\r\n  return function (\r\n    target: any,\r\n    propertyKey: string,\r\n    descriptor: PropertyDescriptor\r\n  ) {\r\n    const originalMethod = descriptor.value;\r\n\r\n    descriptor.value = function (...args: any[]) {\r\n      // 실제 구현에서는 현재 사용자의 권한 확인 로직이 필요\r\n      // 여기서는 인터페이스만 제공\r\n      console.log(`Permission check required: ${action} on ${resourceType}`);\r\n\r\n      return originalMethod.apply(this, args);\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\providers\\QueryProvider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\services\\websocket.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [556, 559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [556, 559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [962, 965], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [962, 965], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 109,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 109,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [2671, 2717], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 135,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 135,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [3365, 3410], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 143,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 143,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3632, 3684], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 149,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 149,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [3808, 3864], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 160,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 160,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4082, 4134], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 171,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 171,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [4400, 4467], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 177,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 177,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4614, 4668], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 182,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 182,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [4768, 4834], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 188,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 188,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5002, 5005], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5002, 5005], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 203,
        "column": 13,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 203,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [5426, 5478], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 232,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 232,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [6107, 6158], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 237,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 237,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [6266, 6373], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 280,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 280,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7259, 7262], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7259, 7262], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 282,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 282,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "fix": { "range": [7315, 7376], "text": "" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 314,
        "column": 11,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 314,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [8134, 8201], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 319,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 319,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8314, 8317], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8314, 8317], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 320,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 320,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [8333, 8381], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 335,
        "column": 9,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 335,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [8734, 8800], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 345,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 345,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "fix": { "range": [8995, 9057], "text": "" },
            "desc": "Remove the console.warn()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 21,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { io, Socket } from 'socket.io-client';\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\nexport type WebSocketEvent =\r\n  | 'user-joined'\r\n  | 'user-left'\r\n  | 'user-typing'\r\n  | 'user-stopped-typing'\r\n  | 'edit-operation'\r\n  | 'cursor-moved'\r\n  | 'selection-changed'\r\n  | 'comment-added'\r\n  | 'comment-updated'\r\n  | 'comment-deleted'\r\n  | 'mention-created'\r\n  | 'presence-updated'\r\n  | 'session-started'\r\n  | 'session-ended'\r\n  | 'conflict-detected'\r\n  | 'conflict-resolved';\r\n\r\nexport interface WebSocketMessage {\r\n  event: WebSocketEvent;\r\n  data: any;\r\n  timestamp: number;\r\n  userId: string;\r\n  sessionId: string;\r\n  resourceType: 'TASK' | 'PROJECT' | 'DOCUMENT';\r\n  resourceId: string;\r\n}\r\n\r\nexport interface EditOperation {\r\n  id: string;\r\n  type: 'INSERT' | 'DELETE' | 'REPLACE' | 'FORMAT';\r\n  position: {\r\n    line: number;\r\n    column: number;\r\n    fieldPath?: string;\r\n  };\r\n  content?: string;\r\n  length?: number;\r\n  attributes?: Record<string, any>;\r\n  userId: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport interface UserPresence {\r\n  userId: string;\r\n  status: 'ONLINE' | 'AWAY' | 'BUSY' | 'OFFLINE';\r\n  cursor?: {\r\n    line: number;\r\n    column: number;\r\n    fieldPath?: string;\r\n  };\r\n  selection?: {\r\n    start: { line: number; column: number; fieldPath?: string };\r\n    end: { line: number; column: number; fieldPath?: string };\r\n  };\r\n  isTyping: boolean;\r\n  lastActivity: number;\r\n}\r\n\r\nclass WebSocketService {\r\n  private socket: Socket | null = null;\r\n  private eventListeners: Map<WebSocketEvent, Set<Function>> = new Map();\r\n  private connectionState:\r\n    | 'DISCONNECTED'\r\n    | 'CONNECTING'\r\n    | 'CONNECTED'\r\n    | 'ERROR' = 'DISCONNECTED';\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectDelay = 1000;\r\n  private currentSession: string | null = null;\r\n  private heartbeatInterval: number | null = null;\r\n\r\n  constructor() {\r\n    this.initializeEventListeners();\r\n  }\r\n\r\n  private initializeEventListeners() {\r\n    // 각 이벤트 타입별로 빈 Set 초기화\r\n    const events: WebSocketEvent[] = [\r\n      'user-joined',\r\n      'user-left',\r\n      'user-typing',\r\n      'user-stopped-typing',\r\n      'edit-operation',\r\n      'cursor-moved',\r\n      'selection-changed',\r\n      'comment-added',\r\n      'comment-updated',\r\n      'comment-deleted',\r\n      'mention-created',\r\n      'presence-updated',\r\n      'session-started',\r\n      'session-ended',\r\n      'conflict-detected',\r\n      'conflict-resolved',\r\n    ];\r\n\r\n    events.forEach(event => {\r\n      this.eventListeners.set(event, new Set());\r\n    });\r\n  }\r\n\r\n  async connect(userId: string, token: string): Promise<void> {\r\n    if (this.socket?.connected) {\r\n      console.log('Already connected to WebSocket');\r\n      return;\r\n    }\r\n\r\n    this.connectionState = 'CONNECTING';\r\n\r\n    try {\r\n      this.socket = io(\r\n        process.env.REACT_APP_WEBSOCKET_URL || 'ws://localhost:3001',\r\n        {\r\n          auth: {\r\n            userId,\r\n            token,\r\n          },\r\n          transports: ['websocket', 'polling'],\r\n          timeout: 10000,\r\n          reconnection: true,\r\n          reconnectionAttempts: this.maxReconnectAttempts,\r\n          reconnectionDelay: this.reconnectDelay,\r\n        }\r\n      );\r\n\r\n      this.setupSocketEventHandlers();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        this.socket!.on('connect', () => {\r\n          console.log('Connected to WebSocket server');\r\n          this.connectionState = 'CONNECTED';\r\n          this.reconnectAttempts = 0;\r\n          this.startHeartbeat();\r\n          resolve();\r\n        });\r\n\r\n        this.socket!.on('connect_error', error => {\r\n          console.error('WebSocket connection error:', error);\r\n          this.connectionState = 'ERROR';\r\n          reject(error);\r\n        });\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to connect to WebSocket:', error);\r\n      this.connectionState = 'ERROR';\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private setupSocketEventHandlers() {\r\n    if (!this.socket) return;\r\n\r\n    // 연결 관련 이벤트\r\n    this.socket.on('disconnect', reason => {\r\n      console.log('Disconnected from WebSocket:', reason);\r\n      this.connectionState = 'DISCONNECTED';\r\n      this.stopHeartbeat();\r\n\r\n      if (reason === 'io server disconnect') {\r\n        // 서버에서 연결을 끊은 경우 재연결 시도\r\n        this.reconnect();\r\n      }\r\n    });\r\n\r\n    this.socket.on('reconnect', attemptNumber => {\r\n      console.log(`Reconnected to WebSocket (attempt ${attemptNumber})`);\r\n      this.connectionState = 'CONNECTED';\r\n      this.reconnectAttempts = 0;\r\n    });\r\n\r\n    this.socket.on('reconnect_error', error => {\r\n      console.error('WebSocket reconnection error:', error);\r\n      this.reconnectAttempts++;\r\n    });\r\n\r\n    this.socket.on('reconnect_failed', () => {\r\n      console.error('WebSocket reconnection failed after max attempts');\r\n      this.connectionState = 'ERROR';\r\n    });\r\n\r\n    // 커스텀 이벤트 핸들러 설정\r\n    this.eventListeners.forEach((listeners, event) => {\r\n      this.socket!.on(event, (data: any) => {\r\n        const message: WebSocketMessage = {\r\n          event,\r\n          data,\r\n          timestamp: Date.now(),\r\n          userId: data.userId,\r\n          sessionId: data.sessionId,\r\n          resourceType: data.resourceType,\r\n          resourceId: data.resourceId,\r\n        };\r\n\r\n        listeners.forEach(listener => {\r\n          try {\r\n            listener(message);\r\n          } catch (error) {\r\n            console.error(`Error in ${event} listener:`, error);\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    // 하트비트 응답\r\n    this.socket.on('pong', () => {\r\n      // 서버로부터 pong 응답을 받음\r\n    });\r\n  }\r\n\r\n  private startHeartbeat() {\r\n    this.heartbeatInterval = window.setInterval(() => {\r\n      if (this.socket?.connected) {\r\n        this.socket.emit('ping');\r\n      }\r\n    }, 30000); // 30초마다 핑 전송\r\n  }\r\n\r\n  private stopHeartbeat() {\r\n    if (this.heartbeatInterval) {\r\n      clearInterval(this.heartbeatInterval);\r\n      this.heartbeatInterval = null;\r\n    }\r\n  }\r\n\r\n  private async reconnect(): Promise<void> {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.error('Max reconnection attempts reached');\r\n      return;\r\n    }\r\n\r\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts);\r\n    console.log(\r\n      `Attempting to reconnect in ${delay}ms (attempt ${this.reconnectAttempts + 1})`\r\n    );\r\n\r\n    setTimeout(() => {\r\n      if (this.socket && !this.socket.connected) {\r\n        this.socket.connect();\r\n      }\r\n    }, delay);\r\n  }\r\n\r\n  disconnect(): void {\r\n    if (this.socket) {\r\n      this.stopHeartbeat();\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n    this.connectionState = 'DISCONNECTED';\r\n    this.currentSession = null;\r\n  }\r\n\r\n  // 이벤트 리스너 관리\r\n  on(\r\n    event: WebSocketEvent,\r\n    listener: (message: WebSocketMessage) => void\r\n  ): void {\r\n    const listeners = this.eventListeners.get(event);\r\n    if (listeners) {\r\n      listeners.add(listener);\r\n    }\r\n  }\r\n\r\n  off(\r\n    event: WebSocketEvent,\r\n    listener: (message: WebSocketMessage) => void\r\n  ): void {\r\n    const listeners = this.eventListeners.get(event);\r\n    if (listeners) {\r\n      listeners.delete(listener);\r\n    }\r\n  }\r\n\r\n  // 메시지 전송\r\n  emit(event: WebSocketEvent, data: any): void {\r\n    if (!this.socket?.connected) {\r\n      console.warn('Cannot emit message: WebSocket not connected');\r\n      return;\r\n    }\r\n\r\n    this.socket.emit(event, {\r\n      ...data,\r\n      timestamp: Date.now(),\r\n    });\r\n  }\r\n\r\n  // 협업 세션 관리\r\n  async joinSession(\r\n    resourceType: 'TASK' | 'PROJECT' | 'DOCUMENT',\r\n    resourceId: string\r\n  ): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.socket?.connected) {\r\n        reject(new Error('WebSocket not connected'));\r\n        return;\r\n      }\r\n\r\n      const sessionData = {\r\n        resourceType,\r\n        resourceId,\r\n      };\r\n\r\n      this.socket.emit('join-session', sessionData);\r\n\r\n      this.socket.once(\r\n        'session-joined',\r\n        (response: { sessionId: string; participants: UserPresence[] }) => {\r\n          this.currentSession = response.sessionId;\r\n          console.log(`Joined collaboration session: ${response.sessionId}`);\r\n          resolve(response.sessionId);\r\n        }\r\n      );\r\n\r\n      this.socket.once('session-error', (error: any) => {\r\n        console.error('Failed to join session:', error);\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  async leaveSession(): Promise<void> {\r\n    if (!this.socket?.connected || !this.currentSession) {\r\n      return;\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n      this.socket!.emit('leave-session', { sessionId: this.currentSession });\r\n\r\n      this.socket!.once('session-left', () => {\r\n        console.log(`Left collaboration session: ${this.currentSession}`);\r\n        this.currentSession = null;\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  // 편집 작업 전송\r\n  sendEditOperation(operation: EditOperation): void {\r\n    if (!this.currentSession) {\r\n      console.warn('Cannot send edit operation: No active session');\r\n      return;\r\n    }\r\n\r\n    this.emit('edit-operation', {\r\n      sessionId: this.currentSession,\r\n      operation,\r\n    });\r\n  }\r\n\r\n  // 커서 위치 업데이트\r\n  updateCursor(position: {\r\n    line: number;\r\n    column: number;\r\n    fieldPath?: string;\r\n  }): void {\r\n    if (!this.currentSession) return;\r\n\r\n    this.emit('cursor-moved', {\r\n      sessionId: this.currentSession,\r\n      cursor: position,\r\n    });\r\n  }\r\n\r\n  // 선택 영역 업데이트\r\n  updateSelection(selection: {\r\n    start: { line: number; column: number; fieldPath?: string };\r\n    end: { line: number; column: number; fieldPath?: string };\r\n  }): void {\r\n    if (!this.currentSession) return;\r\n\r\n    this.emit('selection-changed', {\r\n      sessionId: this.currentSession,\r\n      selection,\r\n    });\r\n  }\r\n\r\n  // 타이핑 상태 업데이트\r\n  setTyping(isTyping: boolean, fieldPath?: string): void {\r\n    if (!this.currentSession) return;\r\n\r\n    const event = isTyping ? 'user-typing' : 'user-stopped-typing';\r\n\r\n    this.emit(event, {\r\n      sessionId: this.currentSession,\r\n      fieldPath,\r\n    });\r\n  }\r\n\r\n  // 사용자 상태 업데이트\r\n  updatePresence(\r\n    status: 'ONLINE' | 'AWAY' | 'BUSY' | 'OFFLINE',\r\n    customStatus?: string\r\n  ): void {\r\n    this.emit('presence-updated', {\r\n      status,\r\n      customStatus,\r\n      lastActivity: Date.now(),\r\n    });\r\n  }\r\n\r\n  // 연결 상태 확인\r\n  isConnected(): boolean {\r\n    return (\r\n      this.connectionState === 'CONNECTED' && this.socket?.connected === true\r\n    );\r\n  }\r\n\r\n  getConnectionState(): string {\r\n    return this.connectionState;\r\n  }\r\n\r\n  getCurrentSession(): string | null {\r\n    return this.currentSession;\r\n  }\r\n\r\n  // 댓글 관련 이벤트\r\n  sendComment(commentData: {\r\n    resourceType: string;\r\n    resourceId: string;\r\n    content: string;\r\n    mentions: string[];\r\n    parentCommentId?: string;\r\n  }): void {\r\n    this.emit('comment-added', commentData);\r\n  }\r\n\r\n  updateComment(commentId: string, content: string): void {\r\n    this.emit('comment-updated', {\r\n      commentId,\r\n      content,\r\n    });\r\n  }\r\n\r\n  deleteComment(commentId: string): void {\r\n    this.emit('comment-deleted', {\r\n      commentId,\r\n    });\r\n  }\r\n}\r\n\r\n// 싱글톤 인스턴스\r\nexport const websocketService = new WebSocketService();\r\n\r\n// React Hook for WebSocket\r\nexport const useWebSocket = () => {\r\n  const { user } = useAuth();\r\n\r\n  const connect = async () => {\r\n    if (!user) throw new Error('User not authenticated');\r\n    // 실제로는 사용자 토큰을 가져와야 함\r\n    await websocketService.connect(user.id, 'user-token');\r\n  };\r\n\r\n  const disconnect = () => {\r\n    websocketService.disconnect();\r\n  };\r\n\r\n  return {\r\n    connect,\r\n    disconnect,\r\n    on: websocketService.on.bind(websocketService),\r\n    off: websocketService.off.bind(websocketService),\r\n    emit: websocketService.emit.bind(websocketService),\r\n    joinSession: websocketService.joinSession.bind(websocketService),\r\n    leaveSession: websocketService.leaveSession.bind(websocketService),\r\n    sendEditOperation:\r\n      websocketService.sendEditOperation.bind(websocketService),\r\n    updateCursor: websocketService.updateCursor.bind(websocketService),\r\n    updateSelection: websocketService.updateSelection.bind(websocketService),\r\n    setTyping: websocketService.setTyping.bind(websocketService),\r\n    updatePresence: websocketService.updatePresence.bind(websocketService),\r\n    sendComment: websocketService.sendComment.bind(websocketService),\r\n    updateComment: websocketService.updateComment.bind(websocketService),\r\n    deleteComment: websocketService.deleteComment.bind(websocketService),\r\n    isConnected: websocketService.isConnected.bind(websocketService),\r\n    getConnectionState:\r\n      websocketService.getConnectionState.bind(websocketService),\r\n    getCurrentSession:\r\n      websocketService.getCurrentSession.bind(websocketService),\r\n  };\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\types\\team.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\utils\\initializeData.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 13,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 13,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [461, 503], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 66,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 66,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [1944, 1997], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 68,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 68,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [2022, 2079], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { collection, addDoc, getDocs, query, where } from 'firebase/firestore';\nimport { firestore } from '../config/firebase';\nimport { TaskStatus } from '@almus/shared-types';\n\nexport const initializeSampleTasks = async (teamId: string, userId: string) => {\n  try {\n    // 이미 태스크가 있는지 확인\n    const existingTasks = await getDocs(\n      query(collection(firestore, 'tasks'), where('teamId', '==', teamId))\n    );\n\n    if (existingTasks.docs.length > 0) {\n      console.log('Sample tasks already exist');\n      return;\n    }\n\n    // 샘플 태스크 데이터\n    const sampleTasks = [\n      {\n        title: '프로젝트 계획 수립',\n        description: '새로운 프로젝트의 전체적인 계획을 수립합니다.',\n        assigneeId: userId,\n        status: TaskStatus.TODO,\n        priority: 'HIGH',\n        dueDate: new Date('2025-08-01'),\n        teamId: teamId,\n        projectId: 'default-project',\n        createdAt: new Date('2025-07-15'),\n        updatedAt: new Date('2025-07-15'),\n        createdBy: userId,\n      },\n      {\n        title: 'UI 디자인 완료',\n        description: '사용자 인터페이스 디자인을 완료합니다.',\n        assigneeId: userId,\n        status: TaskStatus.IN_PROGRESS,\n        priority: 'MEDIUM',\n        dueDate: new Date('2025-07-25'),\n        teamId: teamId,\n        projectId: 'default-project',\n        createdAt: new Date('2025-07-10'),\n        updatedAt: new Date('2025-07-18'),\n        createdBy: userId,\n      },\n      {\n        title: '테스트 코드 작성',\n        description: '주요 기능에 대한 테스트 코드를 작성합니다.',\n        assigneeId: userId,\n        status: TaskStatus.DONE,\n        priority: 'LOW',\n        dueDate: new Date('2025-07-20'),\n        teamId: teamId,\n        projectId: 'default-project',\n        createdAt: new Date('2025-07-05'),\n        updatedAt: new Date('2025-07-19'),\n        createdBy: userId,\n      },\n    ];\n\n    // Firestore에 샘플 태스크 추가\n    const promises = sampleTasks.map(task =>\n      addDoc(collection(firestore, 'tasks'), task)\n    );\n\n    await Promise.all(promises);\n    console.log('Sample tasks initialized successfully');\n  } catch (error) {\n    console.error('Error initializing sample tasks:', error);\n  }\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\utils\\logger.test.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·data:·'test'` with `␍⏎········data:·'test',␍⏎·····`",
        "line": 26,
        "column": 76,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 26,
        "endColumn": 89,
        "fix": {
          "range": [939, 952],
          "text": "\r\n        data: 'test',\r\n     "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·data:·'test'` with `␍⏎········data:·'test',␍⏎·····`",
        "line": 33,
        "column": 76,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 33,
        "endColumn": 89,
        "fix": {
          "range": [1179, 1192],
          "text": "\r\n        data: 'test',\r\n     "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·data:·'test'` with `␍⏎········data:·'test',␍⏎·····`",
        "line": 50,
        "column": 73,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 50,
        "endColumn": 86,
        "fix": {
          "range": [1640, 1653],
          "text": "\r\n        data: 'test',\r\n     "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·data:·'test'` with `␍⏎········data:·'test',␍⏎·····`",
        "line": 55,
        "column": 76,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 55,
        "endColumn": 89,
        "fix": {
          "range": [1849, 1862],
          "text": "\r\n        data: 'test',\r\n     "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Replace `·data:·'test'` with `␍⏎········data:·'test',␍⏎·····`",
        "line": 60,
        "column": 70,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 60,
        "endColumn": 83,
        "fix": {
          "range": [2055, 2068],
          "text": "\r\n        data: 'test',\r\n     "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `␍⏎`",
        "line": 90,
        "column": 4,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 90,
        "endColumn": 4,
        "fix": { "range": [2868, 2868], "text": "\r\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 6,
    "fixableWarningCount": 0,
    "source": "import { logger } from './logger';\r\n\r\n// Mock console methods\r\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\r\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation();\r\nconst mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation();\r\nconst mockConsoleInfo = jest.spyOn(console, 'info').mockImplementation();\r\nconst mockConsoleDebug = jest.spyOn(console, 'debug').mockImplementation();\r\n\r\ndescribe('Logger', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterAll(() => {\r\n    mockConsoleLog.mockRestore();\r\n    mockConsoleError.mockRestore();\r\n    mockConsoleWarn.mockRestore();\r\n    mockConsoleInfo.mockRestore();\r\n    mockConsoleDebug.mockRestore();\r\n  });\r\n\r\n  describe('error', () => {\r\n    it('should always log errors', () => {\r\n      logger.error('Test error', { data: 'test' });\r\n      expect(mockConsoleError).toHaveBeenCalledWith('[ERROR] Test error', { data: 'test' });\r\n    });\r\n  });\r\n\r\n  describe('warn', () => {\r\n    it('should always log warnings', () => {\r\n      logger.warn('Test warning', { data: 'test' });\r\n      expect(mockConsoleWarn).toHaveBeenCalledWith('[WARN] Test warning', { data: 'test' });\r\n    });\r\n  });\r\n\r\n  describe('development environment', () => {\r\n    const originalEnv = process.env.NODE_ENV;\r\n\r\n    beforeAll(() => {\r\n      process.env.NODE_ENV = 'development';\r\n    });\r\n\r\n    afterAll(() => {\r\n      process.env.NODE_ENV = originalEnv;\r\n    });\r\n\r\n    it('should log info in development', () => {\r\n      logger.info('Test info', { data: 'test' });\r\n      expect(mockConsoleInfo).toHaveBeenCalledWith('[INFO] Test info', { data: 'test' });\r\n    });\r\n\r\n    it('should log debug in development', () => {\r\n      logger.debug('Test debug', { data: 'test' });\r\n      expect(mockConsoleDebug).toHaveBeenCalledWith('[DEBUG] Test debug', { data: 'test' });\r\n    });\r\n\r\n    it('should log general logs in development', () => {\r\n      logger.log('Test log', { data: 'test' });\r\n      expect(mockConsoleLog).toHaveBeenCalledWith('[LOG] Test log', { data: 'test' });\r\n    });\r\n  });\r\n\r\n  describe('production environment', () => {\r\n    const originalEnv = process.env.NODE_ENV;\r\n\r\n    beforeAll(() => {\r\n      process.env.NODE_ENV = 'production';\r\n    });\r\n\r\n    afterAll(() => {\r\n      process.env.NODE_ENV = originalEnv;\r\n    });\r\n\r\n    it('should not log info in production', () => {\r\n      logger.info('Test info', { data: 'test' });\r\n      expect(mockConsoleInfo).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not log debug in production', () => {\r\n      logger.debug('Test debug', { data: 'test' });\r\n      expect(mockConsoleDebug).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should not log general logs in production', () => {\r\n      logger.log('Test log', { data: 'test' });\r\n      expect(mockConsoleLog).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\utils\\logger.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 12,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 12,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [226, 271], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 19,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 19,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "warn" },
            "fix": { "range": [376, 419], "text": "" },
            "desc": "Remove the console.warn()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 27,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 27,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "info" },
            "fix": { "range": [553, 596], "text": "" },
            "desc": "Remove the console.info()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 36,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 36,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "debug" },
            "fix": { "range": [739, 784], "text": "" },
            "desc": "Remove the console.debug()."
          }
        ]
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 45,
        "column": 7,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 45,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "log" },
            "fix": { "range": [924, 965], "text": "" },
            "desc": "Remove the console.log()."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 2,
        "message": "Insert `␍⏎`",
        "line": 50,
        "column": 23,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 50,
        "endColumn": 23,
        "fix": { "range": [1008, 1008], "text": "\r\n" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "/**\r\n * 개발/프로덕션 환경을 고려한 로깅 유틸리티\r\n */\r\n\r\nconst isDevelopment = process.env.NODE_ENV === 'development';\r\n\r\nexport const logger = {\r\n  /**\r\n   * 에러 로그 (프로덕션에서도 출력)\r\n   */\r\n  error: (message: string, ...args: unknown[]) => {\r\n    console.error(`[ERROR] ${message}`, ...args);\r\n  },\r\n\r\n  /**\r\n   * 경고 로그 (프로덕션에서도 출력)\r\n   */\r\n  warn: (message: string, ...args: unknown[]) => {\r\n    console.warn(`[WARN] ${message}`, ...args);\r\n  },\r\n\r\n  /**\r\n   * 정보 로그 (개발 환경에서만 출력)\r\n   */\r\n  info: (message: string, ...args: unknown[]) => {\r\n    if (isDevelopment) {\r\n      console.info(`[INFO] ${message}`, ...args);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 디버그 로그 (개발 환경에서만 출력)\r\n   */\r\n  debug: (message: string, ...args: unknown[]) => {\r\n    if (isDevelopment) {\r\n      console.debug(`[DEBUG] ${message}`, ...args);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 일반 로그 (개발 환경에서만 출력)\r\n   */\r\n  log: (message: string, ...args: unknown[]) => {\r\n    if (isDevelopment) {\r\n      console.log(`[LOG] ${message}`, ...args);\r\n    }\r\n  },\r\n};\r\n\r\nexport default logger;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\utils\\operationalTransform.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [310, 313], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [310, 313], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'offset1' is assigned a value but never used.",
        "line": 43,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 16
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'offset1' is assigned a value but never used.",
        "line": 43,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'offset2' is assigned a value but never used.",
        "line": 44,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 14
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'offset2' is assigned a value but never used.",
        "line": 44,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 14
      },
      {
        "ruleId": "no-case-declarations",
        "severity": 2,
        "message": "Unexpected lexical declaration in case block.",
        "line": 289,
        "column": 11,
        "nodeType": "VariableDeclaration",
        "messageId": "unexpected",
        "endLine": 289,
        "endColumn": 77
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Operational Transform (OT) 알고리즘 구현\r\n// 동시 편집 시 발생하는 충돌을 해결하기 위한 핵심 알고리즘\r\n\r\nexport type OperationType = 'retain' | 'insert' | 'delete';\r\n\r\nexport interface Operation {\r\n  type: OperationType;\r\n  length?: number; // retain, delete의 경우 길이\r\n  text?: string; // insert의 경우 삽입할 텍스트\r\n  attributes?: Record<string, any>; // 서식 정보\r\n}\r\n\r\nexport interface TextOperation {\r\n  ops: Operation[];\r\n  baseLength: number;\r\n  targetLength: number;\r\n}\r\n\r\nexport class OperationalTransform {\r\n  /**\r\n   * 두 개의 작업을 변환하여 동시 편집 충돌을 해결\r\n   * @param op1 첫 번째 작업\r\n   * @param op2 두 번째 작업\r\n   * @param priority1 첫 번째 작업의 우선순위 (높을수록 우선)\r\n   * @returns 변환된 두 작업\r\n   */\r\n  static transform(\r\n    op1: TextOperation,\r\n    op2: TextOperation,\r\n    priority1: boolean = true\r\n  ): [TextOperation, TextOperation] {\r\n    if (op1.baseLength !== op2.baseLength) {\r\n      throw new Error('Operations must have the same base length');\r\n    }\r\n\r\n    const ops1 = op1.ops.slice();\r\n    const ops2 = op2.ops.slice();\r\n    const newOps1: Operation[] = [];\r\n    const newOps2: Operation[] = [];\r\n\r\n    let i1 = 0,\r\n      i2 = 0; // 현재 처리 중인 operation 인덱스\r\n    let offset1 = 0,\r\n      offset2 = 0; // 현재 처리 중인 위치\r\n\r\n    while (i1 < ops1.length || i2 < ops2.length) {\r\n      // 첫 번째 작업이 끝난 경우\r\n      if (i1 >= ops1.length) {\r\n        newOps2.push(...ops2.slice(i2));\r\n        break;\r\n      }\r\n\r\n      // 두 번째 작업이 끝난 경우\r\n      if (i2 >= ops2.length) {\r\n        newOps1.push(...ops1.slice(i1));\r\n        break;\r\n      }\r\n\r\n      const op1Current = ops1[i1];\r\n      const op2Current = ops2[i2];\r\n\r\n      // Insert vs Insert\r\n      if (op1Current.type === 'insert' && op2Current.type === 'insert') {\r\n        if (priority1) {\r\n          newOps1.push(op1Current);\r\n          newOps2.push({ type: 'retain', length: op1Current.text!.length });\r\n          i1++;\r\n        } else {\r\n          newOps1.push({ type: 'retain', length: op2Current.text!.length });\r\n          newOps2.push(op2Current);\r\n          i2++;\r\n        }\r\n      }\r\n      // Insert vs Retain\r\n      else if (op1Current.type === 'insert' && op2Current.type === 'retain') {\r\n        newOps1.push(op1Current);\r\n        newOps2.push({ type: 'retain', length: op1Current.text!.length });\r\n        i1++;\r\n      }\r\n      // Insert vs Delete\r\n      else if (op1Current.type === 'insert' && op2Current.type === 'delete') {\r\n        newOps1.push(op1Current);\r\n        newOps2.push({ type: 'retain', length: op1Current.text!.length });\r\n        i1++;\r\n      }\r\n      // Retain vs Insert\r\n      else if (op1Current.type === 'retain' && op2Current.type === 'insert') {\r\n        newOps1.push({ type: 'retain', length: op2Current.text!.length });\r\n        newOps2.push(op2Current);\r\n        i2++;\r\n      }\r\n      // Retain vs Retain\r\n      else if (op1Current.type === 'retain' && op2Current.type === 'retain') {\r\n        const minLength = Math.min(op1Current.length!, op2Current.length!);\r\n        newOps1.push({ type: 'retain', length: minLength });\r\n        newOps2.push({ type: 'retain', length: minLength });\r\n\r\n        // 남은 길이 처리\r\n        if (op1Current.length! > minLength) {\r\n          ops1[i1] = { ...op1Current, length: op1Current.length! - minLength };\r\n        } else {\r\n          i1++;\r\n        }\r\n\r\n        if (op2Current.length! > minLength) {\r\n          ops2[i2] = { ...op2Current, length: op2Current.length! - minLength };\r\n        } else {\r\n          i2++;\r\n        }\r\n      }\r\n      // Delete vs Insert\r\n      else if (op1Current.type === 'delete' && op2Current.type === 'insert') {\r\n        newOps2.push(op2Current);\r\n        i2++;\r\n      }\r\n      // Delete vs Retain\r\n      else if (op1Current.type === 'delete' && op2Current.type === 'retain') {\r\n        const minLength = Math.min(op1Current.length!, op2Current.length!);\r\n        newOps1.push({ type: 'delete', length: minLength });\r\n\r\n        // 남은 길이 처리\r\n        if (op1Current.length! > minLength) {\r\n          ops1[i1] = { ...op1Current, length: op1Current.length! - minLength };\r\n        } else {\r\n          i1++;\r\n        }\r\n\r\n        if (op2Current.length! > minLength) {\r\n          ops2[i2] = { ...op2Current, length: op2Current.length! - minLength };\r\n        } else {\r\n          i2++;\r\n        }\r\n      }\r\n      // Delete vs Delete\r\n      else if (op1Current.type === 'delete' && op2Current.type === 'delete') {\r\n        const minLength = Math.min(op1Current.length!, op2Current.length!);\r\n\r\n        // 남은 길이 처리\r\n        if (op1Current.length! > minLength) {\r\n          ops1[i1] = { ...op1Current, length: op1Current.length! - minLength };\r\n        } else {\r\n          i1++;\r\n        }\r\n\r\n        if (op2Current.length! > minLength) {\r\n          ops2[i2] = { ...op2Current, length: op2Current.length! - minLength };\r\n        } else {\r\n          i2++;\r\n        }\r\n      }\r\n      // Retain vs Delete\r\n      else if (op1Current.type === 'retain' && op2Current.type === 'delete') {\r\n        const minLength = Math.min(op1Current.length!, op2Current.length!);\r\n        newOps2.push({ type: 'delete', length: minLength });\r\n\r\n        // 남은 길이 처리\r\n        if (op1Current.length! > minLength) {\r\n          ops1[i1] = { ...op1Current, length: op1Current.length! - minLength };\r\n        } else {\r\n          i1++;\r\n        }\r\n\r\n        if (op2Current.length! > minLength) {\r\n          ops2[i2] = { ...op2Current, length: op2Current.length! - minLength };\r\n        } else {\r\n          i2++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return [\r\n      {\r\n        ops: this.normalize(newOps1),\r\n        baseLength: op1.baseLength,\r\n        targetLength: this.calculateTargetLength(op1.baseLength, newOps1),\r\n      },\r\n      {\r\n        ops: this.normalize(newOps2),\r\n        baseLength: op2.baseLength,\r\n        targetLength: this.calculateTargetLength(op2.baseLength, newOps2),\r\n      },\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * 작업을 텍스트에 적용\r\n   * @param text 원본 텍스트\r\n   * @param operation 적용할 작업\r\n   * @returns 변경된 텍스트\r\n   */\r\n  static apply(text: string, operation: TextOperation): string {\r\n    if (text.length !== operation.baseLength) {\r\n      throw new Error('Text length does not match operation base length');\r\n    }\r\n\r\n    let result = '';\r\n    let textIndex = 0;\r\n\r\n    for (const op of operation.ops) {\r\n      switch (op.type) {\r\n        case 'retain':\r\n          result += text.slice(textIndex, textIndex + op.length!);\r\n          textIndex += op.length!;\r\n          break;\r\n        case 'insert':\r\n          result += op.text!;\r\n          break;\r\n        case 'delete':\r\n          textIndex += op.length!;\r\n          break;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 작업들을 정규화하여 연속된 같은 타입의 작업을 합침\r\n   * @param ops 작업 배열\r\n   * @returns 정규화된 작업 배열\r\n   */\r\n  static normalize(ops: Operation[]): Operation[] {\r\n    const normalized: Operation[] = [];\r\n\r\n    for (const op of ops) {\r\n      if (op.type === 'retain' && op.length === 0) continue;\r\n      if (op.type === 'delete' && op.length === 0) continue;\r\n      if (op.type === 'insert' && op.text === '') continue;\r\n\r\n      const last = normalized[normalized.length - 1];\r\n\r\n      if (last && last.type === op.type) {\r\n        if (op.type === 'retain' || op.type === 'delete') {\r\n          last.length = (last.length || 0) + (op.length || 0);\r\n        } else if (op.type === 'insert') {\r\n          last.text = (last.text || '') + (op.text || '');\r\n        }\r\n      } else {\r\n        normalized.push({ ...op });\r\n      }\r\n    }\r\n\r\n    return normalized;\r\n  }\r\n\r\n  /**\r\n   * 작업의 대상 길이 계산\r\n   * @param baseLength 원본 길이\r\n   * @param ops 작업 배열\r\n   * @returns 대상 길이\r\n   */\r\n  static calculateTargetLength(baseLength: number, ops: Operation[]): number {\r\n    let length = baseLength;\r\n\r\n    for (const op of ops) {\r\n      switch (op.type) {\r\n        case 'insert':\r\n          length += op.text!.length;\r\n          break;\r\n        case 'delete':\r\n          length -= op.length!;\r\n          break;\r\n      }\r\n    }\r\n\r\n    return length;\r\n  }\r\n\r\n  /**\r\n   * 작업을 역전시킴\r\n   * @param operation 원본 작업\r\n   * @param text 원본 텍스트\r\n   * @returns 역전된 작업\r\n   */\r\n  static invert(operation: TextOperation, text: string): TextOperation {\r\n    const inverted: Operation[] = [];\r\n    let textIndex = 0;\r\n\r\n    for (const op of operation.ops) {\r\n      switch (op.type) {\r\n        case 'retain':\r\n          inverted.push({ type: 'retain', length: op.length });\r\n          textIndex += op.length!;\r\n          break;\r\n        case 'insert':\r\n          inverted.push({ type: 'delete', length: op.text!.length });\r\n          break;\r\n        case 'delete':\r\n          const deletedText = text.slice(textIndex, textIndex + op.length!);\r\n          inverted.push({ type: 'insert', text: deletedText });\r\n          textIndex += op.length!;\r\n          break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      ops: this.normalize(inverted),\r\n      baseLength: operation.targetLength,\r\n      targetLength: operation.baseLength,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 여러 작업을 하나로 합성\r\n   * @param op1 첫 번째 작업\r\n   * @param op2 두 번째 작업\r\n   * @returns 합성된 작업\r\n   */\r\n  static compose(op1: TextOperation, op2: TextOperation): TextOperation {\r\n    if (op1.targetLength !== op2.baseLength) {\r\n      throw new Error(\r\n        'Cannot compose operations: target length of first operation must equal base length of second operation'\r\n      );\r\n    }\r\n\r\n    const ops1 = op1.ops.slice();\r\n    const ops2 = op2.ops.slice();\r\n    const composed: Operation[] = [];\r\n\r\n    let i1 = 0,\r\n      i2 = 0;\r\n\r\n    while (i1 < ops1.length || i2 < ops2.length) {\r\n      if (i1 >= ops1.length) {\r\n        composed.push(...ops2.slice(i2));\r\n        break;\r\n      }\r\n\r\n      if (i2 >= ops2.length) {\r\n        const remaining = ops1.slice(i1);\r\n        for (const op of remaining) {\r\n          if (op.type !== 'delete') {\r\n            composed.push(op);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      const op1Current = ops1[i1];\r\n      const op2Current = ops2[i2];\r\n\r\n      if (op1Current.type === 'delete') {\r\n        composed.push(op1Current);\r\n        i1++;\r\n      } else if (op2Current.type === 'insert') {\r\n        composed.push(op2Current);\r\n        i2++;\r\n      } else if (op1Current.type === 'retain' && op2Current.type === 'retain') {\r\n        const minLength = Math.min(op1Current.length!, op2Current.length!);\r\n        composed.push({ type: 'retain', length: minLength });\r\n\r\n        if (op1Current.length! > minLength) {\r\n          ops1[i1] = { ...op1Current, length: op1Current.length! - minLength };\r\n        } else {\r\n          i1++;\r\n        }\r\n\r\n        if (op2Current.length! > minLength) {\r\n          ops2[i2] = { ...op2Current, length: op2Current.length! - minLength };\r\n        } else {\r\n          i2++;\r\n        }\r\n      } else if (op1Current.type === 'insert' && op2Current.type === 'retain') {\r\n        const insertLength = op1Current.text!.length;\r\n        const retainLength = op2Current.length!;\r\n\r\n        if (insertLength <= retainLength) {\r\n          composed.push(op1Current);\r\n          i1++;\r\n\r\n          if (insertLength < retainLength) {\r\n            ops2[i2] = { ...op2Current, length: retainLength - insertLength };\r\n          } else {\r\n            i2++;\r\n          }\r\n        } else {\r\n          composed.push({\r\n            type: 'insert',\r\n            text: op1Current.text!.slice(0, retainLength),\r\n          });\r\n          ops1[i1] = {\r\n            ...op1Current,\r\n            text: op1Current.text!.slice(retainLength),\r\n          };\r\n          i2++;\r\n        }\r\n      } else if (op1Current.type === 'insert' && op2Current.type === 'delete') {\r\n        const insertLength = op1Current.text!.length;\r\n        const deleteLength = op2Current.length!;\r\n\r\n        if (insertLength <= deleteLength) {\r\n          i1++;\r\n          if (insertLength < deleteLength) {\r\n            ops2[i2] = { ...op2Current, length: deleteLength - insertLength };\r\n          } else {\r\n            i2++;\r\n          }\r\n        } else {\r\n          ops1[i1] = {\r\n            ...op1Current,\r\n            text: op1Current.text!.slice(deleteLength),\r\n          };\r\n          i2++;\r\n        }\r\n      } else if (op1Current.type === 'retain' && op2Current.type === 'delete') {\r\n        const retainLength = op1Current.length!;\r\n        const deleteLength = op2Current.length!;\r\n        const minLength = Math.min(retainLength, deleteLength);\r\n\r\n        composed.push({ type: 'delete', length: minLength });\r\n\r\n        if (retainLength > minLength) {\r\n          ops1[i1] = { ...op1Current, length: retainLength - minLength };\r\n        } else {\r\n          i1++;\r\n        }\r\n\r\n        if (deleteLength > minLength) {\r\n          ops2[i2] = { ...op2Current, length: deleteLength - minLength };\r\n        } else {\r\n          i2++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      ops: this.normalize(composed),\r\n      baseLength: op1.baseLength,\r\n      targetLength: op2.targetLength,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 텍스트에서 작업 생성\r\n   * @param oldText 이전 텍스트\r\n   * @param newText 새 텍스트\r\n   * @returns 변환 작업\r\n   */\r\n  static fromTextDiff(oldText: string, newText: string): TextOperation {\r\n    // 간단한 diff 알고리즘 (실제로는 더 정교한 알고리즘 사용 권장)\r\n    const ops: Operation[] = [];\r\n    let oldIndex = 0;\r\n    let newIndex = 0;\r\n\r\n    while (oldIndex < oldText.length || newIndex < newText.length) {\r\n      if (\r\n        oldIndex < oldText.length &&\r\n        newIndex < newText.length &&\r\n        oldText[oldIndex] === newText[newIndex]\r\n      ) {\r\n        // 같은 문자 - retain\r\n        let retainLength = 0;\r\n        while (\r\n          oldIndex + retainLength < oldText.length &&\r\n          newIndex + retainLength < newText.length &&\r\n          oldText[oldIndex + retainLength] === newText[newIndex + retainLength]\r\n        ) {\r\n          retainLength++;\r\n        }\r\n        ops.push({ type: 'retain', length: retainLength });\r\n        oldIndex += retainLength;\r\n        newIndex += retainLength;\r\n      } else if (\r\n        newIndex < newText.length &&\r\n        (oldIndex >= oldText.length || oldText[oldIndex] !== newText[newIndex])\r\n      ) {\r\n        // 새 문자 삽입\r\n        let insertText = '';\r\n        while (\r\n          newIndex < newText.length &&\r\n          (oldIndex >= oldText.length ||\r\n            oldText[oldIndex] !== newText[newIndex])\r\n        ) {\r\n          insertText += newText[newIndex];\r\n          newIndex++;\r\n        }\r\n        ops.push({ type: 'insert', text: insertText });\r\n      } else {\r\n        // 문자 삭제\r\n        let deleteLength = 0;\r\n        while (\r\n          oldIndex + deleteLength < oldText.length &&\r\n          (newIndex >= newText.length ||\r\n            oldText[oldIndex + deleteLength] !== newText[newIndex])\r\n        ) {\r\n          deleteLength++;\r\n        }\r\n        ops.push({ type: 'delete', length: deleteLength });\r\n        oldIndex += deleteLength;\r\n      }\r\n    }\r\n\r\n    return {\r\n      ops: this.normalize(ops),\r\n      baseLength: oldText.length,\r\n      targetLength: newText.length,\r\n    };\r\n  }\r\n}\r\n\r\n// 충돌 해결 전략\r\nexport class ConflictResolver {\r\n  /**\r\n   * 타임스탬프 기반 충돌 해결\r\n   * @param op1 첫 번째 작업\r\n   * @param op2 두 번째 작업\r\n   * @param timestamp1 첫 번째 작업의 타임스탬프\r\n   * @param timestamp2 두 번째 작업의 타임스탬프\r\n   * @returns 해결된 작업들\r\n   */\r\n  static resolveByTimestamp(\r\n    op1: TextOperation,\r\n    op2: TextOperation,\r\n    timestamp1: number,\r\n    timestamp2: number\r\n  ): [TextOperation, TextOperation] {\r\n    const priority1 = timestamp1 < timestamp2;\r\n    return OperationalTransform.transform(op1, op2, priority1);\r\n  }\r\n\r\n  /**\r\n   * 사용자 우선순위 기반 충돌 해결\r\n   * @param op1 첫 번째 작업\r\n   * @param op2 두 번째 작업\r\n   * @param userId1 첫 번째 사용자 ID\r\n   * @param userId2 두 번째 사용자 ID\r\n   * @param userPriorities 사용자 우선순위 맵\r\n   * @returns 해결된 작업들\r\n   */\r\n  static resolveByUserPriority(\r\n    op1: TextOperation,\r\n    op2: TextOperation,\r\n    userId1: string,\r\n    userId2: string,\r\n    userPriorities: Map<string, number>\r\n  ): [TextOperation, TextOperation] {\r\n    const priority1 = userPriorities.get(userId1) || 0;\r\n    const priority2 = userPriorities.get(userId2) || 0;\r\n    const firstHasPriority = priority1 >= priority2;\r\n\r\n    return OperationalTransform.transform(op1, op2, firstHasPriority);\r\n  }\r\n\r\n  /**\r\n   * 작업 타입 기반 충돌 해결\r\n   * @param op1 첫 번째 작업\r\n   * @param op2 두 번째 작업\r\n   * @returns 해결된 작업들\r\n   */\r\n  static resolveByOperationType(\r\n    op1: TextOperation,\r\n    op2: TextOperation\r\n  ): [TextOperation, TextOperation] {\r\n    // Insert 작업이 Delete 작업보다 우선순위가 높음\r\n    const hasInsert1 = op1.ops.some(op => op.type === 'insert');\r\n    const hasInsert2 = op2.ops.some(op => op.type === 'insert');\r\n\r\n    if (hasInsert1 && !hasInsert2) {\r\n      return OperationalTransform.transform(op1, op2, true);\r\n    } else if (!hasInsert1 && hasInsert2) {\r\n      return OperationalTransform.transform(op1, op2, false);\r\n    }\r\n\r\n    // 같은 타입인 경우 첫 번째 작업 우선\r\n    return OperationalTransform.transform(op1, op2, true);\r\n  }\r\n}\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\utils\\permissionUtils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 125,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 125,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3332, 3335], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3332, 3335], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 126,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 126,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3379, 3382], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3379, 3382], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'role' is defined but never used.",
        "line": 426,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 426,
        "endColumn": 20
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'role' is defined but never used.",
        "line": 426,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 426,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'role' is defined but never used.",
        "line": 435,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 435,
        "endColumn": 17
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'role' is defined but never used.",
        "line": 435,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 435,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\r\n  PermissionAction,\r\n  ResourceType,\r\n  TeamRole,\r\n  ProjectRole,\r\n  TaskRole,\r\n  Permission,\r\n  PermissionConditions,\r\n} from '../types/team';\r\n\r\n/**\r\n * 권한 관련 유틸리티 함수들\r\n */\r\n\r\n// 권한 액션에 대한 한국어 라벨\r\nexport const getActionLabel = (action: PermissionAction): string => {\r\n  const labels: Record<PermissionAction, string> = {\r\n    [PermissionAction.CREATE]: '생성',\r\n    [PermissionAction.READ]: '조회',\r\n    [PermissionAction.UPDATE]: '수정',\r\n    [PermissionAction.DELETE]: '삭제',\r\n    [PermissionAction.ASSIGN]: '배정',\r\n    [PermissionAction.COMMENT]: '댓글',\r\n    [PermissionAction.COMPLETE]: '완료',\r\n    [PermissionAction.MANAGE_PERMISSIONS]: '권한 관리',\r\n  };\r\n  return labels[action] || action;\r\n};\r\n\r\n// 리소스 타입에 대한 한국어 라벨\r\nexport const getResourceTypeLabel = (resourceType: ResourceType): string => {\r\n  const labels: Record<ResourceType, string> = {\r\n    [ResourceType.TEAM]: '팀',\r\n    [ResourceType.PROJECT]: '프로젝트',\r\n    [ResourceType.TASK]: '작업',\r\n  };\r\n  return labels[resourceType] || resourceType;\r\n};\r\n\r\n// 팀 역할에 대한 한국어 라벨\r\nexport const getTeamRoleLabel = (role: TeamRole): string => {\r\n  const labels: Record<TeamRole, string> = {\r\n    [TeamRole.OWNER]: '소유자',\r\n    [TeamRole.ADMIN]: '관리자',\r\n    [TeamRole.EDITOR]: '편집자',\r\n    [TeamRole.VIEWER]: '조회자',\r\n  };\r\n  return labels[role] || role;\r\n};\r\n\r\n// 프로젝트 역할에 대한 한국어 라벨\r\nexport const getProjectRoleLabel = (role: ProjectRole): string => {\r\n  const labels: Record<ProjectRole, string> = {\r\n    [ProjectRole.PROJECT_MANAGER]: '프로젝트 매니저',\r\n    [ProjectRole.PROJECT_LEAD]: '프로젝트 리드',\r\n    [ProjectRole.CONTRIBUTOR]: '기여자',\r\n    [ProjectRole.OBSERVER]: '관찰자',\r\n  };\r\n  return labels[role] || role;\r\n};\r\n\r\n// 작업 역할에 대한 한국어 라벨\r\nexport const getTaskRoleLabel = (role: TaskRole): string => {\r\n  const labels: Record<TaskRole, string> = {\r\n    [TaskRole.ASSIGNEE]: '담당자',\r\n    [TaskRole.REVIEWER]: '리뷰어',\r\n    [TaskRole.COLLABORATOR]: '협업자',\r\n    [TaskRole.WATCHER]: '관찰자',\r\n  };\r\n  return labels[role] || role;\r\n};\r\n\r\n// 역할 계층 구조 정의\r\nexport const getRoleHierarchy = (resourceType: ResourceType): string[] => {\r\n  switch (resourceType) {\r\n    case ResourceType.TEAM:\r\n      return [TeamRole.VIEWER, TeamRole.EDITOR, TeamRole.ADMIN, TeamRole.OWNER];\r\n    case ResourceType.PROJECT:\r\n      return [\r\n        ProjectRole.OBSERVER,\r\n        ProjectRole.CONTRIBUTOR,\r\n        ProjectRole.PROJECT_LEAD,\r\n        ProjectRole.PROJECT_MANAGER,\r\n      ];\r\n    case ResourceType.TASK:\r\n      return [\r\n        TaskRole.WATCHER,\r\n        TaskRole.COLLABORATOR,\r\n        TaskRole.REVIEWER,\r\n        TaskRole.ASSIGNEE,\r\n      ];\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\n// 역할 레벨 비교\r\nexport const compareRoles = (\r\n  role1: string,\r\n  role2: string,\r\n  resourceType: ResourceType\r\n): number => {\r\n  const hierarchy = getRoleHierarchy(resourceType);\r\n  const level1 = hierarchy.indexOf(role1);\r\n  const level2 = hierarchy.indexOf(role2);\r\n\r\n  if (level1 === -1 || level2 === -1) return 0;\r\n  return level1 - level2;\r\n};\r\n\r\n// 상위 역할인지 확인\r\nexport const isHigherRole = (\r\n  role1: string,\r\n  role2: string,\r\n  resourceType: ResourceType\r\n): boolean => {\r\n  return compareRoles(role1, role2, resourceType) > 0;\r\n};\r\n\r\n// 권한 조건 확인\r\nexport const checkPermissionConditions = (\r\n  conditions: PermissionConditions | undefined,\r\n  context: {\r\n    currentTime?: Date;\r\n    userAttributes?: Record<string, any>;\r\n    resourceAttributes?: Record<string, any>;\r\n  }\r\n): boolean => {\r\n  if (!conditions) return true;\r\n\r\n  const {\r\n    currentTime = new Date(),\r\n    userAttributes = {},\r\n    resourceAttributes = {},\r\n  } = context;\r\n\r\n  // 시간 기반 조건 확인\r\n  if (conditions.timeRestriction) {\r\n    const { startTime, endTime, allowedDays } = conditions.timeRestriction;\r\n\r\n    if (startTime && endTime) {\r\n      const currentHour = currentTime.getHours();\r\n      const currentMinute = currentTime.getMinutes();\r\n      const currentTimeMinutes = currentHour * 60 + currentMinute;\r\n\r\n      const [startHour, startMin] = startTime.split(':').map(Number);\r\n      const [endHour, endMin] = endTime.split(':').map(Number);\r\n      const startTimeMinutes = startHour * 60 + startMin;\r\n      const endTimeMinutes = endHour * 60 + endMin;\r\n\r\n      if (\r\n        currentTimeMinutes < startTimeMinutes ||\r\n        currentTimeMinutes > endTimeMinutes\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (allowedDays && allowedDays.length > 0) {\r\n      const currentDay = currentTime.getDay(); // 0 = Sunday, 1 = Monday, ...\r\n      if (!allowedDays.includes(String(currentDay))) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // IP 제한 확인\r\n  if (conditions.ipRestriction && conditions.ipRestriction.allowedIps) {\r\n    const userIp = userAttributes.ip;\r\n    if (\r\n      !userIp ||\r\n      !conditions.ipRestriction.allowedIps.some(allowedIp =>\r\n        userIp.match(new RegExp(allowedIp.replace('*', '.*')))\r\n      )\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 사용자 속성 기반 조건 확인\r\n  if (conditions.userAttributeRequirements) {\r\n    for (const [key, value] of Object.entries(\r\n      conditions.userAttributeRequirements\r\n    )) {\r\n      if (userAttributes[key] !== value) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // 리소스 상태 기반 조건 확인\r\n  if (conditions.resourceStateRequirements) {\r\n    for (const [key, value] of Object.entries(\r\n      conditions.resourceStateRequirements\r\n    )) {\r\n      if (resourceAttributes[key] !== value) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n// 권한 만료 확인\r\nexport const isPermissionExpired = (permission: Permission): boolean => {\r\n  if (!permission.conditions?.expiresAt) return false;\r\n  return new Date() > permission.conditions.expiresAt;\r\n};\r\n\r\n// 권한 곧 만료 확인 (7일 내)\r\nexport const isPermissionExpiringSoon = (\r\n  permission: Permission,\r\n  days: number = 7\r\n): boolean => {\r\n  if (!permission.conditions?.expiresAt) return false;\r\n  const expiryDate = permission.conditions.expiresAt;\r\n  const warningDate = new Date();\r\n  warningDate.setDate(warningDate.getDate() + days);\r\n  return expiryDate <= warningDate && expiryDate > new Date();\r\n};\r\n\r\n// 권한 충돌 감지\r\nexport const detectPermissionConflicts = (\r\n  permissions: Permission[]\r\n): Permission[] => {\r\n  const conflicts: Permission[] = [];\r\n\r\n  for (let i = 0; i < permissions.length; i++) {\r\n    for (let j = i + 1; j < permissions.length; j++) {\r\n      const perm1 = permissions[i];\r\n      const perm2 = permissions[j];\r\n\r\n      // 같은 리소스, 같은 액션에 대해 서로 다른 권한 부여\r\n      if (\r\n        perm1.resource === perm2.resource &&\r\n        perm1.action === perm2.action &&\r\n        perm1.granted !== perm2.granted\r\n      ) {\r\n        conflicts.push(perm1, perm2);\r\n      }\r\n    }\r\n  }\r\n\r\n  return [...new Set(conflicts)]; // 중복 제거\r\n};\r\n\r\n// 권한 상속 계산\r\nexport const calculateInheritedPermissions = (\r\n  teamRole?: TeamRole,\r\n  projectRole?: ProjectRole,\r\n  taskRole?: TaskRole,\r\n  explicitPermissions: Permission[] = []\r\n): Permission[] => {\r\n  const inheritedPermissions: Permission[] = [];\r\n\r\n  // 팀 레벨 권한 상속\r\n  if (teamRole) {\r\n    const teamPermissions = getDefaultPermissionsForTeamRole(teamRole);\r\n    inheritedPermissions.push(...teamPermissions);\r\n  }\r\n\r\n  // 프로젝트 레벨 권한 상속 (팀 권한을 오버라이드)\r\n  if (projectRole) {\r\n    const projectPermissions = getDefaultPermissionsForProjectRole(projectRole);\r\n    inheritedPermissions.push(...projectPermissions);\r\n  }\r\n\r\n  // 작업 레벨 권한 상속 (프로젝트 권한을 오버라이드)\r\n  if (taskRole) {\r\n    const taskPermissions = getDefaultPermissionsForTaskRole(taskRole);\r\n    inheritedPermissions.push(...taskPermissions);\r\n  }\r\n\r\n  // 명시적 권한으로 최종 오버라이드\r\n  const finalPermissions = [...inheritedPermissions];\r\n\r\n  explicitPermissions.forEach(explicitPerm => {\r\n    const existingIndex = finalPermissions.findIndex(\r\n      perm =>\r\n        perm.resource === explicitPerm.resource &&\r\n        perm.action === explicitPerm.action\r\n    );\r\n\r\n    if (existingIndex >= 0) {\r\n      finalPermissions[existingIndex] = explicitPerm;\r\n    } else {\r\n      finalPermissions.push(explicitPerm);\r\n    }\r\n  });\r\n\r\n  return finalPermissions;\r\n};\r\n\r\n// 팀 역할의 기본 권한 반환\r\nexport const getDefaultPermissionsForTeamRole = (\r\n  role: TeamRole\r\n): Permission[] => {\r\n  const basePermissions: Record<\r\n    TeamRole,\r\n    Array<{\r\n      resource: ResourceType;\r\n      action: PermissionAction;\r\n      granted: boolean;\r\n    }>\r\n  > = {\r\n    [TeamRole.OWNER]: [\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.CREATE,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.READ,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.UPDATE,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.DELETE,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.MANAGE_PERMISSIONS,\r\n        granted: true,\r\n      },\r\n    ],\r\n    [TeamRole.ADMIN]: [\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.CREATE,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.READ,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.UPDATE,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.DELETE,\r\n        granted: false,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.MANAGE_PERMISSIONS,\r\n        granted: true,\r\n      },\r\n    ],\r\n    [TeamRole.EDITOR]: [\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.CREATE,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.READ,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.UPDATE,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.DELETE,\r\n        granted: false,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.MANAGE_PERMISSIONS,\r\n        granted: false,\r\n      },\r\n    ],\r\n    [TeamRole.VIEWER]: [\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.CREATE,\r\n        granted: false,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.READ,\r\n        granted: true,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.UPDATE,\r\n        granted: false,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.DELETE,\r\n        granted: false,\r\n      },\r\n      {\r\n        resource: ResourceType.TEAM,\r\n        action: PermissionAction.MANAGE_PERMISSIONS,\r\n        granted: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return basePermissions[role].map(perm => ({\r\n    resource: perm.resource,\r\n    action: perm.action,\r\n    granted: perm.granted,\r\n  }));\r\n};\r\n\r\n// 프로젝트 역할의 기본 권한 반환\r\nexport const getDefaultPermissionsForProjectRole = (\r\n  role: ProjectRole\r\n): Permission[] => {\r\n  // 프로젝트 역할별 기본 권한 정의\r\n  // 실제 구현에서는 더 세밀한 권한 설정이 필요\r\n  return [];\r\n};\r\n\r\n// 작업 역할의 기본 권한 반환\r\nexport const getDefaultPermissionsForTaskRole = (\r\n  role: TaskRole\r\n): Permission[] => {\r\n  // 작업 역할별 기본 권한 정의\r\n  // 실제 구현에서는 더 세밀한 권한 설정이 필요\r\n  return [];\r\n};\r\n\r\n// 권한 요약 생성\r\nexport const generatePermissionSummary = (\r\n  permissions: Permission[]\r\n): {\r\n  granted: number;\r\n  denied: number;\r\n  byResource: Record<ResourceType, { granted: number; denied: number }>;\r\n  byAction: Record<PermissionAction, { granted: number; denied: number }>;\r\n} => {\r\n  const summary = {\r\n    granted: 0,\r\n    denied: 0,\r\n    byResource: {} as Record<ResourceType, { granted: number; denied: number }>,\r\n    byAction: {} as Record<\r\n      PermissionAction,\r\n      { granted: number; denied: number }\r\n    >,\r\n  };\r\n\r\n  permissions.forEach(permission => {\r\n    if (permission.granted) {\r\n      summary.granted++;\r\n    } else {\r\n      summary.denied++;\r\n    }\r\n\r\n    // 리소스별 집계\r\n    if (!summary.byResource[permission.resource]) {\r\n      summary.byResource[permission.resource] = { granted: 0, denied: 0 };\r\n    }\r\n    if (permission.granted) {\r\n      summary.byResource[permission.resource].granted++;\r\n    } else {\r\n      summary.byResource[permission.resource].denied++;\r\n    }\r\n\r\n    // 액션별 집계\r\n    if (!summary.byAction[permission.action]) {\r\n      summary.byAction[permission.action] = { granted: 0, denied: 0 };\r\n    }\r\n    if (permission.granted) {\r\n      summary.byAction[permission.action].granted++;\r\n    } else {\r\n      summary.byAction[permission.action].denied++;\r\n    }\r\n  });\r\n\r\n  return summary;\r\n};\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\utils\\toast.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\utils\\translation.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 81,
        "column": 5,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 81,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeConsole",
            "data": { "propertyName": "error" },
            "fix": { "range": [1880, 1924], "text": "" },
            "desc": "Remove the console.error()."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "interface TranslationResponse {\n  data: {\n    translations: Array<{\n      translatedText: string;\n      detectedSourceLanguage?: string;\n    }>;\n  };\n}\n\ninterface TranslationCache {\n  [key: string]: {\n    translatedText: string;\n    timestamp: number;\n  };\n}\n\n// 번역 캐시 (메모리 기반)\nconst translationCache: TranslationCache = {};\nconst CACHE_DURATION = 24 * 60 * 60 * 1000; // 24시간\n\n/**\n * Google Translation API를 사용하여 텍스트를 번역합니다.\n * @param text 번역할 텍스트\n * @param targetLanguage 대상 언어 (예: 'vi', 'ko')\n * @param sourceLanguage 원본 언어 (선택사항)\n * @returns 번역된 텍스트\n */\nexport const translateText = async (\n  text: string,\n  targetLanguage: string,\n  sourceLanguage?: string\n): Promise<string> => {\n  if (!text.trim()) {\n    return text;\n  }\n\n  // 캐시 키 생성\n  const cacheKey = `${text}_${targetLanguage}_${sourceLanguage || 'auto'}`;\n  const now = Date.now();\n\n  // 캐시에서 확인\n  if (\n    translationCache[cacheKey] &&\n    now - translationCache[cacheKey].timestamp < CACHE_DURATION\n  ) {\n    return translationCache[cacheKey].translatedText;\n  }\n\n  try {\n    // Google Translation API 호출\n    const response = await fetch(\n      `https://translation.googleapis.com/language/translate/v2?key=${process.env.REACT_APP_GOOGLE_TRANSLATE_API_KEY}`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          q: text,\n          target: targetLanguage,\n          source: sourceLanguage || 'auto',\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Translation API error: ${response.status}`);\n    }\n\n    const data: TranslationResponse = await response.json();\n    const translatedText = data.data.translations[0]?.translatedText || text;\n\n    // 캐시에 저장\n    translationCache[cacheKey] = {\n      translatedText,\n      timestamp: now,\n    };\n\n    return translatedText;\n  } catch (error) {\n    console.error('Translation failed:', error);\n    // 번역 실패 시 원본 텍스트 반환\n    return text;\n  }\n};\n\n/**\n * 캐시를 정리합니다 (오래된 항목 제거)\n */\nexport const clearTranslationCache = (): void => {\n  const now = Date.now();\n  Object.keys(translationCache).forEach(key => {\n    if (now - translationCache[key].timestamp > CACHE_DURATION) {\n      delete translationCache[key];\n    }\n  });\n};\n\n/**\n * 특정 언어로 번역된 텍스트를 가져옵니다.\n * @param text 원본 텍스트\n * @param targetLanguage 대상 언어\n * @returns 번역된 텍스트 또는 원본 텍스트\n */\nexport const getTranslatedText = async (\n  text: string,\n  targetLanguage: string\n): Promise<string> => {\n  if (targetLanguage === 'ko') {\n    return text; // 한국어는 번역하지 않음\n  }\n\n  return await translateText(text, targetLanguage);\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\WORK\\app_management\\ALMUS ToDo List\\apps\\web-app\\src\\vite-env.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
