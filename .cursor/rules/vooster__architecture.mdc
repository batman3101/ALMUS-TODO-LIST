---
description:
globs:
alwaysApply: true
---
# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **프로젝트 개요**  
  소규모 한국·베트남 혼합 팀을 위한 멀티플랫폼 업무 관리 SaaS로, 웹·모바일·데스크톱에서 할 일(TODO)과 업무(Task)를 등록·분담·추적. 그리드·칸반·간트 차트를 통해 실시간 진행률 시각화. 다국어 UI·알림으로 협업 혼선 최소화.
- **핵심 기술 스택**  
  프런트엔드: React, TypeScript, Redux Toolkit, React Query  
  모바일: React Native (Expo)  
  데스크톱: Electron(PWA 기반)  
  백엔드: Node.js (NestJS), GraphQL Gateway + REST Fallback  
  데이터베이스: PostgreSQL (파티셔닝), Redis  
  인프라: AWS EKS, RDS, S3, CloudFront, SNS  
  CI/CD: GitHub Actions → Docker → ArgoCD  
  로깅/모니터링: ELK Stack, Prometheus + Grafana  
  번역 API: Google Cloud Translation  
- **주요 기술 목표**  
  • 평균 페이지 응답 ≤1초, 가용성 99.9% 유지  
  • 동시 편집 충돌 방지(OT 기반 실시간 협업)  
  • 대규모(10k Task) 데이터 로드 2초 이내  
- **핵심 가정**  
  • 멀티 테넌트 구조로 확장 가능, 수평 확장(EKS)  
  • 모바일 우선 디자인, PWA 기능 활용  
  • 다국어 지원은 한국어·베트남어부터 순차 확장  

## 2. Tech Stack

| Category        | Technology / Library                | Reasoning                                       |
| --------------- | ----------------------------------- | ----------------------------------------------- |
| Frontend        | React, TypeScript                   | 재사용성·유지보수성 높고 커뮤니티 지원 풍부     |
| State Management| Redux Toolkit                        | 간단한 상태 관리, 비동기 로직 처리 용이         |
| Data Fetching   | React Query                         | 서버 상태 캐싱·동기화 최적화                    |
| Mobile          | React Native, Expo                  | 단일 코드베이스로 iOS·Android 지원, OTA 업데이트|
| Desktop         | Electron (PWA 기반)                 | 기존 웹 코드 재활용, 크로스플랫폼 배포 간편      |
| Backend         | Node.js, NestJS                     | 구조화된 아키텍처, 모듈화·테스트 용이           |
| API             | GraphQL Gateway, REST Fallback      | 유연한 클라이언트 요구, 이중 접근 지원           |
| Database        | PostgreSQL (파티셔닝)               | 관계형 데이터 정합성 보장, 대규모 데이터 처리   |
| Cache           | Redis                                | 세션·실시간 편집 협업 상태, 캐싱 속도 최적화    |
| Infrastructure  | AWS EKS, RDS, S3, CloudFront, SNS   | 관리형 서비스 활용, 수평 확장 및 글로벌 배포 최적|
| CI/CD           | GitHub Actions, Docker, ArgoCD      | 자동화 파이프라인 구축, 빠른 배포               |
| Monitoring      | ELK Stack, Prometheus + Grafana     | 로그·메트릭 통합 모니터링                       |
| Translation API | Google Cloud Translation API        | 안정적 번역 품질, REST 기반 간편 연동           |
| Integration     | Slack, Microsoft Teams, KakaoTalk   | 주요 협업 툴 연동, Webhook 기반 간편 구현       |

## 3. System Architecture Design

### Top-Level Building Blocks
- 프런트엔드 애플리케이션  
  • React 기반 SPA, React Query로 데이터 페칭  
  • 다국어 UI 토글 및 실시간 번역 API 연동  
- 모바일 애플리케이션  
  • Expo 기반 React Native, PWA 오프라인 캐싱  
- 데스크톱 애플리케이션  
  • Electron 래퍼, 내부 PWA 로딩  
- 백엔드 서비스  
  • NestJS 기반 GraphQL Gateway, REST 엔드포인트  
  • OT(Operational Transformation) 협업 모듈  
- 데이터 저장소  
  • PostgreSQL (파티셔닝), Redis 캐시  
- 외부 통합 서비스  
  • Google Cloud Translation, OAuth(Google/Microsoft)  
  • Slack·Teams·KakaoTalk 알림 Webhook  
- 인프라 & 배포  
  • AWS EKS(컨테이너 오케스트레이션), RDS, S3, CloudFront, SNS  
  • CI/CD: GitHub Actions → Docker → ArgoCD  
- 로깅·모니터링  
  • ELK Stack 로그 저장, Prometheus 메트릭 + Grafana 대시보드  

### Top-Level Component Interaction Diagram
```mermaid
graph TD
    FE[웹 프런트엔드] --> API[GraphQL Gateway]
    MB[모바일 앱] --> API
    DT[데스크톱 앱] --> API
    API --> BE[비즈니스 로직 (NestJS)]
    BE --> DB[PostgreSQL]
    BE --> REDIS[Redis 캐시]
    BE --> EXT[외부 서비스 (Translation, OAuth, Webhook)]
```
- 웹·모바일·데스크톱 클라이언트는 GraphQL Gateway를 통해 백엔드 비즈니스 로직에 요청  
- NestJS 비즈니스 계층은 PostgreSQL·Redis로 데이터 조회·캐싱  
- 번역·알림·OAuth는 외부 서비스와 REST/Webhook 연동  
- CI/CD 파이프라인은 Docker 이미지를 AWS EKS에 배포  

### Code Organization & Convention
**Domain-Driven Organization Strategy**  
- Domain Separation: user, task, board, notification, dashboard, collaboration  
- Layer-Based Architecture: presentation (controller/resolver) → service → repository  
- Feature-Based Modules: 각 도메인별 NestJS 모듈  
- Shared Components: 공통 유틸·데이터 타입·인터셉터·필터

**Universal File & Folder Structure**
```
/
├── apps
│   ├── web-app                   # React 프런트엔드
│   ├── mobile-app                # React Native (Expo)
│   └── desktop-app               # Electron 래퍼
├── services
│   ├── api-gateway               # GraphQL Gateway + REST
│   ├── auth-service              # OAuth, JWT
│   ├── task-service              # Task/TODO 관리
│   ├── board-service             # 그리드·칸반·간트 로직
│   └── notification-service      # Push/Email/In-App 알림
├── libs
│   ├── shared-types              # 공통 타입 정의
│   ├── shared-utils              # 공통 유틸리티
│   └── ot-collab                 # Operational Transformation 라이브러리
├── infra
│   ├── k8s                       # 쿠버네티스 매니페스트
│   ├── terraform                 # AWS 인프라 코드
│   └── argocd                    # ArgoCD 설정
├── scripts
│   └── migrate                   # DB 마이그레이션 스크립트
└── .github
    └── workflows                 # GitHub Actions CI 설정
```

### Data Flow & Communication Patterns
- **Client-Server Communication**: GraphQL 쿼리/뮤테이션, WebSocket(협업 실시간 동기화)  
- **Database Interaction**: TypeORM 또는 Prisma ORM 사용, 파티셔닝 전략 적용  
- **External Service Integration**: RESTful Webhook, Google Translation API 호출 비동기 처리  
- **Real-time Communication**: WebSocket 기반 OT 협업 이벤트 브로드캐스트  
- **Data Synchronization**: CQRS 패턴 고려, Redis Pub/Sub을 통한 이벤트 전파  

## 4. Performance & Optimization Strategy
- 쿼리 최적화: 인덱스·파티셔닝, N+1 문제 해결을 위한 DataLoader 사용  
- 캐싱 전략: Redis를 활용한 빈번 조회 데이터 및 OT 세션 캐시  
- 지연 경고: 간트 차트 종속성 변경 시 서버 사이드 계산 후 즉각 알림  
- CDN 활용: CloudFront로 정적 자산 전송, S3 버전 관리  

## 5. Implementation Roadmap & Milestones

### Phase 1: Foundation (MVP Implementation)
- Core Infrastructure: EKS 클러스터, RDS, 기본 네트워크  
- Essential Features: Task CRUD, 그리드·칸반 뷰, 기본 권한 관리  
- Basic Security: OAuth2, JWT 인증, AES-256 at-rest  
- Development Setup: GitHub Actions, Docker 이미지 구축  
- Timeline: 8주

### Phase 2: Feature Enhancement
- Advanced Features: 간트 차트, 멘션·댓글, 파일 첨부, 다국어(한국어)  
- Performance Optimization: 캐싱·인덱싱, OT 협업 테스트  
- Enhanced Security: CSRF, XSS 방어, GDPR 준비  
- Monitoring Implementation: ELK + Prometheus 대시보드  
- Timeline: 6주

### Phase 3: Scaling & Optimization
- Scalability Implementation: 멀티 테넌트 지원, Auto Scaling 설정  
- Advanced Integrations: Slack·Teams·KakaoTalk 알림, Calendar 연동  
- Enterprise Features: API 공개(REST·GraphQL), CSV 내보내기  
- Compliance & Auditing: ISO 27001 감사 준비, 스냅샷 백업 검증  
- Timeline: 8주

## 6. Risk Assessment & Mitigation Strategies

### Technical Risk Analysis
- **기술 리스크**: OT 구현 복잡도 → 검증된 오픈소스 라이브러리 활용  
- **성능 리스크**: 대량 Task 로드 지연 → 파티셔닝·캐싱, 프론트트리거 페이징  
- **보안 리스크**: JWT 탈취, XSS → HTTPS 강제, CSP, Input Validation  
- **통합 리스크**: 외부 Webhook 지연/오류 → 재시도 로직, Dead Letter Queue  

### Project Delivery Risks
- **일정 리스크**: 멀티 플랫폼 동시 개발 → MVP 단계 우선순위 명확화  
- **리소스 리스크**: OT 전문 지식 부족 → 사전 PoC 및 교육  
- **품질 리스크**: 테스트 커버리지 부족 → 유닛·통합·E2E 테스트 파이프라인  
- **배포 리스크**: 버전 호환성 이슈 → 블루/그린 배포 전략  
- **비상 계획**: 롤백 스크립트, 별도 테스트 클러스터 운영  

---
